contract main {




// =====================  Runtime code  =====================


#
#  - getPricePerFullShare(bool arg1)
#  - sub_936ffc23(?)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of uint256 allowance;
uint256 totalSupply;
array of struct stor54;
array of struct stor55;
uint256 stor101;
address owner;
uint8 paused;
address routerAddress;
address masterChefAddress;
address stakingRewardAddress;
uint32 stor254;
uint256 stor254; offset 32
uint256 poolId;
uint8 sub_abddf82e;
address lpTokenAddress; offset 8
address token0Address;
address token1Address;
uint256 stor258;
uint256 stor259;
address rewardTokenAddress;
address treasuryWalletAddress;
address communityWalletAddress;
address adminAddress;
uint256 sub_b1a41085;
uint256 sub_cac7b495;
mapping of uint8 stor266;

function stakingReward() {
    return stakingRewardAddress
}

function token0() {
    return token0Address
}

function totalSupply() {
    return totalSupply
}

function isWhitelisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor266[arg1])
}

function poolId() {
    return poolId
}

function treasuryWallet() {
    return treasuryWalletAddress
}

function masterChef() {
    return masterChefAddress
}

function paused() {
    return bool(paused)
}

function lpToken() {
    return lpTokenAddress
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function owner() {
    return owner
}

function sub_abddf82e(?) {
    return bool(sub_abddf82e)
}

function sub_b1a41085(?) {
    return sub_b1a41085
}

function communityWallet() {
    return communityWalletAddress
}

function sub_cac7b495(?) {
    return sub_cac7b495
}

function token1() {
    return token1Address
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)]
}

function rewardToken() {
    return rewardTokenAddress
}

function admin() {
    return adminAddress
}

function router() {
    return routerAddress
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    adminAddress = arg1
    emit SetAdmin(arg1);
}

function setFee(uint256 arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_b1a41085 = arg1
    sub_cac7b495 = arg2
    emit SetFee(arg1, arg2);
}

function setTreasuryWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    treasuryWalletAddress = arg1
    emit SetTreasuryWallet(arg1);
}

function setCommunityWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    communityWalletAddress = arg1
    emit SetCommunityWallet(arg1);
}

function reinvest() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if not paused:
        revert with 0, 'Pausable: not paused'
    paused = 0
    emit Unpaused(msg.sender);
    revert with 0, 'Pausable: paused'
}

function setWhitelistAddress(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    stor266[address(arg1)] = uint8(arg2)
    emit SetWhitelistAddress(address(arg1), arg2);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] > !arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] + arg2
    emit Approval((allowance[msg.sender][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(msg.sender)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg2
    if balanceOf[arg1] > !arg2:
        revert with 0, 17
    balanceOf[arg1] += arg2
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] - arg2
    emit Approval((allowance[msg.sender][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function invest() {
    if paused:
        revert with 0, 'Pausable: paused'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0]
    else:
        require ext_code.size(stakingRewardAddress)
        call stakingRewardAddress.0xa694fc3a with:
             gas gas_remaining wei
            args ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getAllPool() {
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
    else:
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    return (2 * ext_call.return_data[0])
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(arg1)] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(arg1)] -= arg3
    if balanceOf[arg2] > !arg3:
        revert with 0, 17
    balanceOf[arg2] += arg3
    emit Transfer(arg3, arg1, arg2);
    if allowance[address(arg1)][msg.sender] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds allowance'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)] = allowance[address(arg1)][msg.sender] - arg3
    emit Approval((allowance[address(arg1)][msg.sender] - arg3), arg1, msg.sender);
    return 1
}

function emergencyWithdraw() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if paused:
        revert with 0, 'Pausable: paused'
    paused = 1
    emit Paused(msg.sender);
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if ext_call.return_data[0]:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
    else:
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.earned(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0x3d18b912 with:
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
    emit EmergencyWithdraw(ext_call.return_data[0]);
}

function name() {
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor54.length):
            if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor54.length):
                if 31 < uint255(stor54.length) * 0.5:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor54.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        else:
            if bool(stor54.length) == stor54.length.field_1 < 32:
                revert with 0, 34
            if stor54.length.field_1:
                if 31 < stor54.length.field_1:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while stor54.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        mem[ceil32(uint255(stor54.length) * 0.5) + 192 len ceil32(uint255(stor54.length) * 0.5)] = mem[128 len ceil32(uint255(stor54.length) * 0.5)]
        if ceil32(uint255(stor54.length) * 0.5) > uint255(stor54.length) * 0.5:
            mem[(uint255(stor54.length) * 0.5) + ceil32(uint255(stor54.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)], mem[(2 * ceil32(uint255(stor54.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor54.length) * 0.5)]), 
    if bool(stor54.length) == stor54.length.field_1 < 32:
        revert with 0, 34
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor54.length):
            if 31 < uint255(stor54.length) * 0.5:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while (uint255(stor54.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    else:
        if bool(stor54.length) == stor54.length.field_1 < 32:
            revert with 0, 34
        if stor54.length.field_1:
            if 31 < stor54.length.field_1:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while stor54.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    mem[ceil32(stor54.length.field_1) + 192 len ceil32(stor54.length.field_1)] = mem[128 len ceil32(stor54.length.field_1)]
    if ceil32(stor54.length.field_1) > stor54.length.field_1:
        mem[stor54.length.field_1 + ceil32(stor54.length.field_1) + 192] = 0
    return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)], mem[(2 * ceil32(stor54.length.field_1)) + 192 len 2 * ceil32(stor54.length.field_1)]), 
}

function symbol() {
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor55.length):
            if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor55.length):
                if 31 < uint255(stor55.length) * 0.5:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor55.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        else:
            if bool(stor55.length) == stor55.length.field_1 < 32:
                revert with 0, 34
            if stor55.length.field_1:
                if 31 < stor55.length.field_1:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while stor55.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        mem[ceil32(uint255(stor55.length) * 0.5) + 192 len ceil32(uint255(stor55.length) * 0.5)] = mem[128 len ceil32(uint255(stor55.length) * 0.5)]
        if ceil32(uint255(stor55.length) * 0.5) > uint255(stor55.length) * 0.5:
            mem[(uint255(stor55.length) * 0.5) + ceil32(uint255(stor55.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)], mem[(2 * ceil32(uint255(stor55.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor55.length) * 0.5)]), 
    if bool(stor55.length) == stor55.length.field_1 < 32:
        revert with 0, 34
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor55.length):
            if 31 < uint255(stor55.length) * 0.5:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while (uint255(stor55.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    else:
        if bool(stor55.length) == stor55.length.field_1 < 32:
            revert with 0, 34
        if stor55.length.field_1:
            if 31 < stor55.length.field_1:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while stor55.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    mem[ceil32(stor55.length.field_1) + 192 len ceil32(stor55.length.field_1)] = mem[128 len ceil32(stor55.length.field_1)]
    if ceil32(stor55.length.field_1) > stor55.length.field_1:
        mem[stor55.length.field_1 + ceil32(stor55.length.field_1) + 192] = 0
    return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)], mem[(2 * ceil32(stor55.length.field_1)) + 192 len 2 * ceil32(stor55.length.field_1)]), 
}

function getPendingRewards() {
    if sub_abddf82e:
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.earned(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0], 0
    if 0x4c9b4e1ac6f24cde3660d5e4ef1ebf77c710c084 == rewardTokenAddress:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.pendingLyd(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(rewardTokenAddress)
        staticcall rewardTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        return 2 * ext_call.return_data[0], 0
    mem[96] = 0xffcd426300000000000000000000000000000000000000000000000000000000
    mem[100] = poolId
    mem[132] = this.address
    require ext_code.size(masterChefAddress)
    staticcall masterChefAddress.pendingTokens(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args poolId, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 128
    _11 = mem[96 len 4], Mask(224, 0, stor254.field_32)
    require uint32(stor254.field_0), Mask(224, 32, this.address) >> 32 == Mask(160, 32, this.address) >> 32
    _17 = uint32(this.address), mem[164 len 28]
    require uint32(this.address), mem[164 len 28] <= test266151307()
    require uint32(this.address), mem[164 len 28] + 127 < return_data.size + 96
    _20 = mem[uint32(this.address), mem[164 len 28] + 96]
    if mem[uint32(this.address), mem[164 len 28] + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 1 < 0 or ceil32(return_data.size) + ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 97
    mem[ceil32(return_data.size) + 96] = _20
    require _17 + _20 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(_20)] = mem[_17 + 128 len ceil32(_20)]
    if ceil32(_20) <= _20:
        _41 = mem[192]
        mem[mem[64] + 4] = this.address
        require ext_code.size(rewardTokenAddress)
        staticcall rewardTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _47 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if _11 > !mem[_47]:
            revert with 0, 17
        mem[mem[64]] = _11 + mem[_47]
        return mem[mem[64]], _41
    mem[_20 + ceil32(return_data.size) + 128] = 0
    _42 = mem[192]
    mem[mem[64] + 4] = this.address
    require ext_code.size(rewardTokenAddress)
    staticcall rewardTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _48 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if _11 > !mem[_48]:
        revert with 0, 17
    mem[mem[64]] = _11 + mem[_48]
    return mem[mem[64]], _42
}

function withdraw(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if not arg1:
        revert with 0, 'Share must > 0'
    if arg1 > balanceOf[msg.sender]:
        revert with 0, 'Not enough shares to withdraw'
    mem[100] = this.address
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        mem[ceil32(return_data.size) + 132] = this.address
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        mem[ceil32(return_data.size) + 96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
    else:
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    if uint255(ext_call.return_data[0]) and arg1 > -1 / 2 * ext_call.return_data[0]:
        revert with 0, 17
    if not totalSupply:
        revert with 0, 18
    if not msg.sender:
        revert with 0, 'ERC20: burn from the zero address'
    if balanceOf[address(msg.sender)] < arg1:
        revert with 0, 'ERC20: burn amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg1
    if totalSupply < arg1:
        revert with 0, 17
    totalSupply -= arg1
    emit Transfer(arg1, msg.sender, 0);
    if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply > ext_call.return_data[0]:
        if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply < ext_call.return_data[0]:
            revert with 0, 17
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0]
        else:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(2 * ceil32(return_data.size)) + 164] = (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply
    mem[(2 * ceil32(return_data.size)) + 96] = 68
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[(2 * ceil32(return_data.size)) + 196] = 32
    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(lpTokenAddress):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0
    mem[(2 * ceil32(return_data.size)) + 328] = 0
    call lpTokenAddress with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
            if not mem[(2 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit Withdraw(msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, arg1);
    stor101 = 1
    return ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply)
}

function deposit(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if paused:
        revert with 0, 'Pausable: paused'
    if arg1 <= 0:
        revert with 0, 'Amount must > 0'
    if not stor266[msg.sender]:
        revert with 0, 'Not whitelisted'
    if not sub_abddf82e:
        mem[132] = this.address
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
        mem[(2 * ceil32(return_data.size)) + 164] = this.address
        mem[(2 * ceil32(return_data.size)) + 196] = arg1
        mem[(2 * ceil32(return_data.size)) + 96] = 100
        mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
        mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
        mem[(2 * ceil32(return_data.size)) + 228] = 32
        mem[(2 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(lpTokenAddress):
            revert with 0, 'Address: call to non-contract'
        mem[(2 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
        mem[(2 * ceil32(return_data.size)) + 392] = 0
        call lpTokenAddress with:
           funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require ext_call.return_data[32] == bool(ext_call.return_data[32])
                if not ext_call.return_data[32]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[(2 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[(2 * ceil32(return_data.size)) + 324] == bool(mem[(2 * ceil32(return_data.size)) + 324])
                if not mem[(2 * ceil32(return_data.size)) + 324]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[100] = this.address
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
        mem[(2 * ceil32(return_data.size)) + 164] = this.address
        mem[(2 * ceil32(return_data.size)) + 196] = arg1
        mem[(2 * ceil32(return_data.size)) + 96] = 100
        mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
        mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
        mem[(2 * ceil32(return_data.size)) + 228] = 32
        mem[(2 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(lpTokenAddress):
            revert with 0, 'Address: call to non-contract'
        mem[(2 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
        mem[(2 * ceil32(return_data.size)) + 392] = 0
        call lpTokenAddress with:
           funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
                if not uint32(this.address), mem[132 len 28]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[(2 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[(2 * ceil32(return_data.size)) + 324] == bool(mem[(2 * ceil32(return_data.size)) + 324])
                if not mem[(2 * ceil32(return_data.size)) + 324]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    if not totalSupply:
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !arg1:
            revert with 0, 17
        totalSupply += arg1
        if balanceOf[address(msg.sender)] > !arg1:
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1
        emit Transfer(arg1, 0, msg.sender);
        if paused:
            revert with 0, 'Pausable: paused'
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
        else:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0xa694fc3a with:
                 gas gas_remaining wei
                args ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit Deposit(msg.sender, arg1, arg1);
    else:
        if arg1 and totalSupply > -1 / arg1:
            revert with 0, 17
        if not 2 * ext_call.return_data[0]:
            revert with 0, 18
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        totalSupply += arg1 * totalSupply / 2 * ext_call.return_data[0]
        if balanceOf[address(msg.sender)] > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1 * totalSupply / 2 * ext_call.return_data[0]
        emit Transfer((arg1 * totalSupply / 2 * ext_call.return_data[0]), 0, msg.sender);
        if paused:
            revert with 0, 'Pausable: paused'
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
        else:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0xa694fc3a with:
                 gas gas_remaining wei
                args ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit Deposit(msg.sender, arg1, arg1 * totalSupply / 2 * ext_call.return_data[0]);
    stor101 = 1
}

function yield() {
    if msg.sender == owner:
        if paused:
            revert with 0, 'Pausable: paused'
        if sub_abddf82e:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0x3d18b912 with:
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _20 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1692 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1696 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1692 + (32 * _1696) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1696)] = mem[(2 * ceil32(return_data.size)) + _1692 + 224 len ceil32(32 * _1696)]
            if 1 >= _1696:
                revert with 0, 50
            _3284 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3284 < (ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3543 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3543]:
                            revert with 0, 50
                        mem[_3543 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3543]:
                            revert with 0, 50
                        mem[_3543 + 64] = token1Address
                        mem[_3543 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3543 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3543 + 132] = 0
                        mem[_3543 + 164] = 160
                        mem[_3543 + 260] = mem[_3543]
                        idx = 0
                        s = _3543 + 32
                        t = _3543 + 292
                        while idx < mem[_3543]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3543 + 196] = this.address
                        mem[_3543 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3543 + (32 * mem[_3543]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4957 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5005 = mem[_4957]
                        require mem[_4957] <= test266151307()
                        require _4957 + mem[_4957] + 31 < _4957 + return_data.size
                        _5053 = mem[_4957 + mem[_4957]]
                        if mem[_4957 + mem[_4957]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4957 + mem[_4957]]) + 1 < 0 or _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1
                        mem[_4957 + ceil32(return_data.size)] = _5053
                        require _5005 + (32 * _5053) + 32 <= return_data.size
                        mem[_4957 + ceil32(return_data.size) + 32 len ceil32(32 * _5053)] = mem[_4957 + _5005 + 32 len ceil32(32 * _5053)]
                        if 1 >= _5053:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4957 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3589 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3589]:
                                revert with 0, 50
                            mem[_3589 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3589]:
                                revert with 0, 50
                            mem[_3589 + 64] = token0Address
                            mem[_3589 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3589 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3589 + 132] = 0
                            mem[_3589 + 164] = 160
                            mem[_3589 + 260] = mem[_3589]
                            idx = 0
                            s = _3589 + 32
                            t = _3589 + 292
                            while idx < mem[_3589]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3589 + 196] = this.address
                            mem[_3589 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3589 + (32 * mem[_3589]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4956 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5004 = mem[_4956]
                            require mem[_4956] <= test266151307()
                            require _4956 + mem[_4956] + 31 < _4956 + return_data.size
                            _5052 = mem[_4956 + mem[_4956]]
                            if mem[_4956 + mem[_4956]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4956 + mem[_4956]]) + 1 < 0 or _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1
                            mem[_4956 + ceil32(return_data.size)] = _5052
                            require _5004 + (32 * _5052) + 32 <= return_data.size
                            mem[_4956 + ceil32(return_data.size) + 32 len ceil32(32 * _5052)] = mem[_4956 + _5004 + 32 len ceil32(32 * _5052)]
                            if 1 >= _5052:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4956 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3587 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3587]:
                                revert with 0, 50
                            mem[_3587 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3587]:
                                revert with 0, 50
                            mem[_3587 + 64] = token0Address
                            mem[_3587 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3587 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3587 + 132] = 0
                            mem[_3587 + 164] = 160
                            mem[_3587 + 260] = mem[_3587]
                            idx = 0
                            s = _3587 + 32
                            t = _3587 + 292
                            while idx < mem[_3587]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3587 + 196] = this.address
                            mem[_3587 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3587 + (32 * mem[_3587]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4955 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5003 = mem[_4955]
                            require mem[_4955] <= test266151307()
                            require _4955 + mem[_4955] + 31 < _4955 + return_data.size
                            _5051 = mem[_4955 + mem[_4955]]
                            if mem[_4955 + mem[_4955]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4955 + mem[_4955]]) + 1 < 0 or _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1
                            mem[_4955 + ceil32(return_data.size)] = _5051
                            require _5003 + (32 * _5051) + 32 <= return_data.size
                            mem[_4955 + ceil32(return_data.size) + 32 len ceil32(32 * _5051)] = mem[_4955 + _5003 + 32 len ceil32(32 * _5051)]
                            if 1 >= _5051:
                                revert with 0, 50
                            _6027 = mem[_4955 + ceil32(return_data.size) + 64]
                            _6167 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6167]:
                                revert with 0, 50
                            mem[_6167 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6167]:
                                revert with 0, 50
                            mem[_6167 + 64] = token1Address
                            mem[_6167 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6167 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6167 + 132] = 0
                            mem[_6167 + 164] = 160
                            mem[_6167 + 260] = mem[_6167]
                            idx = 0
                            s = _6167 + 32
                            t = _6167 + 292
                            while idx < mem[_6167]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6167 + 196] = this.address
                            mem[_6167 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6167 + (32 * mem[_6167]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6739 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6755 = mem[_6739]
                            require mem[_6739] <= test266151307()
                            require _6739 + mem[_6739] + 31 < _6739 + return_data.size
                            _6771 = mem[_6739 + mem[_6739]]
                            if mem[_6739 + mem[_6739]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6739 + mem[_6739]]) + 1 < 0 or _6739 + ceil32(return_data.size) + ceil32(32 * mem[_6739 + mem[_6739]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6739 + ceil32(return_data.size) + ceil32(32 * mem[_6739 + mem[_6739]]) + 1
                            mem[_6739 + ceil32(return_data.size)] = _6771
                            require _6755 + (32 * _6771) + 32 <= return_data.size
                            mem[_6739 + ceil32(return_data.size) + 32 len ceil32(32 * _6771)] = mem[_6739 + _6755 + 32 len ceil32(32 * _6771)]
                            if 1 >= _6771:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6027, mem[_6739 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3331 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3331] = return_data.size
                    mem[_3331 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3545 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3545]:
                            revert with 0, 50
                        mem[_3545 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3545]:
                            revert with 0, 50
                        mem[_3545 + 64] = token1Address
                        mem[_3545 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3545 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3545 + 132] = 0
                        mem[_3545 + 164] = 160
                        mem[_3545 + 260] = mem[_3545]
                        idx = 0
                        s = _3545 + 32
                        t = _3545 + 292
                        while idx < mem[_3545]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3545 + 196] = this.address
                        mem[_3545 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3545 + (32 * mem[_3545]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4960 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5008 = mem[_4960]
                        require mem[_4960] <= test266151307()
                        require _4960 + mem[_4960] + 31 < _4960 + return_data.size
                        _5056 = mem[_4960 + mem[_4960]]
                        if mem[_4960 + mem[_4960]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4960 + mem[_4960]]) + 1 < 0 or _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1
                        mem[_4960 + ceil32(return_data.size)] = _5056
                        require _5008 + (32 * _5056) + 32 <= return_data.size
                        mem[_4960 + ceil32(return_data.size) + 32 len ceil32(32 * _5056)] = mem[_4960 + _5008 + 32 len ceil32(32 * _5056)]
                        if 1 >= _5056:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4960 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3594 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3594]:
                                revert with 0, 50
                            mem[_3594 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3594]:
                                revert with 0, 50
                            mem[_3594 + 64] = token0Address
                            mem[_3594 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3594 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3594 + 132] = 0
                            mem[_3594 + 164] = 160
                            mem[_3594 + 260] = mem[_3594]
                            idx = 0
                            s = _3594 + 32
                            t = _3594 + 292
                            while idx < mem[_3594]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3594 + 196] = this.address
                            mem[_3594 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3594 + (32 * mem[_3594]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4959 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5007 = mem[_4959]
                            require mem[_4959] <= test266151307()
                            require _4959 + mem[_4959] + 31 < _4959 + return_data.size
                            _5055 = mem[_4959 + mem[_4959]]
                            if mem[_4959 + mem[_4959]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4959 + mem[_4959]]) + 1 < 0 or _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1
                            mem[_4959 + ceil32(return_data.size)] = _5055
                            require _5007 + (32 * _5055) + 32 <= return_data.size
                            mem[_4959 + ceil32(return_data.size) + 32 len ceil32(32 * _5055)] = mem[_4959 + _5007 + 32 len ceil32(32 * _5055)]
                            if 1 >= _5055:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4959 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3592 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3592]:
                                revert with 0, 50
                            mem[_3592 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3592]:
                                revert with 0, 50
                            mem[_3592 + 64] = token0Address
                            mem[_3592 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3592 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3592 + 132] = 0
                            mem[_3592 + 164] = 160
                            mem[_3592 + 260] = mem[_3592]
                            idx = 0
                            s = _3592 + 32
                            t = _3592 + 292
                            while idx < mem[_3592]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3592 + 196] = this.address
                            mem[_3592 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3592 + (32 * mem[_3592]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4958 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5006 = mem[_4958]
                            require mem[_4958] <= test266151307()
                            require _4958 + mem[_4958] + 31 < _4958 + return_data.size
                            _5054 = mem[_4958 + mem[_4958]]
                            if mem[_4958 + mem[_4958]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4958 + mem[_4958]]) + 1 < 0 or _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1
                            mem[_4958 + ceil32(return_data.size)] = _5054
                            require _5006 + (32 * _5054) + 32 <= return_data.size
                            mem[_4958 + ceil32(return_data.size) + 32 len ceil32(32 * _5054)] = mem[_4958 + _5006 + 32 len ceil32(32 * _5054)]
                            if 1 >= _5054:
                                revert with 0, 50
                            _6030 = mem[_4958 + ceil32(return_data.size) + 64]
                            _6169 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6169]:
                                revert with 0, 50
                            mem[_6169 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6169]:
                                revert with 0, 50
                            mem[_6169 + 64] = token1Address
                            mem[_6169 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6169 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6169 + 132] = 0
                            mem[_6169 + 164] = 160
                            mem[_6169 + 260] = mem[_6169]
                            idx = 0
                            s = _6169 + 32
                            t = _6169 + 292
                            while idx < mem[_6169]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6169 + 196] = this.address
                            mem[_6169 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6169 + (32 * mem[_6169]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6740 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6756 = mem[_6740]
                            require mem[_6740] <= test266151307()
                            require _6740 + mem[_6740] + 31 < _6740 + return_data.size
                            _6772 = mem[_6740 + mem[_6740]]
                            if mem[_6740 + mem[_6740]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6740 + mem[_6740]]) + 1 < 0 or _6740 + ceil32(return_data.size) + ceil32(32 * mem[_6740 + mem[_6740]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6740 + ceil32(return_data.size) + ceil32(32 * mem[_6740 + mem[_6740]]) + 1
                            mem[_6740 + ceil32(return_data.size)] = _6772
                            require _6756 + (32 * _6772) + 32 <= return_data.size
                            mem[_6740 + ceil32(return_data.size) + 32 len ceil32(32 * _6772)] = mem[_6740 + _6756 + 32 len ceil32(32 * _6772)]
                            if 1 >= _6772:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6030, mem[_6740 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3308 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3308] = return_data.size
                mem[_3308 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3547 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3547]:
                            revert with 0, 50
                        mem[_3547 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3547]:
                            revert with 0, 50
                        mem[_3547 + 64] = token1Address
                        mem[_3547 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3547 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3547 + 132] = 0
                        mem[_3547 + 164] = 160
                        mem[_3547 + 260] = mem[_3547]
                        idx = 0
                        s = _3547 + 32
                        t = _3547 + 292
                        while idx < mem[_3547]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3547 + 196] = this.address
                        mem[_3547 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3547 + (32 * mem[_3547]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4963 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5011 = mem[_4963]
                        require mem[_4963] <= test266151307()
                        require _4963 + mem[_4963] + 31 < _4963 + return_data.size
                        _5059 = mem[_4963 + mem[_4963]]
                        if mem[_4963 + mem[_4963]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4963 + mem[_4963]]) + 1 < 0 or _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1
                        mem[_4963 + ceil32(return_data.size)] = _5059
                        require _5011 + (32 * _5059) + 32 <= return_data.size
                        mem[_4963 + ceil32(return_data.size) + 32 len ceil32(32 * _5059)] = mem[_4963 + _5011 + 32 len ceil32(32 * _5059)]
                        if 1 >= _5059:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4963 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3599 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3599]:
                                revert with 0, 50
                            mem[_3599 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3599]:
                                revert with 0, 50
                            mem[_3599 + 64] = token0Address
                            mem[_3599 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3599 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3599 + 132] = 0
                            mem[_3599 + 164] = 160
                            mem[_3599 + 260] = mem[_3599]
                            idx = 0
                            s = _3599 + 32
                            t = _3599 + 292
                            while idx < mem[_3599]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3599 + 196] = this.address
                            mem[_3599 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3599 + (32 * mem[_3599]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4962 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5010 = mem[_4962]
                            require mem[_4962] <= test266151307()
                            require _4962 + mem[_4962] + 31 < _4962 + return_data.size
                            _5058 = mem[_4962 + mem[_4962]]
                            if mem[_4962 + mem[_4962]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4962 + mem[_4962]]) + 1 < 0 or _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1
                            mem[_4962 + ceil32(return_data.size)] = _5058
                            require _5010 + (32 * _5058) + 32 <= return_data.size
                            mem[_4962 + ceil32(return_data.size) + 32 len ceil32(32 * _5058)] = mem[_4962 + _5010 + 32 len ceil32(32 * _5058)]
                            if 1 >= _5058:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4962 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3597 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3597]:
                                revert with 0, 50
                            mem[_3597 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3597]:
                                revert with 0, 50
                            mem[_3597 + 64] = token0Address
                            mem[_3597 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3597 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3597 + 132] = 0
                            mem[_3597 + 164] = 160
                            mem[_3597 + 260] = mem[_3597]
                            idx = 0
                            s = _3597 + 32
                            t = _3597 + 292
                            while idx < mem[_3597]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3597 + 196] = this.address
                            mem[_3597 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3597 + (32 * mem[_3597]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4961 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5009 = mem[_4961]
                            require mem[_4961] <= test266151307()
                            require _4961 + mem[_4961] + 31 < _4961 + return_data.size
                            _5057 = mem[_4961 + mem[_4961]]
                            if mem[_4961 + mem[_4961]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4961 + mem[_4961]]) + 1 < 0 or _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1
                            mem[_4961 + ceil32(return_data.size)] = _5057
                            require _5009 + (32 * _5057) + 32 <= return_data.size
                            mem[_4961 + ceil32(return_data.size) + 32 len ceil32(32 * _5057)] = mem[_4961 + _5009 + 32 len ceil32(32 * _5057)]
                            if 1 >= _5057:
                                revert with 0, 50
                            _6033 = mem[_4961 + ceil32(return_data.size) + 64]
                            _6171 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6171]:
                                revert with 0, 50
                            mem[_6171 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6171]:
                                revert with 0, 50
                            mem[_6171 + 64] = token1Address
                            mem[_6171 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6171 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6171 + 132] = 0
                            mem[_6171 + 164] = 160
                            mem[_6171 + 260] = mem[_6171]
                            idx = 0
                            s = _6171 + 32
                            t = _6171 + 292
                            while idx < mem[_6171]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6171 + 196] = this.address
                            mem[_6171 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6171 + (32 * mem[_6171]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6741 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6757 = mem[_6741]
                            require mem[_6741] <= test266151307()
                            require _6741 + mem[_6741] + 31 < _6741 + return_data.size
                            _6773 = mem[_6741 + mem[_6741]]
                            if mem[_6741 + mem[_6741]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6741 + mem[_6741]]) + 1 < 0 or _6741 + ceil32(return_data.size) + ceil32(32 * mem[_6741 + mem[_6741]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6741 + ceil32(return_data.size) + ceil32(32 * mem[_6741 + mem[_6741]]) + 1
                            mem[_6741 + ceil32(return_data.size)] = _6773
                            require _6757 + (32 * _6773) + 32 <= return_data.size
                            mem[_6741 + ceil32(return_data.size) + 32 len ceil32(32 * _6773)] = mem[_6741 + _6757 + 32 len ceil32(32 * _6773)]
                            if 1 >= _6773:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6033, mem[_6741 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3333 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3333] = return_data.size
                    mem[_3333 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3549 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3549]:
                            revert with 0, 50
                        mem[_3549 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3549]:
                            revert with 0, 50
                        mem[_3549 + 64] = token1Address
                        mem[_3549 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3549 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3549 + 132] = 0
                        mem[_3549 + 164] = 160
                        mem[_3549 + 260] = mem[_3549]
                        idx = 0
                        s = _3549 + 32
                        t = _3549 + 292
                        while idx < mem[_3549]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3549 + 196] = this.address
                        mem[_3549 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3549 + (32 * mem[_3549]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4966 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5014 = mem[_4966]
                        require mem[_4966] <= test266151307()
                        require _4966 + mem[_4966] + 31 < _4966 + return_data.size
                        _5062 = mem[_4966 + mem[_4966]]
                        if mem[_4966 + mem[_4966]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4966 + mem[_4966]]) + 1 < 0 or _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1
                        mem[_4966 + ceil32(return_data.size)] = _5062
                        require _5014 + (32 * _5062) + 32 <= return_data.size
                        mem[_4966 + ceil32(return_data.size) + 32 len ceil32(32 * _5062)] = mem[_4966 + _5014 + 32 len ceil32(32 * _5062)]
                        if 1 >= _5062:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4966 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3604 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3604]:
                                revert with 0, 50
                            mem[_3604 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3604]:
                                revert with 0, 50
                            mem[_3604 + 64] = token0Address
                            mem[_3604 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3604 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3604 + 132] = 0
                            mem[_3604 + 164] = 160
                            mem[_3604 + 260] = mem[_3604]
                            idx = 0
                            s = _3604 + 32
                            t = _3604 + 292
                            while idx < mem[_3604]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3604 + 196] = this.address
                            mem[_3604 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3604 + (32 * mem[_3604]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4965 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5013 = mem[_4965]
                            require mem[_4965] <= test266151307()
                            require _4965 + mem[_4965] + 31 < _4965 + return_data.size
                            _5061 = mem[_4965 + mem[_4965]]
                            if mem[_4965 + mem[_4965]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4965 + mem[_4965]]) + 1 < 0 or _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1
                            mem[_4965 + ceil32(return_data.size)] = _5061
                            require _5013 + (32 * _5061) + 32 <= return_data.size
                            mem[_4965 + ceil32(return_data.size) + 32 len ceil32(32 * _5061)] = mem[_4965 + _5013 + 32 len ceil32(32 * _5061)]
                            if 1 >= _5061:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4965 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3602 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3602]:
                                revert with 0, 50
                            mem[_3602 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3602]:
                                revert with 0, 50
                            mem[_3602 + 64] = token0Address
                            mem[_3602 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3602 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3602 + 132] = 0
                            mem[_3602 + 164] = 160
                            mem[_3602 + 260] = mem[_3602]
                            idx = 0
                            s = _3602 + 32
                            t = _3602 + 292
                            while idx < mem[_3602]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3602 + 196] = this.address
                            mem[_3602 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3602 + (32 * mem[_3602]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4964 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5012 = mem[_4964]
                            require mem[_4964] <= test266151307()
                            require _4964 + mem[_4964] + 31 < _4964 + return_data.size
                            _5060 = mem[_4964 + mem[_4964]]
                            if mem[_4964 + mem[_4964]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4964 + mem[_4964]]) + 1 < 0 or _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1
                            mem[_4964 + ceil32(return_data.size)] = _5060
                            require _5012 + (32 * _5060) + 32 <= return_data.size
                            mem[_4964 + ceil32(return_data.size) + 32 len ceil32(32 * _5060)] = mem[_4964 + _5012 + 32 len ceil32(32 * _5060)]
                            if 1 >= _5060:
                                revert with 0, 50
                            _6036 = mem[_4964 + ceil32(return_data.size) + 64]
                            _6173 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6173]:
                                revert with 0, 50
                            mem[_6173 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6173]:
                                revert with 0, 50
                            mem[_6173 + 64] = token1Address
                            mem[_6173 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6173 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6173 + 132] = 0
                            mem[_6173 + 164] = 160
                            mem[_6173 + 260] = mem[_6173]
                            idx = 0
                            s = _6173 + 32
                            t = _6173 + 292
                            while idx < mem[_6173]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6173 + 196] = this.address
                            mem[_6173 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6173 + (32 * mem[_6173]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6742 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6758 = mem[_6742]
                            require mem[_6742] <= test266151307()
                            require _6742 + mem[_6742] + 31 < _6742 + return_data.size
                            _6774 = mem[_6742 + mem[_6742]]
                            if mem[_6742 + mem[_6742]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6742 + mem[_6742]]) + 1 < 0 or _6742 + ceil32(return_data.size) + ceil32(32 * mem[_6742 + mem[_6742]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6742 + ceil32(return_data.size) + ceil32(32 * mem[_6742 + mem[_6742]]) + 1
                            mem[_6742 + ceil32(return_data.size)] = _6774
                            require _6758 + (32 * _6774) + 32 <= return_data.size
                            mem[_6742 + ceil32(return_data.size) + 32 len ceil32(32 * _6774)] = mem[_6742 + _6758 + 32 len ceil32(32 * _6774)]
                            if 1 >= _6774:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6036, mem[_6742 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)));
        else:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _16 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1691 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1695 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1691 + (32 * _1695) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1695)] = mem[(2 * ceil32(return_data.size)) + _1691 + 224 len ceil32(32 * _1695)]
            if 1 >= _1695:
                revert with 0, 50
            _3283 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3283 < (ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3535 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 64] = token1Address
                        mem[_3535 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3535 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3535 + 132] = 0
                        mem[_3535 + 164] = 160
                        mem[_3535 + 260] = mem[_3535]
                        idx = 0
                        s = _3535 + 32
                        t = _3535 + 292
                        while idx < mem[_3535]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3535 + 196] = this.address
                        mem[_3535 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3535 + (32 * mem[_3535]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4945 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4993 = mem[_4945]
                        require mem[_4945] <= test266151307()
                        require _4945 + mem[_4945] + 31 < _4945 + return_data.size
                        _5041 = mem[_4945 + mem[_4945]]
                        if mem[_4945 + mem[_4945]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4945 + mem[_4945]]) + 1 < 0 or _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1
                        mem[_4945 + ceil32(return_data.size)] = _5041
                        require _4993 + (32 * _5041) + 32 <= return_data.size
                        mem[_4945 + ceil32(return_data.size) + 32 len ceil32(32 * _5041)] = mem[_4945 + _4993 + 32 len ceil32(32 * _5041)]
                        if 1 >= _5041:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4945 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3569 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3569]:
                                revert with 0, 50
                            mem[_3569 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3569]:
                                revert with 0, 50
                            mem[_3569 + 64] = token0Address
                            mem[_3569 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3569 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3569 + 132] = 0
                            mem[_3569 + 164] = 160
                            mem[_3569 + 260] = mem[_3569]
                            idx = 0
                            s = _3569 + 32
                            t = _3569 + 292
                            while idx < mem[_3569]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3569 + 196] = this.address
                            mem[_3569 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3569 + (32 * mem[_3569]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4944 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4992 = mem[_4944]
                            require mem[_4944] <= test266151307()
                            require _4944 + mem[_4944] + 31 < _4944 + return_data.size
                            _5040 = mem[_4944 + mem[_4944]]
                            if mem[_4944 + mem[_4944]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4944 + mem[_4944]]) + 1 < 0 or _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1
                            mem[_4944 + ceil32(return_data.size)] = _5040
                            require _4992 + (32 * _5040) + 32 <= return_data.size
                            mem[_4944 + ceil32(return_data.size) + 32 len ceil32(32 * _5040)] = mem[_4944 + _4992 + 32 len ceil32(32 * _5040)]
                            if 1 >= _5040:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4944 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3567 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3567]:
                                revert with 0, 50
                            mem[_3567 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3567]:
                                revert with 0, 50
                            mem[_3567 + 64] = token0Address
                            mem[_3567 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3567 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3567 + 132] = 0
                            mem[_3567 + 164] = 160
                            mem[_3567 + 260] = mem[_3567]
                            idx = 0
                            s = _3567 + 32
                            t = _3567 + 292
                            while idx < mem[_3567]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3567 + 196] = this.address
                            mem[_3567 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3567 + (32 * mem[_3567]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4943 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4991 = mem[_4943]
                            require mem[_4943] <= test266151307()
                            require _4943 + mem[_4943] + 31 < _4943 + return_data.size
                            _5039 = mem[_4943 + mem[_4943]]
                            if mem[_4943 + mem[_4943]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4943 + mem[_4943]]) + 1 < 0 or _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1
                            mem[_4943 + ceil32(return_data.size)] = _5039
                            require _4991 + (32 * _5039) + 32 <= return_data.size
                            mem[_4943 + ceil32(return_data.size) + 32 len ceil32(32 * _5039)] = mem[_4943 + _4991 + 32 len ceil32(32 * _5039)]
                            if 1 >= _5039:
                                revert with 0, 50
                            _6015 = mem[_4943 + ceil32(return_data.size) + 64]
                            _6159 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 64] = token1Address
                            mem[_6159 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6159 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6159 + 132] = 0
                            mem[_6159 + 164] = 160
                            mem[_6159 + 260] = mem[_6159]
                            idx = 0
                            s = _6159 + 32
                            t = _6159 + 292
                            while idx < mem[_6159]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6159 + 196] = this.address
                            mem[_6159 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6159 + (32 * mem[_6159]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6735 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6751 = mem[_6735]
                            require mem[_6735] <= test266151307()
                            require _6735 + mem[_6735] + 31 < _6735 + return_data.size
                            _6767 = mem[_6735 + mem[_6735]]
                            if mem[_6735 + mem[_6735]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6735 + mem[_6735]]) + 1 < 0 or _6735 + ceil32(return_data.size) + ceil32(32 * mem[_6735 + mem[_6735]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6735 + ceil32(return_data.size) + ceil32(32 * mem[_6735 + mem[_6735]]) + 1
                            mem[_6735 + ceil32(return_data.size)] = _6767
                            require _6751 + (32 * _6767) + 32 <= return_data.size
                            mem[_6735 + ceil32(return_data.size) + 32 len ceil32(32 * _6767)] = mem[_6735 + _6751 + 32 len ceil32(32 * _6767)]
                            if 1 >= _6767:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6015, mem[_6735 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3327 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3327] = return_data.size
                    mem[_3327 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3537 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 64] = token1Address
                        mem[_3537 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3537 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3537 + 132] = 0
                        mem[_3537 + 164] = 160
                        mem[_3537 + 260] = mem[_3537]
                        idx = 0
                        s = _3537 + 32
                        t = _3537 + 292
                        while idx < mem[_3537]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3537 + 196] = this.address
                        mem[_3537 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3537 + (32 * mem[_3537]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4948 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4996 = mem[_4948]
                        require mem[_4948] <= test266151307()
                        require _4948 + mem[_4948] + 31 < _4948 + return_data.size
                        _5044 = mem[_4948 + mem[_4948]]
                        if mem[_4948 + mem[_4948]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4948 + mem[_4948]]) + 1 < 0 or _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1
                        mem[_4948 + ceil32(return_data.size)] = _5044
                        require _4996 + (32 * _5044) + 32 <= return_data.size
                        mem[_4948 + ceil32(return_data.size) + 32 len ceil32(32 * _5044)] = mem[_4948 + _4996 + 32 len ceil32(32 * _5044)]
                        if 1 >= _5044:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4948 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3574 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3574]:
                                revert with 0, 50
                            mem[_3574 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3574]:
                                revert with 0, 50
                            mem[_3574 + 64] = token0Address
                            mem[_3574 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3574 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3574 + 132] = 0
                            mem[_3574 + 164] = 160
                            mem[_3574 + 260] = mem[_3574]
                            idx = 0
                            s = _3574 + 32
                            t = _3574 + 292
                            while idx < mem[_3574]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3574 + 196] = this.address
                            mem[_3574 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3574 + (32 * mem[_3574]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4947 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4995 = mem[_4947]
                            require mem[_4947] <= test266151307()
                            require _4947 + mem[_4947] + 31 < _4947 + return_data.size
                            _5043 = mem[_4947 + mem[_4947]]
                            if mem[_4947 + mem[_4947]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4947 + mem[_4947]]) + 1 < 0 or _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1
                            mem[_4947 + ceil32(return_data.size)] = _5043
                            require _4995 + (32 * _5043) + 32 <= return_data.size
                            mem[_4947 + ceil32(return_data.size) + 32 len ceil32(32 * _5043)] = mem[_4947 + _4995 + 32 len ceil32(32 * _5043)]
                            if 1 >= _5043:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4947 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3572 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3572]:
                                revert with 0, 50
                            mem[_3572 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3572]:
                                revert with 0, 50
                            mem[_3572 + 64] = token0Address
                            mem[_3572 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3572 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3572 + 132] = 0
                            mem[_3572 + 164] = 160
                            mem[_3572 + 260] = mem[_3572]
                            idx = 0
                            s = _3572 + 32
                            t = _3572 + 292
                            while idx < mem[_3572]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3572 + 196] = this.address
                            mem[_3572 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3572 + (32 * mem[_3572]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4946 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4994 = mem[_4946]
                            require mem[_4946] <= test266151307()
                            require _4946 + mem[_4946] + 31 < _4946 + return_data.size
                            _5042 = mem[_4946 + mem[_4946]]
                            if mem[_4946 + mem[_4946]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4946 + mem[_4946]]) + 1 < 0 or _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1
                            mem[_4946 + ceil32(return_data.size)] = _5042
                            require _4994 + (32 * _5042) + 32 <= return_data.size
                            mem[_4946 + ceil32(return_data.size) + 32 len ceil32(32 * _5042)] = mem[_4946 + _4994 + 32 len ceil32(32 * _5042)]
                            if 1 >= _5042:
                                revert with 0, 50
                            _6018 = mem[_4946 + ceil32(return_data.size) + 64]
                            _6161 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 64] = token1Address
                            mem[_6161 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6161 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6161 + 132] = 0
                            mem[_6161 + 164] = 160
                            mem[_6161 + 260] = mem[_6161]
                            idx = 0
                            s = _6161 + 32
                            t = _6161 + 292
                            while idx < mem[_6161]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6161 + 196] = this.address
                            mem[_6161 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6161 + (32 * mem[_6161]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6736 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6752 = mem[_6736]
                            require mem[_6736] <= test266151307()
                            require _6736 + mem[_6736] + 31 < _6736 + return_data.size
                            _6768 = mem[_6736 + mem[_6736]]
                            if mem[_6736 + mem[_6736]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6736 + mem[_6736]]) + 1 < 0 or _6736 + ceil32(return_data.size) + ceil32(32 * mem[_6736 + mem[_6736]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6736 + ceil32(return_data.size) + ceil32(32 * mem[_6736 + mem[_6736]]) + 1
                            mem[_6736 + ceil32(return_data.size)] = _6768
                            require _6752 + (32 * _6768) + 32 <= return_data.size
                            mem[_6736 + ceil32(return_data.size) + 32 len ceil32(32 * _6768)] = mem[_6736 + _6752 + 32 len ceil32(32 * _6768)]
                            if 1 >= _6768:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6018, mem[_6736 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3307 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3307] = return_data.size
                mem[_3307 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3539 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 64] = token1Address
                        mem[_3539 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3539 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3539 + 132] = 0
                        mem[_3539 + 164] = 160
                        mem[_3539 + 260] = mem[_3539]
                        idx = 0
                        s = _3539 + 32
                        t = _3539 + 292
                        while idx < mem[_3539]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3539 + 196] = this.address
                        mem[_3539 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3539 + (32 * mem[_3539]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4951 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4999 = mem[_4951]
                        require mem[_4951] <= test266151307()
                        require _4951 + mem[_4951] + 31 < _4951 + return_data.size
                        _5047 = mem[_4951 + mem[_4951]]
                        if mem[_4951 + mem[_4951]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4951 + mem[_4951]]) + 1 < 0 or _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1
                        mem[_4951 + ceil32(return_data.size)] = _5047
                        require _4999 + (32 * _5047) + 32 <= return_data.size
                        mem[_4951 + ceil32(return_data.size) + 32 len ceil32(32 * _5047)] = mem[_4951 + _4999 + 32 len ceil32(32 * _5047)]
                        if 1 >= _5047:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4951 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3579 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3579]:
                                revert with 0, 50
                            mem[_3579 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3579]:
                                revert with 0, 50
                            mem[_3579 + 64] = token0Address
                            mem[_3579 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3579 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3579 + 132] = 0
                            mem[_3579 + 164] = 160
                            mem[_3579 + 260] = mem[_3579]
                            idx = 0
                            s = _3579 + 32
                            t = _3579 + 292
                            while idx < mem[_3579]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3579 + 196] = this.address
                            mem[_3579 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3579 + (32 * mem[_3579]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4950 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4998 = mem[_4950]
                            require mem[_4950] <= test266151307()
                            require _4950 + mem[_4950] + 31 < _4950 + return_data.size
                            _5046 = mem[_4950 + mem[_4950]]
                            if mem[_4950 + mem[_4950]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4950 + mem[_4950]]) + 1 < 0 or _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1
                            mem[_4950 + ceil32(return_data.size)] = _5046
                            require _4998 + (32 * _5046) + 32 <= return_data.size
                            mem[_4950 + ceil32(return_data.size) + 32 len ceil32(32 * _5046)] = mem[_4950 + _4998 + 32 len ceil32(32 * _5046)]
                            if 1 >= _5046:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4950 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3577 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3577]:
                                revert with 0, 50
                            mem[_3577 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3577]:
                                revert with 0, 50
                            mem[_3577 + 64] = token0Address
                            mem[_3577 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3577 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3577 + 132] = 0
                            mem[_3577 + 164] = 160
                            mem[_3577 + 260] = mem[_3577]
                            idx = 0
                            s = _3577 + 32
                            t = _3577 + 292
                            while idx < mem[_3577]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3577 + 196] = this.address
                            mem[_3577 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3577 + (32 * mem[_3577]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4949 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4997 = mem[_4949]
                            require mem[_4949] <= test266151307()
                            require _4949 + mem[_4949] + 31 < _4949 + return_data.size
                            _5045 = mem[_4949 + mem[_4949]]
                            if mem[_4949 + mem[_4949]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4949 + mem[_4949]]) + 1 < 0 or _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1
                            mem[_4949 + ceil32(return_data.size)] = _5045
                            require _4997 + (32 * _5045) + 32 <= return_data.size
                            mem[_4949 + ceil32(return_data.size) + 32 len ceil32(32 * _5045)] = mem[_4949 + _4997 + 32 len ceil32(32 * _5045)]
                            if 1 >= _5045:
                                revert with 0, 50
                            _6021 = mem[_4949 + ceil32(return_data.size) + 64]
                            _6163 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 64] = token1Address
                            mem[_6163 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6163 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6163 + 132] = 0
                            mem[_6163 + 164] = 160
                            mem[_6163 + 260] = mem[_6163]
                            idx = 0
                            s = _6163 + 32
                            t = _6163 + 292
                            while idx < mem[_6163]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6163 + 196] = this.address
                            mem[_6163 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6163 + (32 * mem[_6163]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6737 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6753 = mem[_6737]
                            require mem[_6737] <= test266151307()
                            require _6737 + mem[_6737] + 31 < _6737 + return_data.size
                            _6769 = mem[_6737 + mem[_6737]]
                            if mem[_6737 + mem[_6737]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6737 + mem[_6737]]) + 1 < 0 or _6737 + ceil32(return_data.size) + ceil32(32 * mem[_6737 + mem[_6737]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6737 + ceil32(return_data.size) + ceil32(32 * mem[_6737 + mem[_6737]]) + 1
                            mem[_6737 + ceil32(return_data.size)] = _6769
                            require _6753 + (32 * _6769) + 32 <= return_data.size
                            mem[_6737 + ceil32(return_data.size) + 32 len ceil32(32 * _6769)] = mem[_6737 + _6753 + 32 len ceil32(32 * _6769)]
                            if 1 >= _6769:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6021, mem[_6737 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3329 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3329] = return_data.size
                    mem[_3329 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3541 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 64] = token1Address
                        mem[_3541 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3541 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3541 + 132] = 0
                        mem[_3541 + 164] = 160
                        mem[_3541 + 260] = mem[_3541]
                        idx = 0
                        s = _3541 + 32
                        t = _3541 + 292
                        while idx < mem[_3541]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3541 + 196] = this.address
                        mem[_3541 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3541 + (32 * mem[_3541]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4954 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5002 = mem[_4954]
                        require mem[_4954] <= test266151307()
                        require _4954 + mem[_4954] + 31 < _4954 + return_data.size
                        _5050 = mem[_4954 + mem[_4954]]
                        if mem[_4954 + mem[_4954]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4954 + mem[_4954]]) + 1 < 0 or _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1
                        mem[_4954 + ceil32(return_data.size)] = _5050
                        require _5002 + (32 * _5050) + 32 <= return_data.size
                        mem[_4954 + ceil32(return_data.size) + 32 len ceil32(32 * _5050)] = mem[_4954 + _5002 + 32 len ceil32(32 * _5050)]
                        if 1 >= _5050:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4954 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3584 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3584]:
                                revert with 0, 50
                            mem[_3584 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3584]:
                                revert with 0, 50
                            mem[_3584 + 64] = token0Address
                            mem[_3584 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3584 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3584 + 132] = 0
                            mem[_3584 + 164] = 160
                            mem[_3584 + 260] = mem[_3584]
                            idx = 0
                            s = _3584 + 32
                            t = _3584 + 292
                            while idx < mem[_3584]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3584 + 196] = this.address
                            mem[_3584 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3584 + (32 * mem[_3584]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4953 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5001 = mem[_4953]
                            require mem[_4953] <= test266151307()
                            require _4953 + mem[_4953] + 31 < _4953 + return_data.size
                            _5049 = mem[_4953 + mem[_4953]]
                            if mem[_4953 + mem[_4953]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4953 + mem[_4953]]) + 1 < 0 or _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1
                            mem[_4953 + ceil32(return_data.size)] = _5049
                            require _5001 + (32 * _5049) + 32 <= return_data.size
                            mem[_4953 + ceil32(return_data.size) + 32 len ceil32(32 * _5049)] = mem[_4953 + _5001 + 32 len ceil32(32 * _5049)]
                            if 1 >= _5049:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4953 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3582 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3582]:
                                revert with 0, 50
                            mem[_3582 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3582]:
                                revert with 0, 50
                            mem[_3582 + 64] = token0Address
                            mem[_3582 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3582 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3582 + 132] = 0
                            mem[_3582 + 164] = 160
                            mem[_3582 + 260] = mem[_3582]
                            idx = 0
                            s = _3582 + 32
                            t = _3582 + 292
                            while idx < mem[_3582]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3582 + 196] = this.address
                            mem[_3582 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3582 + (32 * mem[_3582]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4952 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5000 = mem[_4952]
                            require mem[_4952] <= test266151307()
                            require _4952 + mem[_4952] + 31 < _4952 + return_data.size
                            _5048 = mem[_4952 + mem[_4952]]
                            if mem[_4952 + mem[_4952]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4952 + mem[_4952]]) + 1 < 0 or _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1
                            mem[_4952 + ceil32(return_data.size)] = _5048
                            require _5000 + (32 * _5048) + 32 <= return_data.size
                            mem[_4952 + ceil32(return_data.size) + 32 len ceil32(32 * _5048)] = mem[_4952 + _5000 + 32 len ceil32(32 * _5048)]
                            if 1 >= _5048:
                                revert with 0, 50
                            _6024 = mem[_4952 + ceil32(return_data.size) + 64]
                            _6165 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 64] = token1Address
                            mem[_6165 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6165 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6165 + 132] = 0
                            mem[_6165 + 164] = 160
                            mem[_6165 + 260] = mem[_6165]
                            idx = 0
                            s = _6165 + 32
                            t = _6165 + 292
                            while idx < mem[_6165]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6165 + 196] = this.address
                            mem[_6165 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6165 + (32 * mem[_6165]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6738 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6754 = mem[_6738]
                            require mem[_6738] <= test266151307()
                            require _6738 + mem[_6738] + 31 < _6738 + return_data.size
                            _6770 = mem[_6738 + mem[_6738]]
                            if mem[_6738 + mem[_6738]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6738 + mem[_6738]]) + 1 < 0 or _6738 + ceil32(return_data.size) + ceil32(32 * mem[_6738 + mem[_6738]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6738 + ceil32(return_data.size) + ceil32(32 * mem[_6738 + mem[_6738]]) + 1
                            mem[_6738 + ceil32(return_data.size)] = _6770
                            require _6754 + (32 * _6770) + 32 <= return_data.size
                            mem[_6738 + ceil32(return_data.size) + 32 len ceil32(32 * _6770)] = mem[_6738 + _6754 + 32 len ceil32(32 * _6770)]
                            if 1 >= _6770:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6024, mem[_6738 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)));
    else:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
        if paused:
            revert with 0, 'Pausable: paused'
        if sub_abddf82e:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0x3d18b912 with:
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _28 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1694 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1698 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1694 + (32 * _1698) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1698)] = mem[(2 * ceil32(return_data.size)) + _1694 + 224 len ceil32(32 * _1698)]
            if 1 >= _1698:
                revert with 0, 50
            _3286 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3286 < (ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3559 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3559]:
                            revert with 0, 50
                        mem[_3559 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3559]:
                            revert with 0, 50
                        mem[_3559 + 64] = token1Address
                        mem[_3559 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3559 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3559 + 132] = 0
                        mem[_3559 + 164] = 160
                        mem[_3559 + 260] = mem[_3559]
                        idx = 0
                        s = _3559 + 32
                        t = _3559 + 292
                        while idx < mem[_3559]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3559 + 196] = this.address
                        mem[_3559 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3559 + (32 * mem[_3559]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4981 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5029 = mem[_4981]
                        require mem[_4981] <= test266151307()
                        require _4981 + mem[_4981] + 31 < _4981 + return_data.size
                        _5077 = mem[_4981 + mem[_4981]]
                        if mem[_4981 + mem[_4981]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4981 + mem[_4981]]) + 1 < 0 or _4981 + ceil32(return_data.size) + ceil32(32 * mem[_4981 + mem[_4981]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4981 + ceil32(return_data.size) + ceil32(32 * mem[_4981 + mem[_4981]]) + 1
                        mem[_4981 + ceil32(return_data.size)] = _5077
                        require _5029 + (32 * _5077) + 32 <= return_data.size
                        mem[_4981 + ceil32(return_data.size) + 32 len ceil32(32 * _5077)] = mem[_4981 + _5029 + 32 len ceil32(32 * _5077)]
                        if 1 >= _5077:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4981 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3629 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3629]:
                                revert with 0, 50
                            mem[_3629 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3629]:
                                revert with 0, 50
                            mem[_3629 + 64] = token0Address
                            mem[_3629 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3629 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3629 + 132] = 0
                            mem[_3629 + 164] = 160
                            mem[_3629 + 260] = mem[_3629]
                            idx = 0
                            s = _3629 + 32
                            t = _3629 + 292
                            while idx < mem[_3629]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3629 + 196] = this.address
                            mem[_3629 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3629 + (32 * mem[_3629]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4980 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5028 = mem[_4980]
                            require mem[_4980] <= test266151307()
                            require _4980 + mem[_4980] + 31 < _4980 + return_data.size
                            _5076 = mem[_4980 + mem[_4980]]
                            if mem[_4980 + mem[_4980]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4980 + mem[_4980]]) + 1 < 0 or _4980 + ceil32(return_data.size) + ceil32(32 * mem[_4980 + mem[_4980]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4980 + ceil32(return_data.size) + ceil32(32 * mem[_4980 + mem[_4980]]) + 1
                            mem[_4980 + ceil32(return_data.size)] = _5076
                            require _5028 + (32 * _5076) + 32 <= return_data.size
                            mem[_4980 + ceil32(return_data.size) + 32 len ceil32(32 * _5076)] = mem[_4980 + _5028 + 32 len ceil32(32 * _5076)]
                            if 1 >= _5076:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4980 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3627 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3627]:
                                revert with 0, 50
                            mem[_3627 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3627]:
                                revert with 0, 50
                            mem[_3627 + 64] = token0Address
                            mem[_3627 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3627 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3627 + 132] = 0
                            mem[_3627 + 164] = 160
                            mem[_3627 + 260] = mem[_3627]
                            idx = 0
                            s = _3627 + 32
                            t = _3627 + 292
                            while idx < mem[_3627]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3627 + 196] = this.address
                            mem[_3627 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3627 + (32 * mem[_3627]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4979 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5027 = mem[_4979]
                            require mem[_4979] <= test266151307()
                            require _4979 + mem[_4979] + 31 < _4979 + return_data.size
                            _5075 = mem[_4979 + mem[_4979]]
                            if mem[_4979 + mem[_4979]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4979 + mem[_4979]]) + 1 < 0 or _4979 + ceil32(return_data.size) + ceil32(32 * mem[_4979 + mem[_4979]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4979 + ceil32(return_data.size) + ceil32(32 * mem[_4979 + mem[_4979]]) + 1
                            mem[_4979 + ceil32(return_data.size)] = _5075
                            require _5027 + (32 * _5075) + 32 <= return_data.size
                            mem[_4979 + ceil32(return_data.size) + 32 len ceil32(32 * _5075)] = mem[_4979 + _5027 + 32 len ceil32(32 * _5075)]
                            if 1 >= _5075:
                                revert with 0, 50
                            _6051 = mem[_4979 + ceil32(return_data.size) + 64]
                            _6183 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6183]:
                                revert with 0, 50
                            mem[_6183 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6183]:
                                revert with 0, 50
                            mem[_6183 + 64] = token1Address
                            mem[_6183 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6183 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6183 + 132] = 0
                            mem[_6183 + 164] = 160
                            mem[_6183 + 260] = mem[_6183]
                            idx = 0
                            s = _6183 + 32
                            t = _6183 + 292
                            while idx < mem[_6183]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6183 + 196] = this.address
                            mem[_6183 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6183 + (32 * mem[_6183]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6747 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6763 = mem[_6747]
                            require mem[_6747] <= test266151307()
                            require _6747 + mem[_6747] + 31 < _6747 + return_data.size
                            _6779 = mem[_6747 + mem[_6747]]
                            if mem[_6747 + mem[_6747]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6747 + mem[_6747]]) + 1 < 0 or _6747 + ceil32(return_data.size) + ceil32(32 * mem[_6747 + mem[_6747]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6747 + ceil32(return_data.size) + ceil32(32 * mem[_6747 + mem[_6747]]) + 1
                            mem[_6747 + ceil32(return_data.size)] = _6779
                            require _6763 + (32 * _6779) + 32 <= return_data.size
                            mem[_6747 + ceil32(return_data.size) + 32 len ceil32(32 * _6779)] = mem[_6747 + _6763 + 32 len ceil32(32 * _6779)]
                            if 1 >= _6779:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6051, mem[_6747 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3339 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3339] = return_data.size
                    mem[_3339 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3561 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3561]:
                            revert with 0, 50
                        mem[_3561 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3561]:
                            revert with 0, 50
                        mem[_3561 + 64] = token1Address
                        mem[_3561 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3561 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3561 + 132] = 0
                        mem[_3561 + 164] = 160
                        mem[_3561 + 260] = mem[_3561]
                        idx = 0
                        s = _3561 + 32
                        t = _3561 + 292
                        while idx < mem[_3561]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3561 + 196] = this.address
                        mem[_3561 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3561 + (32 * mem[_3561]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4984 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5032 = mem[_4984]
                        require mem[_4984] <= test266151307()
                        require _4984 + mem[_4984] + 31 < _4984 + return_data.size
                        _5080 = mem[_4984 + mem[_4984]]
                        if mem[_4984 + mem[_4984]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4984 + mem[_4984]]) + 1 < 0 or _4984 + ceil32(return_data.size) + ceil32(32 * mem[_4984 + mem[_4984]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4984 + ceil32(return_data.size) + ceil32(32 * mem[_4984 + mem[_4984]]) + 1
                        mem[_4984 + ceil32(return_data.size)] = _5080
                        require _5032 + (32 * _5080) + 32 <= return_data.size
                        mem[_4984 + ceil32(return_data.size) + 32 len ceil32(32 * _5080)] = mem[_4984 + _5032 + 32 len ceil32(32 * _5080)]
                        if 1 >= _5080:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4984 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3634 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3634]:
                                revert with 0, 50
                            mem[_3634 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3634]:
                                revert with 0, 50
                            mem[_3634 + 64] = token0Address
                            mem[_3634 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3634 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3634 + 132] = 0
                            mem[_3634 + 164] = 160
                            mem[_3634 + 260] = mem[_3634]
                            idx = 0
                            s = _3634 + 32
                            t = _3634 + 292
                            while idx < mem[_3634]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3634 + 196] = this.address
                            mem[_3634 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3634 + (32 * mem[_3634]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4983 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5031 = mem[_4983]
                            require mem[_4983] <= test266151307()
                            require _4983 + mem[_4983] + 31 < _4983 + return_data.size
                            _5079 = mem[_4983 + mem[_4983]]
                            if mem[_4983 + mem[_4983]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4983 + mem[_4983]]) + 1 < 0 or _4983 + ceil32(return_data.size) + ceil32(32 * mem[_4983 + mem[_4983]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4983 + ceil32(return_data.size) + ceil32(32 * mem[_4983 + mem[_4983]]) + 1
                            mem[_4983 + ceil32(return_data.size)] = _5079
                            require _5031 + (32 * _5079) + 32 <= return_data.size
                            mem[_4983 + ceil32(return_data.size) + 32 len ceil32(32 * _5079)] = mem[_4983 + _5031 + 32 len ceil32(32 * _5079)]
                            if 1 >= _5079:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4983 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3632 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3632]:
                                revert with 0, 50
                            mem[_3632 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3632]:
                                revert with 0, 50
                            mem[_3632 + 64] = token0Address
                            mem[_3632 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3632 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3632 + 132] = 0
                            mem[_3632 + 164] = 160
                            mem[_3632 + 260] = mem[_3632]
                            idx = 0
                            s = _3632 + 32
                            t = _3632 + 292
                            while idx < mem[_3632]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3632 + 196] = this.address
                            mem[_3632 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3632 + (32 * mem[_3632]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4982 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5030 = mem[_4982]
                            require mem[_4982] <= test266151307()
                            require _4982 + mem[_4982] + 31 < _4982 + return_data.size
                            _5078 = mem[_4982 + mem[_4982]]
                            if mem[_4982 + mem[_4982]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4982 + mem[_4982]]) + 1 < 0 or _4982 + ceil32(return_data.size) + ceil32(32 * mem[_4982 + mem[_4982]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4982 + ceil32(return_data.size) + ceil32(32 * mem[_4982 + mem[_4982]]) + 1
                            mem[_4982 + ceil32(return_data.size)] = _5078
                            require _5030 + (32 * _5078) + 32 <= return_data.size
                            mem[_4982 + ceil32(return_data.size) + 32 len ceil32(32 * _5078)] = mem[_4982 + _5030 + 32 len ceil32(32 * _5078)]
                            if 1 >= _5078:
                                revert with 0, 50
                            _6054 = mem[_4982 + ceil32(return_data.size) + 64]
                            _6185 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6185]:
                                revert with 0, 50
                            mem[_6185 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6185]:
                                revert with 0, 50
                            mem[_6185 + 64] = token1Address
                            mem[_6185 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6185 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6185 + 132] = 0
                            mem[_6185 + 164] = 160
                            mem[_6185 + 260] = mem[_6185]
                            idx = 0
                            s = _6185 + 32
                            t = _6185 + 292
                            while idx < mem[_6185]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6185 + 196] = this.address
                            mem[_6185 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6185 + (32 * mem[_6185]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6748 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6764 = mem[_6748]
                            require mem[_6748] <= test266151307()
                            require _6748 + mem[_6748] + 31 < _6748 + return_data.size
                            _6780 = mem[_6748 + mem[_6748]]
                            if mem[_6748 + mem[_6748]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6748 + mem[_6748]]) + 1 < 0 or _6748 + ceil32(return_data.size) + ceil32(32 * mem[_6748 + mem[_6748]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6748 + ceil32(return_data.size) + ceil32(32 * mem[_6748 + mem[_6748]]) + 1
                            mem[_6748 + ceil32(return_data.size)] = _6780
                            require _6764 + (32 * _6780) + 32 <= return_data.size
                            mem[_6748 + ceil32(return_data.size) + 32 len ceil32(32 * _6780)] = mem[_6748 + _6764 + 32 len ceil32(32 * _6780)]
                            if 1 >= _6780:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6054, mem[_6748 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3310 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3310] = return_data.size
                mem[_3310 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3563 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3563]:
                            revert with 0, 50
                        mem[_3563 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3563]:
                            revert with 0, 50
                        mem[_3563 + 64] = token1Address
                        mem[_3563 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3563 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3563 + 132] = 0
                        mem[_3563 + 164] = 160
                        mem[_3563 + 260] = mem[_3563]
                        idx = 0
                        s = _3563 + 32
                        t = _3563 + 292
                        while idx < mem[_3563]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3563 + 196] = this.address
                        mem[_3563 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3563 + (32 * mem[_3563]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4987 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5035 = mem[_4987]
                        require mem[_4987] <= test266151307()
                        require _4987 + mem[_4987] + 31 < _4987 + return_data.size
                        _5083 = mem[_4987 + mem[_4987]]
                        if mem[_4987 + mem[_4987]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4987 + mem[_4987]]) + 1 < 0 or _4987 + ceil32(return_data.size) + ceil32(32 * mem[_4987 + mem[_4987]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4987 + ceil32(return_data.size) + ceil32(32 * mem[_4987 + mem[_4987]]) + 1
                        mem[_4987 + ceil32(return_data.size)] = _5083
                        require _5035 + (32 * _5083) + 32 <= return_data.size
                        mem[_4987 + ceil32(return_data.size) + 32 len ceil32(32 * _5083)] = mem[_4987 + _5035 + 32 len ceil32(32 * _5083)]
                        if 1 >= _5083:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4987 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3639 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3639]:
                                revert with 0, 50
                            mem[_3639 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3639]:
                                revert with 0, 50
                            mem[_3639 + 64] = token0Address
                            mem[_3639 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3639 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3639 + 132] = 0
                            mem[_3639 + 164] = 160
                            mem[_3639 + 260] = mem[_3639]
                            idx = 0
                            s = _3639 + 32
                            t = _3639 + 292
                            while idx < mem[_3639]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3639 + 196] = this.address
                            mem[_3639 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3639 + (32 * mem[_3639]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4986 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5034 = mem[_4986]
                            require mem[_4986] <= test266151307()
                            require _4986 + mem[_4986] + 31 < _4986 + return_data.size
                            _5082 = mem[_4986 + mem[_4986]]
                            if mem[_4986 + mem[_4986]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4986 + mem[_4986]]) + 1 < 0 or _4986 + ceil32(return_data.size) + ceil32(32 * mem[_4986 + mem[_4986]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4986 + ceil32(return_data.size) + ceil32(32 * mem[_4986 + mem[_4986]]) + 1
                            mem[_4986 + ceil32(return_data.size)] = _5082
                            require _5034 + (32 * _5082) + 32 <= return_data.size
                            mem[_4986 + ceil32(return_data.size) + 32 len ceil32(32 * _5082)] = mem[_4986 + _5034 + 32 len ceil32(32 * _5082)]
                            if 1 >= _5082:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4986 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3637 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3637]:
                                revert with 0, 50
                            mem[_3637 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3637]:
                                revert with 0, 50
                            mem[_3637 + 64] = token0Address
                            mem[_3637 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3637 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3637 + 132] = 0
                            mem[_3637 + 164] = 160
                            mem[_3637 + 260] = mem[_3637]
                            idx = 0
                            s = _3637 + 32
                            t = _3637 + 292
                            while idx < mem[_3637]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3637 + 196] = this.address
                            mem[_3637 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3637 + (32 * mem[_3637]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4985 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5033 = mem[_4985]
                            require mem[_4985] <= test266151307()
                            require _4985 + mem[_4985] + 31 < _4985 + return_data.size
                            _5081 = mem[_4985 + mem[_4985]]
                            if mem[_4985 + mem[_4985]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4985 + mem[_4985]]) + 1 < 0 or _4985 + ceil32(return_data.size) + ceil32(32 * mem[_4985 + mem[_4985]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4985 + ceil32(return_data.size) + ceil32(32 * mem[_4985 + mem[_4985]]) + 1
                            mem[_4985 + ceil32(return_data.size)] = _5081
                            require _5033 + (32 * _5081) + 32 <= return_data.size
                            mem[_4985 + ceil32(return_data.size) + 32 len ceil32(32 * _5081)] = mem[_4985 + _5033 + 32 len ceil32(32 * _5081)]
                            if 1 >= _5081:
                                revert with 0, 50
                            _6057 = mem[_4985 + ceil32(return_data.size) + 64]
                            _6187 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6187]:
                                revert with 0, 50
                            mem[_6187 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6187]:
                                revert with 0, 50
                            mem[_6187 + 64] = token1Address
                            mem[_6187 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6187 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6187 + 132] = 0
                            mem[_6187 + 164] = 160
                            mem[_6187 + 260] = mem[_6187]
                            idx = 0
                            s = _6187 + 32
                            t = _6187 + 292
                            while idx < mem[_6187]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6187 + 196] = this.address
                            mem[_6187 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6187 + (32 * mem[_6187]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6749 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6765 = mem[_6749]
                            require mem[_6749] <= test266151307()
                            require _6749 + mem[_6749] + 31 < _6749 + return_data.size
                            _6781 = mem[_6749 + mem[_6749]]
                            if mem[_6749 + mem[_6749]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6749 + mem[_6749]]) + 1 < 0 or _6749 + ceil32(return_data.size) + ceil32(32 * mem[_6749 + mem[_6749]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6749 + ceil32(return_data.size) + ceil32(32 * mem[_6749 + mem[_6749]]) + 1
                            mem[_6749 + ceil32(return_data.size)] = _6781
                            require _6765 + (32 * _6781) + 32 <= return_data.size
                            mem[_6749 + ceil32(return_data.size) + 32 len ceil32(32 * _6781)] = mem[_6749 + _6765 + 32 len ceil32(32 * _6781)]
                            if 1 >= _6781:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6057, mem[_6749 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3341 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3341] = return_data.size
                    mem[_3341 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3565 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3565]:
                            revert with 0, 50
                        mem[_3565 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3565]:
                            revert with 0, 50
                        mem[_3565 + 64] = token1Address
                        mem[_3565 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3565 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3565 + 132] = 0
                        mem[_3565 + 164] = 160
                        mem[_3565 + 260] = mem[_3565]
                        idx = 0
                        s = _3565 + 32
                        t = _3565 + 292
                        while idx < mem[_3565]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3565 + 196] = this.address
                        mem[_3565 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3565 + (32 * mem[_3565]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4990 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5038 = mem[_4990]
                        require mem[_4990] <= test266151307()
                        require _4990 + mem[_4990] + 31 < _4990 + return_data.size
                        _5086 = mem[_4990 + mem[_4990]]
                        if mem[_4990 + mem[_4990]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4990 + mem[_4990]]) + 1 < 0 or _4990 + ceil32(return_data.size) + ceil32(32 * mem[_4990 + mem[_4990]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4990 + ceil32(return_data.size) + ceil32(32 * mem[_4990 + mem[_4990]]) + 1
                        mem[_4990 + ceil32(return_data.size)] = _5086
                        require _5038 + (32 * _5086) + 32 <= return_data.size
                        mem[_4990 + ceil32(return_data.size) + 32 len ceil32(32 * _5086)] = mem[_4990 + _5038 + 32 len ceil32(32 * _5086)]
                        if 1 >= _5086:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4990 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3644 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3644]:
                                revert with 0, 50
                            mem[_3644 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3644]:
                                revert with 0, 50
                            mem[_3644 + 64] = token0Address
                            mem[_3644 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3644 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3644 + 132] = 0
                            mem[_3644 + 164] = 160
                            mem[_3644 + 260] = mem[_3644]
                            idx = 0
                            s = _3644 + 32
                            t = _3644 + 292
                            while idx < mem[_3644]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3644 + 196] = this.address
                            mem[_3644 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3644 + (32 * mem[_3644]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4989 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5037 = mem[_4989]
                            require mem[_4989] <= test266151307()
                            require _4989 + mem[_4989] + 31 < _4989 + return_data.size
                            _5085 = mem[_4989 + mem[_4989]]
                            if mem[_4989 + mem[_4989]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4989 + mem[_4989]]) + 1 < 0 or _4989 + ceil32(return_data.size) + ceil32(32 * mem[_4989 + mem[_4989]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4989 + ceil32(return_data.size) + ceil32(32 * mem[_4989 + mem[_4989]]) + 1
                            mem[_4989 + ceil32(return_data.size)] = _5085
                            require _5037 + (32 * _5085) + 32 <= return_data.size
                            mem[_4989 + ceil32(return_data.size) + 32 len ceil32(32 * _5085)] = mem[_4989 + _5037 + 32 len ceil32(32 * _5085)]
                            if 1 >= _5085:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4989 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3642 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3642]:
                                revert with 0, 50
                            mem[_3642 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3642]:
                                revert with 0, 50
                            mem[_3642 + 64] = token0Address
                            mem[_3642 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3642 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3642 + 132] = 0
                            mem[_3642 + 164] = 160
                            mem[_3642 + 260] = mem[_3642]
                            idx = 0
                            s = _3642 + 32
                            t = _3642 + 292
                            while idx < mem[_3642]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3642 + 196] = this.address
                            mem[_3642 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3642 + (32 * mem[_3642]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4988 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5036 = mem[_4988]
                            require mem[_4988] <= test266151307()
                            require _4988 + mem[_4988] + 31 < _4988 + return_data.size
                            _5084 = mem[_4988 + mem[_4988]]
                            if mem[_4988 + mem[_4988]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4988 + mem[_4988]]) + 1 < 0 or _4988 + ceil32(return_data.size) + ceil32(32 * mem[_4988 + mem[_4988]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4988 + ceil32(return_data.size) + ceil32(32 * mem[_4988 + mem[_4988]]) + 1
                            mem[_4988 + ceil32(return_data.size)] = _5084
                            require _5036 + (32 * _5084) + 32 <= return_data.size
                            mem[_4988 + ceil32(return_data.size) + 32 len ceil32(32 * _5084)] = mem[_4988 + _5036 + 32 len ceil32(32 * _5084)]
                            if 1 >= _5084:
                                revert with 0, 50
                            _6060 = mem[_4988 + ceil32(return_data.size) + 64]
                            _6189 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6189]:
                                revert with 0, 50
                            mem[_6189 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6189]:
                                revert with 0, 50
                            mem[_6189 + 64] = token1Address
                            mem[_6189 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6189 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6189 + 132] = 0
                            mem[_6189 + 164] = 160
                            mem[_6189 + 260] = mem[_6189]
                            idx = 0
                            s = _6189 + 32
                            t = _6189 + 292
                            while idx < mem[_6189]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6189 + 196] = this.address
                            mem[_6189 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6189 + (32 * mem[_6189]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6750 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6766 = mem[_6750]
                            require mem[_6750] <= test266151307()
                            require _6750 + mem[_6750] + 31 < _6750 + return_data.size
                            _6782 = mem[_6750 + mem[_6750]]
                            if mem[_6750 + mem[_6750]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6750 + mem[_6750]]) + 1 < 0 or _6750 + ceil32(return_data.size) + ceil32(32 * mem[_6750 + mem[_6750]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6750 + ceil32(return_data.size) + ceil32(32 * mem[_6750 + mem[_6750]]) + 1
                            mem[_6750 + ceil32(return_data.size)] = _6782
                            require _6766 + (32 * _6782) + 32 <= return_data.size
                            mem[_6750 + ceil32(return_data.size) + 32 len ceil32(32 * _6782)] = mem[_6750 + _6766 + 32 len ceil32(32 * _6782)]
                            if 1 >= _6782:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6060, mem[_6750 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)));
        else:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _24 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1693 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1697 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1693 + (32 * _1697) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1697)] = mem[(2 * ceil32(return_data.size)) + _1693 + 224 len ceil32(32 * _1697)]
            if 1 >= _1697:
                revert with 0, 50
            _3285 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3285 < (ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3551 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3551]:
                            revert with 0, 50
                        mem[_3551 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3551]:
                            revert with 0, 50
                        mem[_3551 + 64] = token1Address
                        mem[_3551 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3551 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3551 + 132] = 0
                        mem[_3551 + 164] = 160
                        mem[_3551 + 260] = mem[_3551]
                        idx = 0
                        s = _3551 + 32
                        t = _3551 + 292
                        while idx < mem[_3551]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3551 + 196] = this.address
                        mem[_3551 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3551 + (32 * mem[_3551]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4969 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5017 = mem[_4969]
                        require mem[_4969] <= test266151307()
                        require _4969 + mem[_4969] + 31 < _4969 + return_data.size
                        _5065 = mem[_4969 + mem[_4969]]
                        if mem[_4969 + mem[_4969]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4969 + mem[_4969]]) + 1 < 0 or _4969 + ceil32(return_data.size) + ceil32(32 * mem[_4969 + mem[_4969]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4969 + ceil32(return_data.size) + ceil32(32 * mem[_4969 + mem[_4969]]) + 1
                        mem[_4969 + ceil32(return_data.size)] = _5065
                        require _5017 + (32 * _5065) + 32 <= return_data.size
                        mem[_4969 + ceil32(return_data.size) + 32 len ceil32(32 * _5065)] = mem[_4969 + _5017 + 32 len ceil32(32 * _5065)]
                        if 1 >= _5065:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4969 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3609 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3609]:
                                revert with 0, 50
                            mem[_3609 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3609]:
                                revert with 0, 50
                            mem[_3609 + 64] = token0Address
                            mem[_3609 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3609 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3609 + 132] = 0
                            mem[_3609 + 164] = 160
                            mem[_3609 + 260] = mem[_3609]
                            idx = 0
                            s = _3609 + 32
                            t = _3609 + 292
                            while idx < mem[_3609]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3609 + 196] = this.address
                            mem[_3609 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3609 + (32 * mem[_3609]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4968 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5016 = mem[_4968]
                            require mem[_4968] <= test266151307()
                            require _4968 + mem[_4968] + 31 < _4968 + return_data.size
                            _5064 = mem[_4968 + mem[_4968]]
                            if mem[_4968 + mem[_4968]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4968 + mem[_4968]]) + 1 < 0 or _4968 + ceil32(return_data.size) + ceil32(32 * mem[_4968 + mem[_4968]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4968 + ceil32(return_data.size) + ceil32(32 * mem[_4968 + mem[_4968]]) + 1
                            mem[_4968 + ceil32(return_data.size)] = _5064
                            require _5016 + (32 * _5064) + 32 <= return_data.size
                            mem[_4968 + ceil32(return_data.size) + 32 len ceil32(32 * _5064)] = mem[_4968 + _5016 + 32 len ceil32(32 * _5064)]
                            if 1 >= _5064:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4968 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3607 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3607]:
                                revert with 0, 50
                            mem[_3607 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3607]:
                                revert with 0, 50
                            mem[_3607 + 64] = token0Address
                            mem[_3607 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3607 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3607 + 132] = 0
                            mem[_3607 + 164] = 160
                            mem[_3607 + 260] = mem[_3607]
                            idx = 0
                            s = _3607 + 32
                            t = _3607 + 292
                            while idx < mem[_3607]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3607 + 196] = this.address
                            mem[_3607 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3607 + (32 * mem[_3607]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4967 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5015 = mem[_4967]
                            require mem[_4967] <= test266151307()
                            require _4967 + mem[_4967] + 31 < _4967 + return_data.size
                            _5063 = mem[_4967 + mem[_4967]]
                            if mem[_4967 + mem[_4967]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4967 + mem[_4967]]) + 1 < 0 or _4967 + ceil32(return_data.size) + ceil32(32 * mem[_4967 + mem[_4967]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4967 + ceil32(return_data.size) + ceil32(32 * mem[_4967 + mem[_4967]]) + 1
                            mem[_4967 + ceil32(return_data.size)] = _5063
                            require _5015 + (32 * _5063) + 32 <= return_data.size
                            mem[_4967 + ceil32(return_data.size) + 32 len ceil32(32 * _5063)] = mem[_4967 + _5015 + 32 len ceil32(32 * _5063)]
                            if 1 >= _5063:
                                revert with 0, 50
                            _6039 = mem[_4967 + ceil32(return_data.size) + 64]
                            _6175 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6175]:
                                revert with 0, 50
                            mem[_6175 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6175]:
                                revert with 0, 50
                            mem[_6175 + 64] = token1Address
                            mem[_6175 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6175 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6175 + 132] = 0
                            mem[_6175 + 164] = 160
                            mem[_6175 + 260] = mem[_6175]
                            idx = 0
                            s = _6175 + 32
                            t = _6175 + 292
                            while idx < mem[_6175]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6175 + 196] = this.address
                            mem[_6175 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6175 + (32 * mem[_6175]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6743 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6759 = mem[_6743]
                            require mem[_6743] <= test266151307()
                            require _6743 + mem[_6743] + 31 < _6743 + return_data.size
                            _6775 = mem[_6743 + mem[_6743]]
                            if mem[_6743 + mem[_6743]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6743 + mem[_6743]]) + 1 < 0 or _6743 + ceil32(return_data.size) + ceil32(32 * mem[_6743 + mem[_6743]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6743 + ceil32(return_data.size) + ceil32(32 * mem[_6743 + mem[_6743]]) + 1
                            mem[_6743 + ceil32(return_data.size)] = _6775
                            require _6759 + (32 * _6775) + 32 <= return_data.size
                            mem[_6743 + ceil32(return_data.size) + 32 len ceil32(32 * _6775)] = mem[_6743 + _6759 + 32 len ceil32(32 * _6775)]
                            if 1 >= _6775:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6039, mem[_6743 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3335 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3335] = return_data.size
                    mem[_3335 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3553 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3553]:
                            revert with 0, 50
                        mem[_3553 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3553]:
                            revert with 0, 50
                        mem[_3553 + 64] = token1Address
                        mem[_3553 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3553 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3553 + 132] = 0
                        mem[_3553 + 164] = 160
                        mem[_3553 + 260] = mem[_3553]
                        idx = 0
                        s = _3553 + 32
                        t = _3553 + 292
                        while idx < mem[_3553]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3553 + 196] = this.address
                        mem[_3553 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3553 + (32 * mem[_3553]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4972 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5020 = mem[_4972]
                        require mem[_4972] <= test266151307()
                        require _4972 + mem[_4972] + 31 < _4972 + return_data.size
                        _5068 = mem[_4972 + mem[_4972]]
                        if mem[_4972 + mem[_4972]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4972 + mem[_4972]]) + 1 < 0 or _4972 + ceil32(return_data.size) + ceil32(32 * mem[_4972 + mem[_4972]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4972 + ceil32(return_data.size) + ceil32(32 * mem[_4972 + mem[_4972]]) + 1
                        mem[_4972 + ceil32(return_data.size)] = _5068
                        require _5020 + (32 * _5068) + 32 <= return_data.size
                        mem[_4972 + ceil32(return_data.size) + 32 len ceil32(32 * _5068)] = mem[_4972 + _5020 + 32 len ceil32(32 * _5068)]
                        if 1 >= _5068:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4972 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3614 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3614]:
                                revert with 0, 50
                            mem[_3614 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3614]:
                                revert with 0, 50
                            mem[_3614 + 64] = token0Address
                            mem[_3614 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3614 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3614 + 132] = 0
                            mem[_3614 + 164] = 160
                            mem[_3614 + 260] = mem[_3614]
                            idx = 0
                            s = _3614 + 32
                            t = _3614 + 292
                            while idx < mem[_3614]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3614 + 196] = this.address
                            mem[_3614 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3614 + (32 * mem[_3614]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4971 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5019 = mem[_4971]
                            require mem[_4971] <= test266151307()
                            require _4971 + mem[_4971] + 31 < _4971 + return_data.size
                            _5067 = mem[_4971 + mem[_4971]]
                            if mem[_4971 + mem[_4971]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4971 + mem[_4971]]) + 1 < 0 or _4971 + ceil32(return_data.size) + ceil32(32 * mem[_4971 + mem[_4971]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4971 + ceil32(return_data.size) + ceil32(32 * mem[_4971 + mem[_4971]]) + 1
                            mem[_4971 + ceil32(return_data.size)] = _5067
                            require _5019 + (32 * _5067) + 32 <= return_data.size
                            mem[_4971 + ceil32(return_data.size) + 32 len ceil32(32 * _5067)] = mem[_4971 + _5019 + 32 len ceil32(32 * _5067)]
                            if 1 >= _5067:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4971 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3612 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3612]:
                                revert with 0, 50
                            mem[_3612 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3612]:
                                revert with 0, 50
                            mem[_3612 + 64] = token0Address
                            mem[_3612 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3612 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3612 + 132] = 0
                            mem[_3612 + 164] = 160
                            mem[_3612 + 260] = mem[_3612]
                            idx = 0
                            s = _3612 + 32
                            t = _3612 + 292
                            while idx < mem[_3612]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3612 + 196] = this.address
                            mem[_3612 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3612 + (32 * mem[_3612]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4970 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5018 = mem[_4970]
                            require mem[_4970] <= test266151307()
                            require _4970 + mem[_4970] + 31 < _4970 + return_data.size
                            _5066 = mem[_4970 + mem[_4970]]
                            if mem[_4970 + mem[_4970]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4970 + mem[_4970]]) + 1 < 0 or _4970 + ceil32(return_data.size) + ceil32(32 * mem[_4970 + mem[_4970]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4970 + ceil32(return_data.size) + ceil32(32 * mem[_4970 + mem[_4970]]) + 1
                            mem[_4970 + ceil32(return_data.size)] = _5066
                            require _5018 + (32 * _5066) + 32 <= return_data.size
                            mem[_4970 + ceil32(return_data.size) + 32 len ceil32(32 * _5066)] = mem[_4970 + _5018 + 32 len ceil32(32 * _5066)]
                            if 1 >= _5066:
                                revert with 0, 50
                            _6042 = mem[_4970 + ceil32(return_data.size) + 64]
                            _6177 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6177]:
                                revert with 0, 50
                            mem[_6177 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6177]:
                                revert with 0, 50
                            mem[_6177 + 64] = token1Address
                            mem[_6177 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6177 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6177 + 132] = 0
                            mem[_6177 + 164] = 160
                            mem[_6177 + 260] = mem[_6177]
                            idx = 0
                            s = _6177 + 32
                            t = _6177 + 292
                            while idx < mem[_6177]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6177 + 196] = this.address
                            mem[_6177 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6177 + (32 * mem[_6177]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6744 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6760 = mem[_6744]
                            require mem[_6744] <= test266151307()
                            require _6744 + mem[_6744] + 31 < _6744 + return_data.size
                            _6776 = mem[_6744 + mem[_6744]]
                            if mem[_6744 + mem[_6744]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6744 + mem[_6744]]) + 1 < 0 or _6744 + ceil32(return_data.size) + ceil32(32 * mem[_6744 + mem[_6744]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6744 + ceil32(return_data.size) + ceil32(32 * mem[_6744 + mem[_6744]]) + 1
                            mem[_6744 + ceil32(return_data.size)] = _6776
                            require _6760 + (32 * _6776) + 32 <= return_data.size
                            mem[_6744 + ceil32(return_data.size) + 32 len ceil32(32 * _6776)] = mem[_6744 + _6760 + 32 len ceil32(32 * _6776)]
                            if 1 >= _6776:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6042, mem[_6744 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3309 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3309] = return_data.size
                mem[_3309 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3555 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3555]:
                            revert with 0, 50
                        mem[_3555 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3555]:
                            revert with 0, 50
                        mem[_3555 + 64] = token1Address
                        mem[_3555 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3555 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3555 + 132] = 0
                        mem[_3555 + 164] = 160
                        mem[_3555 + 260] = mem[_3555]
                        idx = 0
                        s = _3555 + 32
                        t = _3555 + 292
                        while idx < mem[_3555]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3555 + 196] = this.address
                        mem[_3555 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3555 + (32 * mem[_3555]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4975 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5023 = mem[_4975]
                        require mem[_4975] <= test266151307()
                        require _4975 + mem[_4975] + 31 < _4975 + return_data.size
                        _5071 = mem[_4975 + mem[_4975]]
                        if mem[_4975 + mem[_4975]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4975 + mem[_4975]]) + 1 < 0 or _4975 + ceil32(return_data.size) + ceil32(32 * mem[_4975 + mem[_4975]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4975 + ceil32(return_data.size) + ceil32(32 * mem[_4975 + mem[_4975]]) + 1
                        mem[_4975 + ceil32(return_data.size)] = _5071
                        require _5023 + (32 * _5071) + 32 <= return_data.size
                        mem[_4975 + ceil32(return_data.size) + 32 len ceil32(32 * _5071)] = mem[_4975 + _5023 + 32 len ceil32(32 * _5071)]
                        if 1 >= _5071:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4975 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3619 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3619]:
                                revert with 0, 50
                            mem[_3619 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3619]:
                                revert with 0, 50
                            mem[_3619 + 64] = token0Address
                            mem[_3619 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3619 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3619 + 132] = 0
                            mem[_3619 + 164] = 160
                            mem[_3619 + 260] = mem[_3619]
                            idx = 0
                            s = _3619 + 32
                            t = _3619 + 292
                            while idx < mem[_3619]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3619 + 196] = this.address
                            mem[_3619 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3619 + (32 * mem[_3619]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4974 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5022 = mem[_4974]
                            require mem[_4974] <= test266151307()
                            require _4974 + mem[_4974] + 31 < _4974 + return_data.size
                            _5070 = mem[_4974 + mem[_4974]]
                            if mem[_4974 + mem[_4974]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4974 + mem[_4974]]) + 1 < 0 or _4974 + ceil32(return_data.size) + ceil32(32 * mem[_4974 + mem[_4974]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4974 + ceil32(return_data.size) + ceil32(32 * mem[_4974 + mem[_4974]]) + 1
                            mem[_4974 + ceil32(return_data.size)] = _5070
                            require _5022 + (32 * _5070) + 32 <= return_data.size
                            mem[_4974 + ceil32(return_data.size) + 32 len ceil32(32 * _5070)] = mem[_4974 + _5022 + 32 len ceil32(32 * _5070)]
                            if 1 >= _5070:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4974 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3617 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3617]:
                                revert with 0, 50
                            mem[_3617 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3617]:
                                revert with 0, 50
                            mem[_3617 + 64] = token0Address
                            mem[_3617 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3617 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3617 + 132] = 0
                            mem[_3617 + 164] = 160
                            mem[_3617 + 260] = mem[_3617]
                            idx = 0
                            s = _3617 + 32
                            t = _3617 + 292
                            while idx < mem[_3617]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3617 + 196] = this.address
                            mem[_3617 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3617 + (32 * mem[_3617]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4973 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5021 = mem[_4973]
                            require mem[_4973] <= test266151307()
                            require _4973 + mem[_4973] + 31 < _4973 + return_data.size
                            _5069 = mem[_4973 + mem[_4973]]
                            if mem[_4973 + mem[_4973]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4973 + mem[_4973]]) + 1 < 0 or _4973 + ceil32(return_data.size) + ceil32(32 * mem[_4973 + mem[_4973]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4973 + ceil32(return_data.size) + ceil32(32 * mem[_4973 + mem[_4973]]) + 1
                            mem[_4973 + ceil32(return_data.size)] = _5069
                            require _5021 + (32 * _5069) + 32 <= return_data.size
                            mem[_4973 + ceil32(return_data.size) + 32 len ceil32(32 * _5069)] = mem[_4973 + _5021 + 32 len ceil32(32 * _5069)]
                            if 1 >= _5069:
                                revert with 0, 50
                            _6045 = mem[_4973 + ceil32(return_data.size) + 64]
                            _6179 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6179]:
                                revert with 0, 50
                            mem[_6179 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6179]:
                                revert with 0, 50
                            mem[_6179 + 64] = token1Address
                            mem[_6179 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6179 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6179 + 132] = 0
                            mem[_6179 + 164] = 160
                            mem[_6179 + 260] = mem[_6179]
                            idx = 0
                            s = _6179 + 32
                            t = _6179 + 292
                            while idx < mem[_6179]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6179 + 196] = this.address
                            mem[_6179 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6179 + (32 * mem[_6179]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6745 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6761 = mem[_6745]
                            require mem[_6745] <= test266151307()
                            require _6745 + mem[_6745] + 31 < _6745 + return_data.size
                            _6777 = mem[_6745 + mem[_6745]]
                            if mem[_6745 + mem[_6745]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6745 + mem[_6745]]) + 1 < 0 or _6745 + ceil32(return_data.size) + ceil32(32 * mem[_6745 + mem[_6745]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6745 + ceil32(return_data.size) + ceil32(32 * mem[_6745 + mem[_6745]]) + 1
                            mem[_6745 + ceil32(return_data.size)] = _6777
                            require _6761 + (32 * _6777) + 32 <= return_data.size
                            mem[_6745 + ceil32(return_data.size) + 32 len ceil32(32 * _6777)] = mem[_6745 + _6761 + 32 len ceil32(32 * _6777)]
                            if 1 >= _6777:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6045, mem[_6745 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3337 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3337] = return_data.size
                    mem[_3337 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3557 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3557]:
                            revert with 0, 50
                        mem[_3557 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3557]:
                            revert with 0, 50
                        mem[_3557 + 64] = token1Address
                        mem[_3557 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3557 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3557 + 132] = 0
                        mem[_3557 + 164] = 160
                        mem[_3557 + 260] = mem[_3557]
                        idx = 0
                        s = _3557 + 32
                        t = _3557 + 292
                        while idx < mem[_3557]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3557 + 196] = this.address
                        mem[_3557 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3557 + (32 * mem[_3557]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4978 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5026 = mem[_4978]
                        require mem[_4978] <= test266151307()
                        require _4978 + mem[_4978] + 31 < _4978 + return_data.size
                        _5074 = mem[_4978 + mem[_4978]]
                        if mem[_4978 + mem[_4978]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4978 + mem[_4978]]) + 1 < 0 or _4978 + ceil32(return_data.size) + ceil32(32 * mem[_4978 + mem[_4978]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4978 + ceil32(return_data.size) + ceil32(32 * mem[_4978 + mem[_4978]]) + 1
                        mem[_4978 + ceil32(return_data.size)] = _5074
                        require _5026 + (32 * _5074) + 32 <= return_data.size
                        mem[_4978 + ceil32(return_data.size) + 32 len ceil32(32 * _5074)] = mem[_4978 + _5026 + 32 len ceil32(32 * _5074)]
                        if 1 >= _5074:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4978 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3624 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3624]:
                                revert with 0, 50
                            mem[_3624 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3624]:
                                revert with 0, 50
                            mem[_3624 + 64] = token0Address
                            mem[_3624 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3624 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3624 + 132] = 0
                            mem[_3624 + 164] = 160
                            mem[_3624 + 260] = mem[_3624]
                            idx = 0
                            s = _3624 + 32
                            t = _3624 + 292
                            while idx < mem[_3624]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3624 + 196] = this.address
                            mem[_3624 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3624 + (32 * mem[_3624]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4977 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5025 = mem[_4977]
                            require mem[_4977] <= test266151307()
                            require _4977 + mem[_4977] + 31 < _4977 + return_data.size
                            _5073 = mem[_4977 + mem[_4977]]
                            if mem[_4977 + mem[_4977]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4977 + mem[_4977]]) + 1 < 0 or _4977 + ceil32(return_data.size) + ceil32(32 * mem[_4977 + mem[_4977]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4977 + ceil32(return_data.size) + ceil32(32 * mem[_4977 + mem[_4977]]) + 1
                            mem[_4977 + ceil32(return_data.size)] = _5073
                            require _5025 + (32 * _5073) + 32 <= return_data.size
                            mem[_4977 + ceil32(return_data.size) + 32 len ceil32(32 * _5073)] = mem[_4977 + _5025 + 32 len ceil32(32 * _5073)]
                            if 1 >= _5073:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4977 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3622 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3622]:
                                revert with 0, 50
                            mem[_3622 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3622]:
                                revert with 0, 50
                            mem[_3622 + 64] = token0Address
                            mem[_3622 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3622 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3622 + 132] = 0
                            mem[_3622 + 164] = 160
                            mem[_3622 + 260] = mem[_3622]
                            idx = 0
                            s = _3622 + 32
                            t = _3622 + 292
                            while idx < mem[_3622]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3622 + 196] = this.address
                            mem[_3622 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3622 + (32 * mem[_3622]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4976 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5024 = mem[_4976]
                            require mem[_4976] <= test266151307()
                            require _4976 + mem[_4976] + 31 < _4976 + return_data.size
                            _5072 = mem[_4976 + mem[_4976]]
                            if mem[_4976 + mem[_4976]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4976 + mem[_4976]]) + 1 < 0 or _4976 + ceil32(return_data.size) + ceil32(32 * mem[_4976 + mem[_4976]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4976 + ceil32(return_data.size) + ceil32(32 * mem[_4976 + mem[_4976]]) + 1
                            mem[_4976 + ceil32(return_data.size)] = _5072
                            require _5024 + (32 * _5072) + 32 <= return_data.size
                            mem[_4976 + ceil32(return_data.size) + 32 len ceil32(32 * _5072)] = mem[_4976 + _5024 + 32 len ceil32(32 * _5072)]
                            if 1 >= _5072:
                                revert with 0, 50
                            _6048 = mem[_4976 + ceil32(return_data.size) + 64]
                            _6181 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6181]:
                                revert with 0, 50
                            mem[_6181 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6181]:
                                revert with 0, 50
                            mem[_6181 + 64] = token1Address
                            mem[_6181 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6181 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6181 + 132] = 0
                            mem[_6181 + 164] = 160
                            mem[_6181 + 260] = mem[_6181]
                            idx = 0
                            s = _6181 + 32
                            t = _6181 + 292
                            while idx < mem[_6181]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6181 + 196] = this.address
                            mem[_6181 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6181 + (32 * mem[_6181]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6746 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6762 = mem[_6746]
                            require mem[_6746] <= test266151307()
                            require _6746 + mem[_6746] + 31 < _6746 + return_data.size
                            _6778 = mem[_6746 + mem[_6746]]
                            if mem[_6746 + mem[_6746]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6746 + mem[_6746]]) + 1 < 0 or _6746 + ceil32(return_data.size) + ceil32(32 * mem[_6746 + mem[_6746]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6746 + ceil32(return_data.size) + ceil32(32 * mem[_6746 + mem[_6746]]) + 1
                            mem[_6746 + ceil32(return_data.size)] = _6778
                            require _6762 + (32 * _6778) + 32 <= return_data.size
                            mem[_6746 + ceil32(return_data.size) + 32 len ceil32(32 * _6778)] = mem[_6746 + _6762 + 32 len ceil32(32 * _6778)]
                            if 1 >= _6778:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6048, mem[_6746 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)));
}

function sub_cd5b5616(?) {
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = token1Address
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = 1
            mem[ceil32(return_data.size) + 228] = 64
            mem[ceil32(return_data.size) + 260] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4045 = mem[ceil32(return_data.size) + 192 len 4], 0
            require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
            _4054 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            require _4045 + (32 * _4054) + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4054)] = mem[ceil32(return_data.size) + _4045 + 224 len ceil32(32 * _4054)]
            if 1 >= _4054:
                revert with 0, 50
            _7984 = mem[(2 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8025 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8045 = mem[_8025]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8025]:
                    revert with 0, 18
                if not sub_abddf82e:
                    mem[mem[64] + 36] = this.address
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8224 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8274 = mem[_8224]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8397 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8397] > !_8274:
                        revert with 0, 17
                    if mem[_8397] + _8274 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045 > -1 / mem[_8397] + _8274:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8397] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) + (_8274 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) / 10^18
                else:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stakingRewardAddress)
                    staticcall stakingRewardAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8225 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8276 = mem[_8225]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8398 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8398] > !_8276:
                        revert with 0, 17
                    if mem[_8398] + _8276 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045 > -1 / mem[_8398] + _8276:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8398] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) + (_8276 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8071 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8107 = mem[_8071]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8071]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8363 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8442 = mem[_8363]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8575 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8575] > !_8442:
                            revert with 0, 17
                        if mem[_8575] + _8442 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107 > -1 / mem[_8575] + _8442:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8575] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) + (_8442 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8364 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8444 = mem[_8364]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8576 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8576] > !_8444:
                            revert with 0, 17
                        if mem[_8576] + _8444 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107 > -1 / mem[_8576] + _8444:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8576] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) + (_8444 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12024 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12075 = mem[_12024]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12024]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12254 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12301 = mem[_12254]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12415 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12415] > !_12301:
                            revert with 0, 17
                        if mem[_12415] + _12301 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075 > -1 / mem[_12415] + _12301:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12415] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075) + (_12301 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12255 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12303 = mem[_12255]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12416 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12416] > !_12303:
                            revert with 0, 17
                        if mem[_12416] + _12303 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075 > -1 / mem[_12416] + _12303:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12416] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075) + (_12303 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12075) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 10^stor259
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4044 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4053 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require _4044 + (32 * _4053) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4053)] = mem[ceil32(return_data.size) + _4044 + 224 len ceil32(32 * _4053)]
                if 1 >= _4053:
                    revert with 0, 50
                _7983 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8024 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8044 = mem[_8024]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8024]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8222 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8271 = mem[_8222]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8395 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8395] > !_8271:
                            revert with 0, 17
                        if mem[_8395] + _8271 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044 > -1 / mem[_8395] + _8271:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8395] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) + (_8271 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8223 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8273 = mem[_8223]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8396 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8396] > !_8273:
                            revert with 0, 17
                        if mem[_8396] + _8273 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044 > -1 / mem[_8396] + _8273:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8396] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) + (_8273 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8070 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8104 = mem[_8070]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8070]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8361 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8435 = mem[_8361]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8570 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8570] > !_8435:
                                revert with 0, 17
                            if mem[_8570] + _8435 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104 > -1 / mem[_8570] + _8435:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8570] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) + (_8435 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8362 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8437 = mem[_8362]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8571 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8571] > !_8437:
                                revert with 0, 17
                            if mem[_8571] + _8437 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104 > -1 / mem[_8571] + _8437:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8571] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) + (_8437 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12023 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12074 = mem[_12023]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12023]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12252 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12298 = mem[_12252]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12413 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12413] > !_12298:
                                revert with 0, 17
                            if mem[_12413] + _12298 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074 > -1 / mem[_12413] + _12298:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12413] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074) + (_12298 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12253 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12300 = mem[_12253]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12414 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12414] > !_12300:
                                revert with 0, 17
                            if mem[_12414] + _12300 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074 > -1 / mem[_12414] + _12300:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12414] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074) + (_12300 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12074) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = s * t
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                u = ceil32(return_data.size) + 128
                v = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _7990 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _7993 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require _7990 + (32 * _7993) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7993)] = mem[ceil32(return_data.size) + _7990 + 224 len ceil32(32 * _7993)]
                if 1 >= _7993:
                    revert with 0, 50
                _11890 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12090 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12116 = mem[_12090]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12090]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12351 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12410 = mem[_12351]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12521 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12521] > !_12410:
                            revert with 0, 17
                        if mem[_12521] + _12410 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116 > -1 / mem[_12521] + _12410:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12521] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116) + (_12410 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12352 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12412 = mem[_12352]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12522 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12522] > !_12412:
                            revert with 0, 17
                        if mem[_12522] + _12412 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116 > -1 / mem[_12522] + _12412:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12522] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116) + (_12412 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12116) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12151 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12191 = mem[_12151]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12151]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12495 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12554 = mem[_12495]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12655 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12655] > !_12554:
                                revert with 0, 17
                            if mem[_12655] + _12554 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191 > -1 / mem[_12655] + _12554:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12655] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191) + (_12554 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12496 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12556 = mem[_12496]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12656 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12656] > !_12556:
                                revert with 0, 17
                            if mem[_12656] + _12556 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191 > -1 / mem[_12656] + _12556:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12656] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191) + (_12556 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12191) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15700 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15747 = mem[_15700]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_15700]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15932 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _15952 = mem[_15932]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16068 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16068] > !_15952:
                                revert with 0, 17
                            if mem[_16068] + _15952 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747 > -1 / mem[_16068] + _15952:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16068] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747) + (_15952 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15933 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15954 = mem[_15933]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16069 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16069] > !_15954:
                                revert with 0, 17
                            if mem[_16069] + _15954 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747 > -1 / mem[_16069] + _15954:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16069] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747) + (_15954 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15747) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4042 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4051 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require _4042 + (32 * _4051) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4051)] = mem[ceil32(return_data.size) + _4042 + 224 len ceil32(32 * _4051)]
                if 1 >= _4051:
                    revert with 0, 50
                _7981 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8023 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8043 = mem[_8023]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8023]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8220 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8268 = mem[_8220]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8392 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8392] > !_8268:
                            revert with 0, 17
                        if mem[_8392] + _8268 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043 > -1 / mem[_8392] + _8268:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8392] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) + (_8268 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8221 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8270 = mem[_8221]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8393 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8393] > !_8270:
                            revert with 0, 17
                        if mem[_8393] + _8270 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043 > -1 / mem[_8393] + _8270:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8393] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) + (_8270 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8069 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8101 = mem[_8069]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8069]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8359 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8428 = mem[_8359]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8565 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8565] > !_8428:
                                revert with 0, 17
                            if mem[_8565] + _8428 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101 > -1 / mem[_8565] + _8428:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8565] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) + (_8428 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8360 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8430 = mem[_8360]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8566 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8566] > !_8430:
                                revert with 0, 17
                            if mem[_8566] + _8430 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101 > -1 / mem[_8566] + _8430:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8566] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) + (_8430 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12022 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12071 = mem[_12022]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12022]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12250 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12291 = mem[_12250]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12408 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12408] > !_12291:
                                revert with 0, 17
                            if mem[_12408] + _12291 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071 > -1 / mem[_12408] + _12291:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12408] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071) + (_12291 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12251 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12293 = mem[_12251]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12409 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12409] > !_12293:
                                revert with 0, 17
                            if mem[_12409] + _12293 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071 > -1 / mem[_12409] + _12293:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12409] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071) + (_12293 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12071) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4041 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4050 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4041 + (32 * _4050) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4050)] = mem[ceil32(return_data.size) + _4041 + 224 len ceil32(32 * _4050)]
                    if 1 >= _4050:
                        revert with 0, 50
                    _7980 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8022 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8042 = mem[_8022]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8022]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8218 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8265 = mem[_8218]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8390 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8390] > !_8265:
                                revert with 0, 17
                            if mem[_8390] + _8265 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042 > -1 / mem[_8390] + _8265:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8390] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) + (_8265 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8219 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8267 = mem[_8219]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8391 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8391] > !_8267:
                                revert with 0, 17
                            if mem[_8391] + _8267 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042 > -1 / mem[_8391] + _8267:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8391] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) + (_8267 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8068 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8098 = mem[_8068]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8068]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8357 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8421 = mem[_8357]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8560 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8560] > !_8421:
                                    revert with 0, 17
                                if mem[_8560] + _8421 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098 > -1 / mem[_8560] + _8421:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8560] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) + (_8421 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8358 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _8423 = mem[_8358]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8561 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8561] > !_8423:
                                    revert with 0, 17
                                if mem[_8561] + _8423 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098 > -1 / mem[_8561] + _8423:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8561] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) + (_8423 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12021 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12070 = mem[_12021]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12021]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12248 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12288 = mem[_12248]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12406 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12406] > !_12288:
                                    revert with 0, 17
                                if mem[_12406] + _12288 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070 > -1 / mem[_12406] + _12288:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12406] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070) + (_12288 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12249 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12290 = mem[_12249]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12407 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12407] > !_12290:
                                    revert with 0, 17
                                if mem[_12407] + _12290 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070 > -1 / mem[_12407] + _12290:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12407] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070) + (_12290 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12070) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7989 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _7992 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _7989 + (32 * _7992) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7992)] = mem[ceil32(return_data.size) + _7989 + 224 len ceil32(32 * _7992)]
                    if 1 >= _7992:
                        revert with 0, 50
                    _11889 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12089 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12115 = mem[_12089]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12089]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12341 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12403 = mem[_12341]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12519 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12519] > !_12403:
                                revert with 0, 17
                            if mem[_12519] + _12403 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115 > -1 / mem[_12519] + _12403:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12519] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115) + (_12403 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12342 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12405 = mem[_12342]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12520 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12520] > !_12405:
                                revert with 0, 17
                            if mem[_12520] + _12405 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115 > -1 / mem[_12520] + _12405:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12520] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115) + (_12405 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12115) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12150 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12188 = mem[_12150]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12150]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12493 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12547 = mem[_12493]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12650 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12650] > !_12547:
                                    revert with 0, 17
                                if mem[_12650] + _12547 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188 > -1 / mem[_12650] + _12547:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12650] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188) + (_12547 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12494 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12549 = mem[_12494]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12651 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12651] > !_12549:
                                    revert with 0, 17
                                if mem[_12651] + _12549 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188 > -1 / mem[_12651] + _12549:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12651] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188) + (_12549 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12188) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15699 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15746 = mem[_15699]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_15699]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15930 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _15949 = mem[_15930]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16066 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16066] > !_15949:
                                    revert with 0, 17
                                if mem[_16066] + _15949 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746 > -1 / mem[_16066] + _15949:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16066] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746) + (_15949 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15931 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15951 = mem[_15931]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16067 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16067] > !_15951:
                                    revert with 0, 17
                                if mem[_16067] + _15951 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746 > -1 / mem[_16067] + _15951:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16067] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746) + (_15951 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15746) / 10^18
        else:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4039 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4048 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require _4039 + (32 * _4048) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4048)] = mem[ceil32(return_data.size) + _4039 + 224 len ceil32(32 * _4048)]
                if 1 >= _4048:
                    revert with 0, 50
                _7978 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8040 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8040]:
                                revert with 0, 50
                            mem[_8040 + 32] = token1Address
                            if 1 >= mem[_8040]:
                                revert with 0, 50
                            mem[_8040 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8040 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8040 + 100] = 1
                            mem[_8040 + 132] = 64
                            mem[_8040 + 164] = mem[_8040]
                            idx = 0
                            s = _8040 + 32
                            t = _8040 + 196
                            while idx < mem[_8040]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8040 + (32 * mem[_8040]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11909 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11933 = mem[_11909]
                            require mem[_11909] <= test266151307()
                            require _11909 + mem[_11909] + 31 < _11909 + return_data.size
                            _11949 = mem[_11909 + mem[_11909]]
                            if mem[_11909 + mem[_11909]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11909 + mem[_11909]]) + 1 < 0 or _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1
                            mem[_11909 + ceil32(return_data.size)] = _11949
                            require _11933 + (32 * _11949) + 32 <= return_data.size
                            mem[_11909 + ceil32(return_data.size) + 32 len ceil32(32 * _11949)] = mem[_11909 + _11933 + 32 len ceil32(32 * _11949)]
                            if 1 >= _11949:
                                revert with 0, 50
                            _15515 = mem[_11909 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15791 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15813 = mem[_15791]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_15791]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16047 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16093 = mem[_16047]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16258 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16258] > !_16093:
                                        revert with 0, 17
                                    if mem[_16258] + _16093 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813 > -1 / mem[_16258] + _16093:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16258] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813) + (_16093 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16048 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16095 = mem[_16048]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16259 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16259] > !_16095:
                                        revert with 0, 17
                                    if mem[_16259] + _16095 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813 > -1 / mem[_16259] + _16095:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16259] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813) + (_16095 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15813) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15854 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15901 = mem[_15854]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15854]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16225 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16320 = mem[_16225]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16497 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16497] > !_16320:
                                            revert with 0, 17
                                        if mem[_16497] + _16320 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901 > -1 / mem[_16497] + _16320:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16497] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901) + (_16320 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16226 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16322 = mem[_16226]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16498 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16498] > !_16322:
                                            revert with 0, 17
                                        if mem[_16498] + _16322 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901 > -1 / mem[_16498] + _16322:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16498] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901) + (_16322 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15901) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18855 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18884 = mem[_18855]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18855]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19090 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19126 = mem[_19090]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19278 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19278] > !_19126:
                                            revert with 0, 17
                                        if mem[_19278] + _19126 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884 > -1 / mem[_19278] + _19126:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19278] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884) + (_19126 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19091 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19128 = mem[_19091]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19279 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19279] > !_19128:
                                            revert with 0, 17
                                        if mem[_19279] + _19128 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884 > -1 / mem[_19279] + _19128:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884) + (_19128 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18884) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8092 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8092]:
                                    revert with 0, 50
                                mem[_8092 + 32] = token1Address
                                if 1 >= mem[_8092]:
                                    revert with 0, 50
                                mem[_8092 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8092 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8092 + 100] = 10^stor259
                                mem[_8092 + 132] = 64
                                mem[_8092 + 164] = mem[_8092]
                                idx = 0
                                s = _8092 + 32
                                t = _8092 + 196
                                while idx < mem[_8092]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8092 + (32 * mem[_8092]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11908 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11932 = mem[_11908]
                                require mem[_11908] <= test266151307()
                                require _11908 + mem[_11908] + 31 < _11908 + return_data.size
                                _11948 = mem[_11908 + mem[_11908]]
                                if mem[_11908 + mem[_11908]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11908 + mem[_11908]]) + 1 < 0 or _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1
                                mem[_11908 + ceil32(return_data.size)] = _11948
                                require _11932 + (32 * _11948) + 32 <= return_data.size
                                mem[_11908 + ceil32(return_data.size) + 32 len ceil32(32 * _11948)] = mem[_11908 + _11932 + 32 len ceil32(32 * _11948)]
                                var100002 = _11908 + ceil32(return_data.size) + ceil32(32 * _11948) + 32
                                if 1 >= _11948:
                                    revert with 0, 50
                                _15514 = mem[_11908 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15790 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15812 = mem[_15790]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15790]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16045 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16090 = mem[_16045]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16256 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16256] > !_16090:
                                            revert with 0, 17
                                        if mem[_16256] + _16090 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812 > -1 / mem[_16256] + _16090:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16256] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812) + (_16090 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16046 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16092 = mem[_16046]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16257 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16257] > !_16092:
                                            revert with 0, 17
                                        if mem[_16257] + _16092 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812 > -1 / mem[_16257] + _16092:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16257] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812) + (_16092 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15812) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15853 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15898 = mem[_15853]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15853]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16223 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16313 = mem[_16223]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16492 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16492] > !_16313:
                                                revert with 0, 17
                                            if mem[_16492] + _16313 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898 > -1 / mem[_16492] + _16313:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16492] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898) + (_16313 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16224 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16315 = mem[_16224]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16493 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16493] > !_16315:
                                                revert with 0, 17
                                            if mem[_16493] + _16315 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898 > -1 / mem[_16493] + _16315:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16493] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898) + (_16315 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15898) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18854 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18883 = mem[_18854]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18854]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19088 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19123 = mem[_19088]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19276 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19276] > !_19123:
                                                revert with 0, 17
                                            if mem[_19276] + _19123 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883 > -1 / mem[_19276] + _19123:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19276] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883) + (_19123 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19089 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19125 = mem[_19089]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19277 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19277] > !_19125:
                                                revert with 0, 17
                                            if mem[_19277] + _19125 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883 > -1 / mem[_19277] + _19125:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19277] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883) + (_19125 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18883) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _11917 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11917]:
                                    revert with 0, 50
                                mem[_11917 + 32] = token1Address
                                if 1 >= mem[_11917]:
                                    revert with 0, 50
                                mem[_11917 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_11917 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11917 + 100] = s * t
                                mem[_11917 + 132] = 64
                                mem[_11917 + 164] = mem[_11917]
                                idx = 0
                                s = _11917 + 32
                                t = _11917 + 196
                                while idx < mem[_11917]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11917 + (32 * mem[_11917]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15553 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15585 = mem[_15553]
                                require mem[_15553] <= test266151307()
                                require _15553 + mem[_15553] + 31 < _15553 + return_data.size
                                _15609 = mem[_15553 + mem[_15553]]
                                if mem[_15553 + mem[_15553]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15553 + mem[_15553]]) + 1 < 0 or _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1
                                mem[_15553 + ceil32(return_data.size)] = _15609
                                require _15585 + (32 * _15609) + 32 <= return_data.size
                                mem[_15553 + ceil32(return_data.size) + 32 len ceil32(32 * _15609)] = mem[_15553 + _15585 + 32 len ceil32(32 * _15609)]
                                var105002 = _15553 + ceil32(return_data.size) + ceil32(32 * _15609) + 32
                                if 1 >= _15609:
                                    revert with 0, 50
                                _18719 = mem[_15553 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18927 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18941 = mem[_18927]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18927]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19253 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19314 = mem[_19253]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19516 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19516] > !_19314:
                                            revert with 0, 17
                                        if mem[_19516] + _19314 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941 > -1 / mem[_19516] + _19314:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19516] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941) + (_19314 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19254 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19316 = mem[_19254]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19517 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19517] > !_19316:
                                            revert with 0, 17
                                        if mem[_19517] + _19316 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941 > -1 / mem[_19517] + _19316:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19517] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941) + (_19316 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18941) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18986 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19053 = mem[_18986]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18986]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19482 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19601 = mem[_19482]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19812 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19812] > !_19601:
                                                revert with 0, 17
                                            if mem[_19812] + _19601 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053 > -1 / mem[_19812] + _19601:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19812] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053) + (_19601 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19483 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19603 = mem[_19483]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19813 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19813] > !_19603:
                                                revert with 0, 17
                                            if mem[_19813] + _19603 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053 > -1 / mem[_19813] + _19603:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19813] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053) + (_19603 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19053) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21305 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21323 = mem[_21305]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21305]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21507 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21552 = mem[_21507]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21701 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21701] > !_21552:
                                                revert with 0, 17
                                            if mem[_21701] + _21552 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323 > -1 / mem[_21701] + _21552:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21701] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) + (_21552 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21508 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21554 = mem[_21508]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21702 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21702] > !_21554:
                                                revert with 0, 17
                                            if mem[_21702] + _21554 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323 > -1 / mem[_21702] + _21554:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21702] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) + (_21554 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) / 10^18
                    else:
                        _8003 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_8003]:
                            revert with 0, 50
                        mem[_8003 + 32] = token1Address
                        if 1 >= mem[_8003]:
                            revert with 0, 50
                        mem[_8003 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_8003 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_8003 + 100] = 10^18
                        mem[_8003 + 132] = 64
                        mem[_8003 + 164] = mem[_8003]
                        idx = 0
                        s = _8003 + 32
                        t = _8003 + 196
                        while idx < mem[_8003]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _8003 + (32 * mem[_8003]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11910 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11934 = mem[_11910]
                        require mem[_11910] <= test266151307()
                        require _11910 + mem[_11910] + 31 < _11910 + return_data.size
                        _11950 = mem[_11910 + mem[_11910]]
                        if mem[_11910 + mem[_11910]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11910 + mem[_11910]]) + 1 < 0 or _11910 + ceil32(return_data.size) + ceil32(32 * mem[_11910 + mem[_11910]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11910 + ceil32(return_data.size) + ceil32(32 * mem[_11910 + mem[_11910]]) + 1
                        mem[_11910 + ceil32(return_data.size)] = _11950
                        require _11934 + (32 * _11950) + 32 <= return_data.size
                        mem[_11910 + ceil32(return_data.size) + 32 len ceil32(32 * _11950)] = mem[_11910 + _11934 + 32 len ceil32(32 * _11950)]
                        var89002 = _11910 + ceil32(return_data.size) + ceil32(32 * _11950) + 32
                        var89005 = _11910 + _11934 + ceil32(32 * _11950) + 32
                        if 1 >= _11950:
                            revert with 0, 50
                        _15516 = mem[_11910 + ceil32(return_data.size) + 64]
                        _15525 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_15525]:
                            revert with 0, 50
                        mem[_15525 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_15525]:
                            revert with 0, 50
                        mem[_15525 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_15525 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_15525 + 100] = _15516
                        mem[_15525 + 132] = 64
                        mem[_15525 + 164] = mem[_15525]
                        idx = 0
                        s = _15525 + 32
                        t = _15525 + 196
                        while idx < mem[_15525]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _15525 + (32 * mem[_15525]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _18745 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _18763 = mem[_18745]
                        require mem[_18745] <= test266151307()
                        require _18745 + mem[_18745] + 31 < _18745 + return_data.size
                        _18779 = mem[_18745 + mem[_18745]]
                        if mem[_18745 + mem[_18745]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_18745 + mem[_18745]]) + 1 < 0 or _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1
                        mem[_18745 + ceil32(return_data.size)] = _18779
                        require _18763 + (32 * _18779) + 32 <= return_data.size
                        mem[_18745 + ceil32(return_data.size) + 32 len ceil32(32 * _18779)] = mem[_18745 + _18763 + 32 len ceil32(32 * _18779)]
                        if 1 >= _18779:
                            revert with 0, 50
                        _21230 = mem[_18745 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21354 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21364 = mem[_21354]
                            if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_21354]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21672 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _21730 = mem[_21672]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21895 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21895] > !_21730:
                                    revert with 0, 17
                                if mem[_21895] + _21730 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364 > -1 / mem[_21895] + _21730:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21895] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364) + (_21730 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21673 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21732 = mem[_21673]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21896 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21896] > !_21732:
                                    revert with 0, 17
                                if mem[_21896] + _21732 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364 > -1 / mem[_21896] + _21732:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21896] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364) + (_21732 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21364) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21396 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21475 = mem[_21396]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21396]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21870 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21964 = mem[_21870]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22118 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22118] > !_21964:
                                        revert with 0, 17
                                    if mem[_22118] + _21964 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475 > -1 / mem[_22118] + _21964:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22118] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) + (_21964 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21871 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21966 = mem[_21871]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22119 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22119] > !_21966:
                                        revert with 0, 17
                                    if mem[_22119] + _21966 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475 > -1 / mem[_22119] + _21966:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22119] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) + (_21966 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22832 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22843 = mem[_22832]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22832]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22957 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22991 = mem[_22957]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23085 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23085] > !_22991:
                                        revert with 0, 17
                                    if mem[_23085] + _22991 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843 > -1 / mem[_23085] + _22991:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23085] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) + (_22991 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22958 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22993 = mem[_22958]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23086 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23086] > !_22993:
                                        revert with 0, 17
                                    if mem[_23086] + _22993 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843 > -1 / mem[_23086] + _22993:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23086] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) + (_22993 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8090 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8090]:
                                    revert with 0, 50
                                mem[_8090 + 32] = token1Address
                                if 1 >= mem[_8090]:
                                    revert with 0, 50
                                mem[_8090 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8090 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8090 + 100] = 1
                                mem[_8090 + 132] = 64
                                mem[_8090 + 164] = mem[_8090]
                                idx = 0
                                s = _8090 + 32
                                t = _8090 + 196
                                while idx < mem[_8090]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8090 + (32 * mem[_8090]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11904 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11929 = mem[_11904]
                                require mem[_11904] <= test266151307()
                                require _11904 + mem[_11904] + 31 < _11904 + return_data.size
                                _11945 = mem[_11904 + mem[_11904]]
                                if mem[_11904 + mem[_11904]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11904 + mem[_11904]]) + 1 < 0 or _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1
                                mem[_11904 + ceil32(return_data.size)] = _11945
                                require _11929 + (32 * _11945) + 32 <= return_data.size
                                mem[_11904 + ceil32(return_data.size) + 32 len ceil32(32 * _11945)] = mem[_11904 + _11929 + 32 len ceil32(32 * _11945)]
                                var100002 = _11904 + ceil32(return_data.size) + ceil32(32 * _11945) + 32
                                if 1 >= _11945:
                                    revert with 0, 50
                                _15509 = mem[_11904 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15789 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15811 = mem[_15789]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15789]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16043 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16087 = mem[_16043]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16253 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16253] > !_16087:
                                            revert with 0, 17
                                        if mem[_16253] + _16087 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811 > -1 / mem[_16253] + _16087:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16253] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811) + (_16087 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16044 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16089 = mem[_16044]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16254 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16254] > !_16089:
                                            revert with 0, 17
                                        if mem[_16254] + _16089 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811 > -1 / mem[_16254] + _16089:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16254] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811) + (_16089 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15811) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15851 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15895 = mem[_15851]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15851]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16221 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16306 = mem[_16221]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16486 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16486] > !_16306:
                                                revert with 0, 17
                                            if mem[_16486] + _16306 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895 > -1 / mem[_16486] + _16306:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16486] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895) + (_16306 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16222 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16308 = mem[_16222]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16487 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16487] > !_16308:
                                                revert with 0, 17
                                            if mem[_16487] + _16308 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895 > -1 / mem[_16487] + _16308:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16487] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895) + (_16308 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15895) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18852 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18882 = mem[_18852]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18852]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19085 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19119 = mem[_19085]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19273 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19273] > !_19119:
                                                revert with 0, 17
                                            if mem[_19273] + _19119 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882 > -1 / mem[_19273] + _19119:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19273] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882) + (_19119 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19086 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19121 = mem[_19086]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19274 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19274] > !_19121:
                                                revert with 0, 17
                                            if mem[_19274] + _19121 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882 > -1 / mem[_19274] + _19121:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882) + (_19121 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18882) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8173 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8173]:
                                        revert with 0, 50
                                    mem[_8173 + 32] = token1Address
                                    if 1 >= mem[_8173]:
                                        revert with 0, 50
                                    mem[_8173 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8173 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8173 + 100] = 10^stor259
                                    mem[_8173 + 132] = 64
                                    mem[_8173 + 164] = mem[_8173]
                                    idx = 0
                                    s = _8173 + 32
                                    t = _8173 + 196
                                    while idx < mem[_8173]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8173 + (32 * mem[_8173]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11903 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11928 = mem[_11903]
                                    require mem[_11903] <= test266151307()
                                    require _11903 + mem[_11903] + 31 < _11903 + return_data.size
                                    _11944 = mem[_11903 + mem[_11903]]
                                    if mem[_11903 + mem[_11903]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11903 + mem[_11903]]) + 1 < 0 or _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1
                                    mem[_11903 + ceil32(return_data.size)] = _11944
                                    require _11928 + (32 * _11944) + 32 <= return_data.size
                                    mem[_11903 + ceil32(return_data.size) + 32 len ceil32(32 * _11944)] = mem[_11903 + _11928 + 32 len ceil32(32 * _11944)]
                                    var105002 = _11903 + ceil32(return_data.size) + ceil32(32 * _11944) + 32
                                    if 1 >= _11944:
                                        revert with 0, 50
                                    _15508 = mem[_11903 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15788 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15810 = mem[_15788]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15788]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16041 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16084 = mem[_16041]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16251 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16251] > !_16084:
                                                revert with 0, 17
                                            if mem[_16251] + _16084 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810 > -1 / mem[_16251] + _16084:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16251] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810) + (_16084 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16042 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16086 = mem[_16042]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16252 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16252] > !_16086:
                                                revert with 0, 17
                                            if mem[_16252] + _16086 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810 > -1 / mem[_16252] + _16086:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16252] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810) + (_16086 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15810) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15850 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15892 = mem[_15850]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15850]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16219 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16299 = mem[_16219]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16481 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16481] > !_16299:
                                                    revert with 0, 17
                                                if mem[_16481] + _16299 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892 > -1 / mem[_16481] + _16299:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16481] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892) + (_16299 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16220 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16301 = mem[_16220]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16482 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16482] > !_16301:
                                                    revert with 0, 17
                                                if mem[_16482] + _16301 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892 > -1 / mem[_16482] + _16301:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16482] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892) + (_16301 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15892) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18851 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18881 = mem[_18851]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18851]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19083 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19116 = mem[_19083]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19271 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19271] > !_19116:
                                                    revert with 0, 17
                                                if mem[_19271] + _19116 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881 > -1 / mem[_19271] + _19116:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19271] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881) + (_19116 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19084 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19118 = mem[_19084]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19272 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19272] > !_19118:
                                                    revert with 0, 17
                                                if mem[_19272] + _19118 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881 > -1 / mem[_19272] + _19118:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19272] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881) + (_19118 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18881) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11915 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11915]:
                                        revert with 0, 50
                                    mem[_11915 + 32] = token1Address
                                    if 1 >= mem[_11915]:
                                        revert with 0, 50
                                    mem[_11915 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11915 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11915 + 100] = s * t
                                    mem[_11915 + 132] = 64
                                    mem[_11915 + 164] = mem[_11915]
                                    idx = 0
                                    s = _11915 + 32
                                    t = _11915 + 196
                                    while idx < mem[_11915]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11915 + (32 * mem[_11915]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15551 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15583 = mem[_15551]
                                    require mem[_15551] <= test266151307()
                                    require _15551 + mem[_15551] + 31 < _15551 + return_data.size
                                    _15607 = mem[_15551 + mem[_15551]]
                                    if mem[_15551 + mem[_15551]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15551 + mem[_15551]]) + 1 < 0 or _15551 + ceil32(return_data.size) + ceil32(32 * mem[_15551 + mem[_15551]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15551 + ceil32(return_data.size) + ceil32(32 * mem[_15551 + mem[_15551]]) + 1
                                    mem[_15551 + ceil32(return_data.size)] = _15607
                                    require _15583 + (32 * _15607) + 32 <= return_data.size
                                    mem[_15551 + ceil32(return_data.size) + 32 len ceil32(32 * _15607)] = mem[_15551 + _15583 + 32 len ceil32(32 * _15607)]
                                    var110002 = _15551 + ceil32(return_data.size) + ceil32(32 * _15607) + 32
                                    if 1 >= _15607:
                                        revert with 0, 50
                                    _18717 = mem[_15551 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18926 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18940 = mem[_18926]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18926]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19251 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19311 = mem[_19251]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19513 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19513] > !_19311:
                                                revert with 0, 17
                                            if mem[_19513] + _19311 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940 > -1 / mem[_19513] + _19311:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19513] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940) + (_19311 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19252 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19313 = mem[_19252]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19514 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19514] > !_19313:
                                                revert with 0, 17
                                            if mem[_19514] + _19313 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940 > -1 / mem[_19514] + _19313:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19514] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940) + (_19313 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18940) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18985 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19042 = mem[_18985]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18985]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19480 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19594 = mem[_19480]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19807 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19807] > !_19594:
                                                    revert with 0, 17
                                                if mem[_19807] + _19594 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042 > -1 / mem[_19807] + _19594:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19807] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042) + (_19594 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19481 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19596 = mem[_19481]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19808 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19808] > !_19596:
                                                    revert with 0, 17
                                                if mem[_19808] + _19596 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042 > -1 / mem[_19808] + _19596:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19808] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042) + (_19596 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19042) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21304 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21322 = mem[_21304]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21304]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21504 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21548 = mem[_21504]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21699 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21699] > !_21548:
                                                    revert with 0, 17
                                                if mem[_21699] + _21548 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322 > -1 / mem[_21699] + _21548:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21699] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) + (_21548 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21505 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21550 = mem[_21505]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21700 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21700] > !_21550:
                                                    revert with 0, 17
                                                if mem[_21700] + _21550 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322 > -1 / mem[_21700] + _21550:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21700] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) + (_21550 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) / 10^18
                        else:
                            _8031 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8031]:
                                revert with 0, 50
                            mem[_8031 + 32] = token1Address
                            if 1 >= mem[_8031]:
                                revert with 0, 50
                            mem[_8031 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8031 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8031 + 100] = 10^18
                            mem[_8031 + 132] = 64
                            mem[_8031 + 164] = mem[_8031]
                            idx = 0
                            s = _8031 + 32
                            t = _8031 + 196
                            while idx < mem[_8031]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8031 + (32 * mem[_8031]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11905 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11930 = mem[_11905]
                            require mem[_11905] <= test266151307()
                            require _11905 + mem[_11905] + 31 < _11905 + return_data.size
                            _11946 = mem[_11905 + mem[_11905]]
                            if mem[_11905 + mem[_11905]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11905 + mem[_11905]]) + 1 < 0 or _11905 + ceil32(return_data.size) + ceil32(32 * mem[_11905 + mem[_11905]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11905 + ceil32(return_data.size) + ceil32(32 * mem[_11905 + mem[_11905]]) + 1
                            mem[_11905 + ceil32(return_data.size)] = _11946
                            require _11930 + (32 * _11946) + 32 <= return_data.size
                            mem[_11905 + ceil32(return_data.size) + 32 len ceil32(32 * _11946)] = mem[_11905 + _11930 + 32 len ceil32(32 * _11946)]
                            var94002 = _11905 + ceil32(return_data.size) + ceil32(32 * _11946) + 32
                            if 1 >= _11946:
                                revert with 0, 50
                            _15510 = mem[_11905 + ceil32(return_data.size) + 64]
                            _15523 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15523]:
                                revert with 0, 50
                            mem[_15523 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15523]:
                                revert with 0, 50
                            mem[_15523 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15523 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15523 + 100] = _15510
                            mem[_15523 + 132] = 64
                            mem[_15523 + 164] = mem[_15523]
                            idx = 0
                            s = _15523 + 32
                            t = _15523 + 196
                            while idx < mem[_15523]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15523 + (32 * mem[_15523]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18744 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18762 = mem[_18744]
                            require mem[_18744] <= test266151307()
                            require _18744 + mem[_18744] + 31 < _18744 + return_data.size
                            _18778 = mem[_18744 + mem[_18744]]
                            if mem[_18744 + mem[_18744]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_18744 + mem[_18744]]) + 1 < 0 or _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1
                            mem[_18744 + ceil32(return_data.size)] = _18778
                            require _18762 + (32 * _18778) + 32 <= return_data.size
                            mem[_18744 + ceil32(return_data.size) + 32 len ceil32(32 * _18778)] = mem[_18744 + _18762 + 32 len ceil32(32 * _18778)]
                            if 1 >= _18778:
                                revert with 0, 50
                            _21229 = mem[_18744 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21353 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21363 = mem[_21353]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21353]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21670 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21727 = mem[_21670]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21893 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21893] > !_21727:
                                        revert with 0, 17
                                    if mem[_21893] + _21727 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363 > -1 / mem[_21893] + _21727:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21893] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363) + (_21727 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21671 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21729 = mem[_21671]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21894 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21894] > !_21729:
                                        revert with 0, 17
                                    if mem[_21894] + _21729 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363 > -1 / mem[_21894] + _21729:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21894] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363) + (_21729 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21363) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21395 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21468 = mem[_21395]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21395]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21868 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21957 = mem[_21868]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22113 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22113] > !_21957:
                                            revert with 0, 17
                                        if mem[_22113] + _21957 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468 > -1 / mem[_22113] + _21957:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22113] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) + (_21957 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21869 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21959 = mem[_21869]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22114 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22114] > !_21959:
                                            revert with 0, 17
                                        if mem[_22114] + _21959 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468 > -1 / mem[_22114] + _21959:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22114] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) + (_21959 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22831 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22842 = mem[_22831]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22831]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22955 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22988 = mem[_22955]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23083 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23083] > !_22988:
                                            revert with 0, 17
                                        if mem[_23083] + _22988 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842 > -1 / mem[_23083] + _22988:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) + (_22988 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22956 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22990 = mem[_22956]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23084 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23084] > !_22990:
                                            revert with 0, 17
                                        if mem[_23084] + _22990 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842 > -1 / mem[_23084] + _22990:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23084] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) + (_22990 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12060 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12060]:
                                    revert with 0, 50
                                mem[_12060 + 32] = token1Address
                                if 1 >= mem[_12060]:
                                    revert with 0, 50
                                mem[_12060 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12060 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12060 + 100] = 1
                                mem[_12060 + 132] = 64
                                mem[_12060 + 164] = mem[_12060]
                                idx = 0
                                u = _12060 + 32
                                v = _12060 + 196
                                while idx < mem[_12060]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12060 + (32 * mem[_12060]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15549 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15581 = mem[_15549]
                                require mem[_15549] <= test266151307()
                                require _15549 + mem[_15549] + 31 < _15549 + return_data.size
                                _15605 = mem[_15549 + mem[_15549]]
                                if mem[_15549 + mem[_15549]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15549 + mem[_15549]]) + 1 < 0 or _15549 + ceil32(return_data.size) + ceil32(32 * mem[_15549 + mem[_15549]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15549 + ceil32(return_data.size) + ceil32(32 * mem[_15549 + mem[_15549]]) + 1
                                mem[_15549 + ceil32(return_data.size)] = _15605
                                require _15581 + (32 * _15605) + 32 <= return_data.size
                                mem[_15549 + ceil32(return_data.size) + 32 len ceil32(32 * _15605)] = mem[_15549 + _15581 + 32 len ceil32(32 * _15605)]
                                var105002 = _15549 + ceil32(return_data.size) + ceil32(32 * _15605) + 32
                                if 1 >= _15605:
                                    revert with 0, 50
                                _18713 = mem[_15549 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18925 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18939 = mem[_18925]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18925]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19249 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19308 = mem[_19249]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19511 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19511] > !_19308:
                                            revert with 0, 17
                                        if mem[_19511] + _19308 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939 > -1 / mem[_19511] + _19308:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19511] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939) + (_19308 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19250 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19310 = mem[_19250]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19512 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19512] > !_19310:
                                            revert with 0, 17
                                        if mem[_19512] + _19310 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939 > -1 / mem[_19512] + _19310:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19512] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939) + (_19310 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18939) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18983 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19039 = mem[_18983]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18983]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19478 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19587 = mem[_19478]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19801 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19801] > !_19587:
                                                revert with 0, 17
                                            if mem[_19801] + _19587 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039 > -1 / mem[_19801] + _19587:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19801] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039) + (_19587 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19479 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19589 = mem[_19479]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19802 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19802] > !_19589:
                                                revert with 0, 17
                                            if mem[_19802] + _19589 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039 > -1 / mem[_19802] + _19589:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19802] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039) + (_19589 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19039) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21302 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21321 = mem[_21302]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21302]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21502 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21545 = mem[_21502]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21696 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21696] > !_21545:
                                                revert with 0, 17
                                            if mem[_21696] + _21545 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321 > -1 / mem[_21696] + _21545:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21696] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) + (_21545 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21503 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21547 = mem[_21503]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21697 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21697] > !_21547:
                                                revert with 0, 17
                                            if mem[_21697] + _21547 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321 > -1 / mem[_21697] + _21547:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21697] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) + (_21547 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12125 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12125]:
                                        revert with 0, 50
                                    mem[_12125 + 32] = token1Address
                                    if 1 >= mem[_12125]:
                                        revert with 0, 50
                                    mem[_12125 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12125 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12125 + 100] = 10^stor259
                                    mem[_12125 + 132] = 64
                                    mem[_12125 + 164] = mem[_12125]
                                    idx = 0
                                    u = _12125 + 32
                                    v = _12125 + 196
                                    while idx < mem[_12125]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12125 + (32 * mem[_12125]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15548 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15580 = mem[_15548]
                                    require mem[_15548] <= test266151307()
                                    require _15548 + mem[_15548] + 31 < _15548 + return_data.size
                                    _15604 = mem[_15548 + mem[_15548]]
                                    if mem[_15548 + mem[_15548]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15548 + mem[_15548]]) + 1 < 0 or _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1
                                    mem[_15548 + ceil32(return_data.size)] = _15604
                                    require _15580 + (32 * _15604) + 32 <= return_data.size
                                    mem[_15548 + ceil32(return_data.size) + 32 len ceil32(32 * _15604)] = mem[_15548 + _15580 + 32 len ceil32(32 * _15604)]
                                    var110002 = _15548 + ceil32(return_data.size) + ceil32(32 * _15604) + 32
                                    if 1 >= _15604:
                                        revert with 0, 50
                                    _18712 = mem[_15548 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18924 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18938 = mem[_18924]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18924]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19247 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19305 = mem[_19247]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19509 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19509] > !_19305:
                                                revert with 0, 17
                                            if mem[_19509] + _19305 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938 > -1 / mem[_19509] + _19305:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19509] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938) + (_19305 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19248 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19307 = mem[_19248]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19510 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19510] > !_19307:
                                                revert with 0, 17
                                            if mem[_19510] + _19307 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938 > -1 / mem[_19510] + _19307:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19510] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938) + (_19307 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18938) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18982 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19036 = mem[_18982]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18982]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19476 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19580 = mem[_19476]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19796 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19796] > !_19580:
                                                    revert with 0, 17
                                                if mem[_19796] + _19580 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036 > -1 / mem[_19796] + _19580:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19796] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036) + (_19580 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19477 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19582 = mem[_19477]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19797 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19797] > !_19582:
                                                    revert with 0, 17
                                                if mem[_19797] + _19582 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036 > -1 / mem[_19797] + _19582:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19797] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036) + (_19582 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19036) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21301 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21320 = mem[_21301]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21301]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21500 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21542 = mem[_21500]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21694 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21694] > !_21542:
                                                    revert with 0, 17
                                                if mem[_21694] + _21542 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320 > -1 / mem[_21694] + _21542:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21694] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) + (_21542 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21501 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21544 = mem[_21501]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21695 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21695] > !_21544:
                                                    revert with 0, 17
                                                if mem[_21695] + _21544 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320 > -1 / mem[_21695] + _21544:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21695] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) + (_21544 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _15561 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 32] = token1Address
                                    if 1 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15561 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15561 + 100] = u * v
                                    mem[_15561 + 132] = 64
                                    mem[_15561 + 164] = mem[_15561]
                                    idx = 0
                                    u = _15561 + 32
                                    v = _15561 + 196
                                    while idx < mem[_15561]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15561 + (32 * mem[_15561]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18742 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18760 = mem[_18742]
                                    require mem[_18742] <= test266151307()
                                    require _18742 + mem[_18742] + 31 < _18742 + return_data.size
                                    _18776 = mem[_18742 + mem[_18742]]
                                    if mem[_18742 + mem[_18742]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18742 + mem[_18742]]) + 1 < 0 or _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1
                                    mem[_18742 + ceil32(return_data.size)] = _18776
                                    require _18760 + (32 * _18776) + 32 <= return_data.size
                                    mem[_18742 + ceil32(return_data.size) + 32 len ceil32(32 * _18776)] = mem[_18742 + _18760 + 32 len ceil32(32 * _18776)]
                                    if 1 >= _18776:
                                        revert with 0, 50
                                    _21227 = mem[_18742 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21362 = mem[_21352]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21352]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21668 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21724 = mem[_21668]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21890 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21890] > !_21724:
                                                revert with 0, 17
                                            if mem[_21890] + _21724 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362 > -1 / mem[_21890] + _21724:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21890] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362) + (_21724 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21669 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21726 = mem[_21669]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21891 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21891] > !_21726:
                                                revert with 0, 17
                                            if mem[_21891] + _21726 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362 > -1 / mem[_21891] + _21726:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21891] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362) + (_21726 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21362) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21394 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21453 = mem[_21394]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21394]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21866 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21950 = mem[_21866]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22108 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22108] > !_21950:
                                                    revert with 0, 17
                                                if mem[_22108] + _21950 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453 > -1 / mem[_22108] + _21950:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22108] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) + (_21950 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21867 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21952 = mem[_21867]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22109 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22109] > !_21952:
                                                    revert with 0, 17
                                                if mem[_22109] + _21952 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453 > -1 / mem[_22109] + _21952:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22109] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) + (_21952 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22830 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22841 = mem[_22830]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22830]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22952 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22984 = mem[_22952]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23081 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23081] > !_22984:
                                                    revert with 0, 17
                                                if mem[_23081] + _22984 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841 > -1 / mem[_23081] + _22984:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23081] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) + (_22984 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22953 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22986 = mem[_22953]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23082 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23082] > !_22986:
                                                    revert with 0, 17
                                                if mem[_23082] + _22986 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841 > -1 / mem[_23082] + _22986:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23082] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) + (_22986 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) / 10^18
                        else:
                            _11971 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_11971]:
                                revert with 0, 50
                            mem[_11971 + 32] = token1Address
                            if 1 >= mem[_11971]:
                                revert with 0, 50
                            mem[_11971 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_11971 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_11971 + 100] = 10^18
                            mem[_11971 + 132] = 64
                            mem[_11971 + 164] = mem[_11971]
                            idx = 0
                            u = _11971 + 32
                            v = _11971 + 196
                            while idx < mem[_11971]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _11971 + (32 * mem[_11971]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15550 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15582 = mem[_15550]
                            require mem[_15550] <= test266151307()
                            require _15550 + mem[_15550] + 31 < _15550 + return_data.size
                            _15606 = mem[_15550 + mem[_15550]]
                            if mem[_15550 + mem[_15550]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15550 + mem[_15550]]) + 1 < 0 or _15550 + ceil32(return_data.size) + ceil32(32 * mem[_15550 + mem[_15550]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15550 + ceil32(return_data.size) + ceil32(32 * mem[_15550 + mem[_15550]]) + 1
                            mem[_15550 + ceil32(return_data.size)] = _15606
                            require _15582 + (32 * _15606) + 32 <= return_data.size
                            mem[_15550 + ceil32(return_data.size) + 32 len ceil32(32 * _15606)] = mem[_15550 + _15582 + 32 len ceil32(32 * _15606)]
                            var99002 = _15550 + ceil32(return_data.size) + ceil32(32 * _15606) + 32
                            if 1 >= _15606:
                                revert with 0, 50
                            _18714 = mem[_15550 + ceil32(return_data.size) + 64]
                            _18727 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18727 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18727 + 100] = _18714
                            mem[_18727 + 132] = 64
                            mem[_18727 + 164] = mem[_18727]
                            idx = 0
                            u = _18727 + 32
                            v = _18727 + 196
                            while idx < mem[_18727]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18727 + (32 * mem[_18727]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21238 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21244 = mem[_21238]
                            require mem[_21238] <= test266151307()
                            require _21238 + mem[_21238] + 31 < _21238 + return_data.size
                            _21250 = mem[_21238 + mem[_21238]]
                            if mem[_21238 + mem[_21238]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21238 + mem[_21238]]) + 1 < 0 or _21238 + ceil32(return_data.size) + ceil32(32 * mem[_21238 + mem[_21238]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21238 + ceil32(return_data.size) + ceil32(32 * mem[_21238 + mem[_21238]]) + 1
                            mem[_21238 + ceil32(return_data.size)] = _21250
                            require _21244 + (32 * _21250) + 32 <= return_data.size
                            mem[_21238 + ceil32(return_data.size) + 32 len ceil32(32 * _21250)] = mem[_21238 + _21244 + 32 len ceil32(32 * _21250)]
                            if 1 >= _21250:
                                revert with 0, 50
                            _22796 = mem[_21238 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22858 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22863 = mem[_22858]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22858]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23064 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23099 = mem[_23064]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23184 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23184] > !_23099:
                                        revert with 0, 17
                                    if mem[_23184] + _23099 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863 > -1 / mem[_23184] + _23099:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23184] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) + (_23099 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23065 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23101 = mem[_23065]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23185 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23185] > !_23101:
                                        revert with 0, 17
                                    if mem[_23185] + _23101 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863 > -1 / mem[_23185] + _23101:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23185] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) + (_23101 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22878 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22925 = mem[_22878]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22878]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23173 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23218 = mem[_23173]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23288 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23288] > !_23218:
                                            revert with 0, 17
                                        if mem[_23288] + _23218 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925 > -1 / mem[_23288] + _23218:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23288] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) + (_23218 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23174 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23220 = mem[_23174]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23289 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23289] > !_23220:
                                            revert with 0, 17
                                        if mem[_23289] + _23220 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925 > -1 / mem[_23289] + _23220:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23289] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) + (_23220 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23521 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23526 = mem[_23521]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23521]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23566 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23581 = mem[_23566]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23618 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23618] > !_23581:
                                            revert with 0, 17
                                        if mem[_23618] + _23581 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526 > -1 / mem[_23618] + _23581:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23618] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) + (_23581 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23567 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23583 = mem[_23567]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23619 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23619] > !_23583:
                                            revert with 0, 17
                                        if mem[_23619] + _23583 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526 > -1 / mem[_23619] + _23583:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23619] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) + (_23583 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4038 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4047 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4038 + (32 * _4047) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4047)] = mem[ceil32(return_data.size) + _4038 + 224 len ceil32(32 * _4047)]
                    if 1 >= _4047:
                        revert with 0, 50
                    _7977 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8037 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8037]:
                                    revert with 0, 50
                                mem[_8037 + 32] = token1Address
                                if 1 >= mem[_8037]:
                                    revert with 0, 50
                                mem[_8037 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8037 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8037 + 100] = 1
                                mem[_8037 + 132] = 64
                                mem[_8037 + 164] = mem[_8037]
                                idx = 0
                                s = _8037 + 32
                                t = _8037 + 196
                                while idx < mem[_8037]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8037 + (32 * mem[_8037]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11899 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11925 = mem[_11899]
                                require mem[_11899] <= test266151307()
                                require _11899 + mem[_11899] + 31 < _11899 + return_data.size
                                _11941 = mem[_11899 + mem[_11899]]
                                if mem[_11899 + mem[_11899]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11899 + mem[_11899]]) + 1 < 0 or _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1
                                mem[_11899 + ceil32(return_data.size)] = _11941
                                require _11925 + (32 * _11941) + 32 <= return_data.size
                                mem[_11899 + ceil32(return_data.size) + 32 len ceil32(32 * _11941)] = mem[_11899 + _11925 + 32 len ceil32(32 * _11941)]
                                if 1 >= _11941:
                                    revert with 0, 50
                                _15500 = mem[_11899 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15786 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15808 = mem[_15786]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15786]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16038 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16081 = mem[_16038]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16245 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16245] > !_16081:
                                            revert with 0, 17
                                        if mem[_16245] + _16081 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808 > -1 / mem[_16245] + _16081:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16245] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808) + (_16081 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16039 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16083 = mem[_16039]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16246 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16246] > !_16083:
                                            revert with 0, 17
                                        if mem[_16246] + _16083 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808 > -1 / mem[_16246] + _16083:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16246] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808) + (_16083 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15808) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15848 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15888 = mem[_15848]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15848]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16216 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16291 = mem[_16216]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16473 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16473] > !_16291:
                                                revert with 0, 17
                                            if mem[_16473] + _16291 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888 > -1 / mem[_16473] + _16291:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16473] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888) + (_16291 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16217 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16293 = mem[_16217]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16474 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16474] > !_16293:
                                                revert with 0, 17
                                            if mem[_16474] + _16293 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888 > -1 / mem[_16474] + _16293:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16474] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888) + (_16293 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15888) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18847 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18879 = mem[_18847]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18847]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19078 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19110 = mem[_19078]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19267 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19267] > !_19110:
                                                revert with 0, 17
                                            if mem[_19267] + _19110 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879 > -1 / mem[_19267] + _19110:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19267] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879) + (_19110 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19079 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19112 = mem[_19079]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19268 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19268] > !_19112:
                                                revert with 0, 17
                                            if mem[_19268] + _19112 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879 > -1 / mem[_19268] + _19112:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19268] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879) + (_19112 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18879) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8086 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8086]:
                                        revert with 0, 50
                                    mem[_8086 + 32] = token1Address
                                    if 1 >= mem[_8086]:
                                        revert with 0, 50
                                    mem[_8086 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8086 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8086 + 100] = 10^stor259
                                    mem[_8086 + 132] = 64
                                    mem[_8086 + 164] = mem[_8086]
                                    idx = 0
                                    s = _8086 + 32
                                    t = _8086 + 196
                                    while idx < mem[_8086]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8086 + (32 * mem[_8086]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11898 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11924 = mem[_11898]
                                    require mem[_11898] <= test266151307()
                                    require _11898 + mem[_11898] + 31 < _11898 + return_data.size
                                    _11940 = mem[_11898 + mem[_11898]]
                                    if mem[_11898 + mem[_11898]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11898 + mem[_11898]]) + 1 < 0 or _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1
                                    mem[_11898 + ceil32(return_data.size)] = _11940
                                    require _11924 + (32 * _11940) + 32 <= return_data.size
                                    mem[_11898 + ceil32(return_data.size) + 32 len ceil32(32 * _11940)] = mem[_11898 + _11924 + 32 len ceil32(32 * _11940)]
                                    var105002 = _11898 + ceil32(return_data.size) + ceil32(32 * _11940) + 32
                                    if 1 >= _11940:
                                        revert with 0, 50
                                    _15499 = mem[_11898 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15785 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15807 = mem[_15785]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15785]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16036 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16078 = mem[_16036]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16243 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16243] > !_16078:
                                                revert with 0, 17
                                            if mem[_16243] + _16078 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807 > -1 / mem[_16243] + _16078:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16243] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807) + (_16078 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16037 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16080 = mem[_16037]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16244 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16244] > !_16080:
                                                revert with 0, 17
                                            if mem[_16244] + _16080 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807 > -1 / mem[_16244] + _16080:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16244] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807) + (_16080 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15807) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15847 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15885 = mem[_15847]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15847]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16214 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16284 = mem[_16214]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16468 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16468] > !_16284:
                                                    revert with 0, 17
                                                if mem[_16468] + _16284 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 > -1 / mem[_16468] + _16284:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16468] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885) + (_16284 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16215 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16286 = mem[_16215]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16469 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16469] > !_16286:
                                                    revert with 0, 17
                                                if mem[_16469] + _16286 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 > -1 / mem[_16469] + _16286:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16469] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885) + (_16286 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18846 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18878 = mem[_18846]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18846]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19076 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19107 = mem[_19076]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19265 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19265] > !_19107:
                                                    revert with 0, 17
                                                if mem[_19265] + _19107 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878 > -1 / mem[_19265] + _19107:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19265] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878) + (_19107 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19077 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19109 = mem[_19077]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19266 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19266] > !_19109:
                                                    revert with 0, 17
                                                if mem[_19266] + _19109 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878 > -1 / mem[_19266] + _19109:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19266] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878) + (_19109 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18878) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11913 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11913]:
                                        revert with 0, 50
                                    mem[_11913 + 32] = token1Address
                                    if 1 >= mem[_11913]:
                                        revert with 0, 50
                                    mem[_11913 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11913 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11913 + 100] = s * t
                                    mem[_11913 + 132] = 64
                                    mem[_11913 + 164] = mem[_11913]
                                    idx = 0
                                    s = _11913 + 32
                                    t = _11913 + 196
                                    while idx < mem[_11913]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11913 + (32 * mem[_11913]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15544 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15577 = mem[_15544]
                                    require mem[_15544] <= test266151307()
                                    require _15544 + mem[_15544] + 31 < _15544 + return_data.size
                                    _15601 = mem[_15544 + mem[_15544]]
                                    if mem[_15544 + mem[_15544]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15544 + mem[_15544]]) + 1 < 0 or _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1
                                    mem[_15544 + ceil32(return_data.size)] = _15601
                                    require _15577 + (32 * _15601) + 32 <= return_data.size
                                    mem[_15544 + ceil32(return_data.size) + 32 len ceil32(32 * _15601)] = mem[_15544 + _15577 + 32 len ceil32(32 * _15601)]
                                    var110002 = _15544 + ceil32(return_data.size) + ceil32(32 * _15601) + 32
                                    if 1 >= _15601:
                                        revert with 0, 50
                                    _18709 = mem[_15544 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18923 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18937 = mem[_18923]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18923]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19245 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19302 = mem[_19245]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19505 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19505] > !_19302:
                                                revert with 0, 17
                                            if mem[_19505] + _19302 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937 > -1 / mem[_19505] + _19302:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19505] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937) + (_19302 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19246 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19304 = mem[_19246]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19506 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19506] > !_19304:
                                                revert with 0, 17
                                            if mem[_19506] + _19304 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937 > -1 / mem[_19506] + _19304:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19506] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937) + (_19304 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18937) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18981 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19025 = mem[_18981]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18981]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19474 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19573 = mem[_19474]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19791 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19791] > !_19573:
                                                    revert with 0, 17
                                                if mem[_19791] + _19573 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025 > -1 / mem[_19791] + _19573:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19791] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025) + (_19573 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19475 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19575 = mem[_19475]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19792 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19792] > !_19575:
                                                    revert with 0, 17
                                                if mem[_19792] + _19575 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025 > -1 / mem[_19792] + _19575:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19792] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025) + (_19575 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19025) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21300 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21319 = mem[_21300]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21300]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21496 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21537 = mem[_21496]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21692 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21692] > !_21537:
                                                    revert with 0, 17
                                                if mem[_21692] + _21537 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319 > -1 / mem[_21692] + _21537:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21692] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) + (_21537 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21497 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21539 = mem[_21497]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21693 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21693] > !_21539:
                                                    revert with 0, 17
                                                if mem[_21693] + _21539 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319 > -1 / mem[_21693] + _21539:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21693] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) + (_21539 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) / 10^18
                        else:
                            _8001 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8001]:
                                revert with 0, 50
                            mem[_8001 + 32] = token1Address
                            if 1 >= mem[_8001]:
                                revert with 0, 50
                            mem[_8001 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8001 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8001 + 100] = 10^18
                            mem[_8001 + 132] = 64
                            mem[_8001 + 164] = mem[_8001]
                            idx = 0
                            s = _8001 + 32
                            t = _8001 + 196
                            while idx < mem[_8001]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8001 + (32 * mem[_8001]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11900 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11926 = mem[_11900]
                            require mem[_11900] <= test266151307()
                            require _11900 + mem[_11900] + 31 < _11900 + return_data.size
                            _11942 = mem[_11900 + mem[_11900]]
                            if mem[_11900 + mem[_11900]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11900 + mem[_11900]]) + 1 < 0 or _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1
                            mem[_11900 + ceil32(return_data.size)] = _11942
                            require _11926 + (32 * _11942) + 32 <= return_data.size
                            mem[_11900 + ceil32(return_data.size) + 32 len ceil32(32 * _11942)] = mem[_11900 + _11926 + 32 len ceil32(32 * _11942)]
                            var94002 = _11900 + ceil32(return_data.size) + ceil32(32 * _11942) + 32
                            var94005 = _11900 + _11926 + ceil32(32 * _11942) + 32
                            if 1 >= _11942:
                                revert with 0, 50
                            _15501 = mem[_11900 + ceil32(return_data.size) + 64]
                            _15521 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15521]:
                                revert with 0, 50
                            mem[_15521 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15521]:
                                revert with 0, 50
                            mem[_15521 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15521 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15521 + 100] = _15501
                            mem[_15521 + 132] = 64
                            mem[_15521 + 164] = mem[_15521]
                            idx = 0
                            s = _15521 + 32
                            t = _15521 + 196
                            while idx < mem[_15521]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15521 + (32 * mem[_15521]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18741 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18759 = mem[_18741]
                            require mem[_18741] <= test266151307()
                            require _18741 + mem[_18741] + 31 < _18741 + return_data.size
                            _18775 = mem[_18741 + mem[_18741]]
                            if mem[_18741 + mem[_18741]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_18741 + mem[_18741]]) + 1 < 0 or _18741 + ceil32(return_data.size) + ceil32(32 * mem[_18741 + mem[_18741]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _18741 + ceil32(return_data.size) + ceil32(32 * mem[_18741 + mem[_18741]]) + 1
                            mem[_18741 + ceil32(return_data.size)] = _18775
                            require _18759 + (32 * _18775) + 32 <= return_data.size
                            mem[_18741 + ceil32(return_data.size) + 32 len ceil32(32 * _18775)] = mem[_18741 + _18759 + 32 len ceil32(32 * _18775)]
                            if 1 >= _18775:
                                revert with 0, 50
                            _21226 = mem[_18741 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21351 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21361 = mem[_21351]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21351]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21666 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21721 = mem[_21666]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21888 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21888] > !_21721:
                                        revert with 0, 17
                                    if mem[_21888] + _21721 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361 > -1 / mem[_21888] + _21721:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21888] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361) + (_21721 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21667 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21723 = mem[_21667]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21889 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21889] > !_21723:
                                        revert with 0, 17
                                    if mem[_21889] + _21723 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361 > -1 / mem[_21889] + _21723:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21889] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361) + (_21723 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21361) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21393 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21450 = mem[_21393]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21393]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21864 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21943 = mem[_21864]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22103 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22103] > !_21943:
                                            revert with 0, 17
                                        if mem[_22103] + _21943 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450 > -1 / mem[_22103] + _21943:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22103] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) + (_21943 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21865 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21945 = mem[_21865]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22104 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22104] > !_21945:
                                            revert with 0, 17
                                        if mem[_22104] + _21945 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450 > -1 / mem[_22104] + _21945:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22104] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) + (_21945 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22829 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22840 = mem[_22829]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22829]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22950 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22981 = mem[_22950]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23079 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23079] > !_22981:
                                            revert with 0, 17
                                        if mem[_23079] + _22981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840 > -1 / mem[_23079] + _22981:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23079] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) + (_22981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22951 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22983 = mem[_22951]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23080 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23080] > !_22983:
                                            revert with 0, 17
                                        if mem[_23080] + _22983 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840 > -1 / mem[_23080] + _22983:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23080] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) + (_22983 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8084 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8084]:
                                        revert with 0, 50
                                    mem[_8084 + 32] = token1Address
                                    if 1 >= mem[_8084]:
                                        revert with 0, 50
                                    mem[_8084 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8084 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8084 + 100] = 1
                                    mem[_8084 + 132] = 64
                                    mem[_8084 + 164] = mem[_8084]
                                    idx = 0
                                    s = _8084 + 32
                                    t = _8084 + 196
                                    while idx < mem[_8084]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8084 + (32 * mem[_8084]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11894 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11921 = mem[_11894]
                                    require mem[_11894] <= test266151307()
                                    require _11894 + mem[_11894] + 31 < _11894 + return_data.size
                                    _11937 = mem[_11894 + mem[_11894]]
                                    if mem[_11894 + mem[_11894]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11894 + mem[_11894]]) + 1 < 0 or _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1
                                    mem[_11894 + ceil32(return_data.size)] = _11937
                                    require _11921 + (32 * _11937) + 32 <= return_data.size
                                    mem[_11894 + ceil32(return_data.size) + 32 len ceil32(32 * _11937)] = mem[_11894 + _11921 + 32 len ceil32(32 * _11937)]
                                    var105002 = _11894 + ceil32(return_data.size) + ceil32(32 * _11937) + 32
                                    if 1 >= _11937:
                                        revert with 0, 50
                                    _15494 = mem[_11894 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15784 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15806 = mem[_15784]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15784]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16034 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16075 = mem[_16034]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16240 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16240] > !_16075:
                                                revert with 0, 17
                                            if mem[_16240] + _16075 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806 > -1 / mem[_16240] + _16075:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16240] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806) + (_16075 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16035 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16077 = mem[_16035]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16241 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16241] > !_16077:
                                                revert with 0, 17
                                            if mem[_16241] + _16077 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806 > -1 / mem[_16241] + _16077:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16241] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806) + (_16077 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15806) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15845 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15882 = mem[_15845]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15845]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16212 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16277 = mem[_16212]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16462 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16462] > !_16277:
                                                    revert with 0, 17
                                                if mem[_16462] + _16277 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882 > -1 / mem[_16462] + _16277:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16462] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882) + (_16277 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16213 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16279 = mem[_16213]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16463 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16463] > !_16279:
                                                    revert with 0, 17
                                                if mem[_16463] + _16279 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882 > -1 / mem[_16463] + _16279:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16463] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882) + (_16279 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15882) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18844 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18877 = mem[_18844]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18844]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19073 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19103 = mem[_19073]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19262 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19262] > !_19103:
                                                    revert with 0, 17
                                                if mem[_19262] + _19103 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877 > -1 / mem[_19262] + _19103:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19262] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877) + (_19103 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19105 = mem[_19074]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19263 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19263] > !_19105:
                                                    revert with 0, 17
                                                if mem[_19263] + _19105 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877 > -1 / mem[_19263] + _19105:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19263] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877) + (_19105 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18877) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8165 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8165]:
                                            revert with 0, 50
                                        mem[_8165 + 32] = token1Address
                                        if 1 >= mem[_8165]:
                                            revert with 0, 50
                                        mem[_8165 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8165 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8165 + 100] = 10^stor259
                                        mem[_8165 + 132] = 64
                                        mem[_8165 + 164] = mem[_8165]
                                        idx = 0
                                        s = _8165 + 32
                                        t = _8165 + 196
                                        while idx < mem[_8165]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8165 + (32 * mem[_8165]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11893 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _11920 = mem[_11893]
                                        require mem[_11893] <= test266151307()
                                        require _11893 + mem[_11893] + 31 < _11893 + return_data.size
                                        _11936 = mem[_11893 + mem[_11893]]
                                        if mem[_11893 + mem[_11893]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_11893 + mem[_11893]]) + 1 < 0 or _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1
                                        mem[_11893 + ceil32(return_data.size)] = _11936
                                        require _11920 + (32 * _11936) + 32 <= return_data.size
                                        mem[_11893 + ceil32(return_data.size) + 32 len ceil32(32 * _11936)] = mem[_11893 + _11920 + 32 len ceil32(32 * _11936)]
                                        var110002 = _11893 + ceil32(return_data.size) + ceil32(32 * _11936) + 32
                                        if 1 >= _11936:
                                            revert with 0, 50
                                        _15493 = mem[_11893 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15783 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15805 = mem[_15783]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15783]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16032 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16072 = mem[_16032]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16238 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16238] > !_16072:
                                                    revert with 0, 17
                                                if mem[_16238] + _16072 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805 > -1 / mem[_16238] + _16072:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16238] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805) + (_16072 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16033 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16074 = mem[_16033]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16239 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16239] > !_16074:
                                                    revert with 0, 17
                                                if mem[_16239] + _16074 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805 > -1 / mem[_16239] + _16074:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16239] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805) + (_16074 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15805) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15844 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _15879 = mem[_15844]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_15844]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16210 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16270 = mem[_16210]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16457 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16457] > !_16270:
                                                        revert with 0, 17
                                                    if mem[_16457] + _16270 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879 > -1 / mem[_16457] + _16270:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16457] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879) + (_16270 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16211 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _16272 = mem[_16211]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16458 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16458] > !_16272:
                                                        revert with 0, 17
                                                    if mem[_16458] + _16272 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879 > -1 / mem[_16458] + _16272:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16458] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879) + (_16272 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15879) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18843 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18876 = mem[_18843]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18843]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19071 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19100 = mem[_19071]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19260 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19260] > !_19100:
                                                        revert with 0, 17
                                                    if mem[_19260] + _19100 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876 > -1 / mem[_19260] + _19100:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19260] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876) + (_19100 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19102 = mem[_19072]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19261 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19261] > !_19102:
                                                        revert with 0, 17
                                                    if mem[_19261] + _19102 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876 > -1 / mem[_19261] + _19102:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19261] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876) + (_19102 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18876) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _11911 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_11911]:
                                            revert with 0, 50
                                        mem[_11911 + 32] = token1Address
                                        if 1 >= mem[_11911]:
                                            revert with 0, 50
                                        mem[_11911 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_11911 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_11911 + 100] = s * t
                                        mem[_11911 + 132] = 64
                                        mem[_11911 + 164] = mem[_11911]
                                        idx = 0
                                        s = _11911 + 32
                                        t = _11911 + 196
                                        while idx < mem[_11911]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _11911 + (32 * mem[_11911]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15542 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15575 = mem[_15542]
                                        require mem[_15542] <= test266151307()
                                        require _15542 + mem[_15542] + 31 < _15542 + return_data.size
                                        _15599 = mem[_15542 + mem[_15542]]
                                        if mem[_15542 + mem[_15542]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15542 + mem[_15542]]) + 1 < 0 or _15542 + ceil32(return_data.size) + ceil32(32 * mem[_15542 + mem[_15542]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15542 + ceil32(return_data.size) + ceil32(32 * mem[_15542 + mem[_15542]]) + 1
                                        mem[_15542 + ceil32(return_data.size)] = _15599
                                        require _15575 + (32 * _15599) + 32 <= return_data.size
                                        mem[_15542 + ceil32(return_data.size) + 32 len ceil32(32 * _15599)] = mem[_15542 + _15575 + 32 len ceil32(32 * _15599)]
                                        var115002 = _15542 + ceil32(return_data.size) + ceil32(32 * _15599) + 32
                                        if 1 >= _15599:
                                            revert with 0, 50
                                        _18707 = mem[_15542 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18922 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18936 = mem[_18922]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18922]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19243 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19299 = mem[_19243]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19502 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19502] > !_19299:
                                                    revert with 0, 17
                                                if mem[_19502] + _19299 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936 > -1 / mem[_19502] + _19299:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19502] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936) + (_19299 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19244 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19301 = mem[_19244]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19503 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19503] > !_19301:
                                                    revert with 0, 17
                                                if mem[_19503] + _19301 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936 > -1 / mem[_19503] + _19301:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19503] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936) + (_19301 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18936) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18980 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19014 = mem[_18980]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18980]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19472 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19566 = mem[_19472]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19786 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19786] > !_19566:
                                                        revert with 0, 17
                                                    if mem[_19786] + _19566 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014 > -1 / mem[_19786] + _19566:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19786] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014) + (_19566 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19473 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19568 = mem[_19473]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19787 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19787] > !_19568:
                                                        revert with 0, 17
                                                    if mem[_19787] + _19568 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014 > -1 / mem[_19787] + _19568:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19787] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014) + (_19568 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19014) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21299 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21318 = mem[_21299]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21299]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21493 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21533 = mem[_21493]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21690 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21690] > !_21533:
                                                        revert with 0, 17
                                                    if mem[_21690] + _21533 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318 > -1 / mem[_21690] + _21533:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21690] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) + (_21533 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21494 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21535 = mem[_21494]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21691 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21691] > !_21535:
                                                        revert with 0, 17
                                                    if mem[_21691] + _21535 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318 > -1 / mem[_21691] + _21535:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21691] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) + (_21535 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) / 10^18
                            else:
                                _8026 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8026]:
                                    revert with 0, 50
                                mem[_8026 + 32] = token1Address
                                if 1 >= mem[_8026]:
                                    revert with 0, 50
                                mem[_8026 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8026 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8026 + 100] = 10^18
                                mem[_8026 + 132] = 64
                                mem[_8026 + 164] = mem[_8026]
                                idx = 0
                                s = _8026 + 32
                                t = _8026 + 196
                                while idx < mem[_8026]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8026 + (32 * mem[_8026]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11895 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11922 = mem[_11895]
                                require mem[_11895] <= test266151307()
                                require _11895 + mem[_11895] + 31 < _11895 + return_data.size
                                _11938 = mem[_11895 + mem[_11895]]
                                if mem[_11895 + mem[_11895]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11895 + mem[_11895]]) + 1 < 0 or _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1
                                mem[_11895 + ceil32(return_data.size)] = _11938
                                require _11922 + (32 * _11938) + 32 <= return_data.size
                                mem[_11895 + ceil32(return_data.size) + 32 len ceil32(32 * _11938)] = mem[_11895 + _11922 + 32 len ceil32(32 * _11938)]
                                var99002 = _11895 + ceil32(return_data.size) + ceil32(32 * _11938) + 32
                                if 1 >= _11938:
                                    revert with 0, 50
                                _15495 = mem[_11895 + ceil32(return_data.size) + 64]
                                _15519 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15519]:
                                    revert with 0, 50
                                mem[_15519 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_15519]:
                                    revert with 0, 50
                                mem[_15519 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_15519 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15519 + 100] = _15495
                                mem[_15519 + 132] = 64
                                mem[_15519 + 164] = mem[_15519]
                                idx = 0
                                s = _15519 + 32
                                t = _15519 + 196
                                while idx < mem[_15519]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15519 + (32 * mem[_15519]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18740 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18758 = mem[_18740]
                                require mem[_18740] <= test266151307()
                                require _18740 + mem[_18740] + 31 < _18740 + return_data.size
                                _18774 = mem[_18740 + mem[_18740]]
                                if mem[_18740 + mem[_18740]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_18740 + mem[_18740]]) + 1 < 0 or _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1
                                mem[_18740 + ceil32(return_data.size)] = _18774
                                require _18758 + (32 * _18774) + 32 <= return_data.size
                                mem[_18740 + ceil32(return_data.size) + 32 len ceil32(32 * _18774)] = mem[_18740 + _18758 + 32 len ceil32(32 * _18774)]
                                if 1 >= _18774:
                                    revert with 0, 50
                                _21225 = mem[_18740 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21350 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21360 = mem[_21350]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21350]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21664 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21718 = mem[_21664]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21886 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21886] > !_21718:
                                            revert with 0, 17
                                        if mem[_21886] + _21718 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360 > -1 / mem[_21886] + _21718:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21886] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360) + (_21718 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21665 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21720 = mem[_21665]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21887 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21887] > !_21720:
                                            revert with 0, 17
                                        if mem[_21887] + _21720 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360 > -1 / mem[_21887] + _21720:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21887] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360) + (_21720 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21360) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21392 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21443 = mem[_21392]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21392]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21862 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21936 = mem[_21862]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22098 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22098] > !_21936:
                                                revert with 0, 17
                                            if mem[_22098] + _21936 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443 > -1 / mem[_22098] + _21936:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22098] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) + (_21936 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21863 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21938 = mem[_21863]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22099 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22099] > !_21938:
                                                revert with 0, 17
                                            if mem[_22099] + _21938 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443 > -1 / mem[_22099] + _21938:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22099] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) + (_21938 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22828 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22839 = mem[_22828]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22828]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22948 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22978 = mem[_22948]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23077 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23077] > !_22978:
                                                revert with 0, 17
                                            if mem[_23077] + _22978 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839 > -1 / mem[_23077] + _22978:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23077] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) + (_22978 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22949 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22980 = mem[_22949]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23078 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23078] > !_22980:
                                                revert with 0, 17
                                            if mem[_23078] + _22980 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839 > -1 / mem[_23078] + _22980:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) + (_22980 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12052 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12052]:
                                        revert with 0, 50
                                    mem[_12052 + 32] = token1Address
                                    if 1 >= mem[_12052]:
                                        revert with 0, 50
                                    mem[_12052 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12052 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12052 + 100] = 1
                                    mem[_12052 + 132] = 64
                                    mem[_12052 + 164] = mem[_12052]
                                    idx = 0
                                    u = _12052 + 32
                                    v = _12052 + 196
                                    while idx < mem[_12052]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12052 + (32 * mem[_12052]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15540 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15573 = mem[_15540]
                                    require mem[_15540] <= test266151307()
                                    require _15540 + mem[_15540] + 31 < _15540 + return_data.size
                                    _15597 = mem[_15540 + mem[_15540]]
                                    if mem[_15540 + mem[_15540]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15540 + mem[_15540]]) + 1 < 0 or _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1
                                    mem[_15540 + ceil32(return_data.size)] = _15597
                                    require _15573 + (32 * _15597) + 32 <= return_data.size
                                    mem[_15540 + ceil32(return_data.size) + 32 len ceil32(32 * _15597)] = mem[_15540 + _15573 + 32 len ceil32(32 * _15597)]
                                    var110002 = _15540 + ceil32(return_data.size) + ceil32(32 * _15597) + 32
                                    if 1 >= _15597:
                                        revert with 0, 50
                                    _18703 = mem[_15540 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18921 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18935 = mem[_18921]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18921]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19241 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19296 = mem[_19241]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19500 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19500] > !_19296:
                                                revert with 0, 17
                                            if mem[_19500] + _19296 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935 > -1 / mem[_19500] + _19296:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19500] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935) + (_19296 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19242 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19298 = mem[_19242]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19501 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19501] > !_19298:
                                                revert with 0, 17
                                            if mem[_19501] + _19298 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935 > -1 / mem[_19501] + _19298:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19501] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935) + (_19298 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18935) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18978 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19011 = mem[_18978]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18978]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19470 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19559 = mem[_19470]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19780 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19780] > !_19559:
                                                    revert with 0, 17
                                                if mem[_19780] + _19559 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011 > -1 / mem[_19780] + _19559:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19780] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011) + (_19559 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19471 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19561 = mem[_19471]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19781 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19781] > !_19561:
                                                    revert with 0, 17
                                                if mem[_19781] + _19561 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011 > -1 / mem[_19781] + _19561:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19781] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011) + (_19561 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19011) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21297 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21317 = mem[_21297]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21297]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21491 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21530 = mem[_21491]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21687 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21687] > !_21530:
                                                    revert with 0, 17
                                                if mem[_21687] + _21530 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317 > -1 / mem[_21687] + _21530:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21687] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) + (_21530 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21492 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21532 = mem[_21492]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21688 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21688] > !_21532:
                                                    revert with 0, 17
                                                if mem[_21688] + _21532 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317 > -1 / mem[_21688] + _21532:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21688] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) + (_21532 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12119 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12119]:
                                            revert with 0, 50
                                        mem[_12119 + 32] = token1Address
                                        if 1 >= mem[_12119]:
                                            revert with 0, 50
                                        mem[_12119 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12119 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12119 + 100] = 10^stor259
                                        mem[_12119 + 132] = 64
                                        mem[_12119 + 164] = mem[_12119]
                                        idx = 0
                                        u = _12119 + 32
                                        v = _12119 + 196
                                        while idx < mem[_12119]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12119 + (32 * mem[_12119]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15539 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15572 = mem[_15539]
                                        require mem[_15539] <= test266151307()
                                        require _15539 + mem[_15539] + 31 < _15539 + return_data.size
                                        _15596 = mem[_15539 + mem[_15539]]
                                        if mem[_15539 + mem[_15539]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15539 + mem[_15539]]) + 1 < 0 or _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1
                                        mem[_15539 + ceil32(return_data.size)] = _15596
                                        require _15572 + (32 * _15596) + 32 <= return_data.size
                                        mem[_15539 + ceil32(return_data.size) + 32 len ceil32(32 * _15596)] = mem[_15539 + _15572 + 32 len ceil32(32 * _15596)]
                                        var115002 = _15539 + ceil32(return_data.size) + ceil32(32 * _15596) + 32
                                        if 1 >= _15596:
                                            revert with 0, 50
                                        _18702 = mem[_15539 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18920 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18934 = mem[_18920]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18920]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19239 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19293 = mem[_19239]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19498 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19498] > !_19293:
                                                    revert with 0, 17
                                                if mem[_19498] + _19293 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934 > -1 / mem[_19498] + _19293:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19498] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934) + (_19293 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19240 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19295 = mem[_19240]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19499 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19499] > !_19295:
                                                    revert with 0, 17
                                                if mem[_19499] + _19295 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934 > -1 / mem[_19499] + _19295:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19499] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934) + (_19295 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18934) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18977 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19008 = mem[_18977]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18977]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19468 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19552 = mem[_19468]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19775 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19775] > !_19552:
                                                        revert with 0, 17
                                                    if mem[_19775] + _19552 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008 > -1 / mem[_19775] + _19552:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19775] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008) + (_19552 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19469 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19554 = mem[_19469]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19776 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19776] > !_19554:
                                                        revert with 0, 17
                                                    if mem[_19776] + _19554 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008 > -1 / mem[_19776] + _19554:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19776] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008) + (_19554 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19008) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21296 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21316 = mem[_21296]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21296]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21489 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21527 = mem[_21489]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21685 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21685] > !_21527:
                                                        revert with 0, 17
                                                    if mem[_21685] + _21527 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316 > -1 / mem[_21685] + _21527:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21685] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) + (_21527 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21490 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21529 = mem[_21490]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21686 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21686] > !_21529:
                                                        revert with 0, 17
                                                    if mem[_21686] + _21529 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316 > -1 / mem[_21686] + _21529:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21686] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) + (_21529 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _15559 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 32] = token1Address
                                        if 1 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15559 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15559 + 100] = u * v
                                        mem[_15559 + 132] = 64
                                        mem[_15559 + 164] = mem[_15559]
                                        idx = 0
                                        u = _15559 + 32
                                        v = _15559 + 196
                                        while idx < mem[_15559]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15559 + (32 * mem[_15559]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18738 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18756 = mem[_18738]
                                        require mem[_18738] <= test266151307()
                                        require _18738 + mem[_18738] + 31 < _18738 + return_data.size
                                        _18772 = mem[_18738 + mem[_18738]]
                                        if mem[_18738 + mem[_18738]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18738 + mem[_18738]]) + 1 < 0 or _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1
                                        mem[_18738 + ceil32(return_data.size)] = _18772
                                        require _18756 + (32 * _18772) + 32 <= return_data.size
                                        mem[_18738 + ceil32(return_data.size) + 32 len ceil32(32 * _18772)] = mem[_18738 + _18756 + 32 len ceil32(32 * _18772)]
                                        if 1 >= _18772:
                                            revert with 0, 50
                                        _21223 = mem[_18738 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21349 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21359 = mem[_21349]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21349]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21662 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21715 = mem[_21662]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21883 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21883] > !_21715:
                                                    revert with 0, 17
                                                if mem[_21883] + _21715 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359 > -1 / mem[_21883] + _21715:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21883] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359) + (_21715 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21663 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21717 = mem[_21663]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21884 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21884] > !_21717:
                                                    revert with 0, 17
                                                if mem[_21884] + _21717 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359 > -1 / mem[_21884] + _21717:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21884] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359) + (_21717 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21359) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21391 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21428 = mem[_21391]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21391]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21860 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21929 = mem[_21860]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22093 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22093] > !_21929:
                                                        revert with 0, 17
                                                    if mem[_22093] + _21929 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428 > -1 / mem[_22093] + _21929:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22093] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) + (_21929 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21861 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21931 = mem[_21861]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22094 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22094] > !_21931:
                                                        revert with 0, 17
                                                    if mem[_22094] + _21931 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428 > -1 / mem[_22094] + _21931:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22094] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) + (_21931 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22827 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22838 = mem[_22827]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22827]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22945 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22974 = mem[_22945]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23075 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23075] > !_22974:
                                                        revert with 0, 17
                                                    if mem[_23075] + _22974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838 > -1 / mem[_23075] + _22974:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23075] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) + (_22974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22946 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22976 = mem[_22946]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23076 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23076] > !_22976:
                                                        revert with 0, 17
                                                    if mem[_23076] + _22976 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838 > -1 / mem[_23076] + _22976:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23076] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) + (_22976 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) / 10^18
                            else:
                                _11967 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11967]:
                                    revert with 0, 50
                                mem[_11967 + 32] = token1Address
                                if 1 >= mem[_11967]:
                                    revert with 0, 50
                                mem[_11967 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_11967 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11967 + 100] = 10^18
                                mem[_11967 + 132] = 64
                                mem[_11967 + 164] = mem[_11967]
                                idx = 0
                                u = _11967 + 32
                                v = _11967 + 196
                                while idx < mem[_11967]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11967 + (32 * mem[_11967]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15541 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15574 = mem[_15541]
                                require mem[_15541] <= test266151307()
                                require _15541 + mem[_15541] + 31 < _15541 + return_data.size
                                _15598 = mem[_15541 + mem[_15541]]
                                if mem[_15541 + mem[_15541]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15541 + mem[_15541]]) + 1 < 0 or _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1
                                mem[_15541 + ceil32(return_data.size)] = _15598
                                require _15574 + (32 * _15598) + 32 <= return_data.size
                                mem[_15541 + ceil32(return_data.size) + 32 len ceil32(32 * _15598)] = mem[_15541 + _15574 + 32 len ceil32(32 * _15598)]
                                var104002 = _15541 + ceil32(return_data.size) + ceil32(32 * _15598) + 32
                                if 1 >= _15598:
                                    revert with 0, 50
                                _18704 = mem[_15541 + ceil32(return_data.size) + 64]
                                _18725 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18725 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18725 + 100] = _18704
                                mem[_18725 + 132] = 64
                                mem[_18725 + 164] = mem[_18725]
                                idx = 0
                                u = _18725 + 32
                                v = _18725 + 196
                                while idx < mem[_18725]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18725 + (32 * mem[_18725]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21237 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21243 = mem[_21237]
                                require mem[_21237] <= test266151307()
                                require _21237 + mem[_21237] + 31 < _21237 + return_data.size
                                _21249 = mem[_21237 + mem[_21237]]
                                if mem[_21237 + mem[_21237]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21237 + mem[_21237]]) + 1 < 0 or _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1
                                mem[_21237 + ceil32(return_data.size)] = _21249
                                require _21243 + (32 * _21249) + 32 <= return_data.size
                                mem[_21237 + ceil32(return_data.size) + 32 len ceil32(32 * _21249)] = mem[_21237 + _21243 + 32 len ceil32(32 * _21249)]
                                if 1 >= _21249:
                                    revert with 0, 50
                                _22795 = mem[_21237 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22857 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22862 = mem[_22857]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22857]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23062 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23096 = mem[_23062]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23182 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23182] > !_23096:
                                            revert with 0, 17
                                        if mem[_23182] + _23096 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862 > -1 / mem[_23182] + _23096:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23182] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) + (_23096 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23063 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23098 = mem[_23063]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23183 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23183] > !_23098:
                                            revert with 0, 17
                                        if mem[_23183] + _23098 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862 > -1 / mem[_23183] + _23098:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23183] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) + (_23098 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22877 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22910 = mem[_22877]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22877]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23171 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23211 = mem[_23171]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23283 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23283] > !_23211:
                                                revert with 0, 17
                                            if mem[_23283] + _23211 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910 > -1 / mem[_23283] + _23211:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23283] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) + (_23211 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23172 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23213 = mem[_23172]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23284 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23284] > !_23213:
                                                revert with 0, 17
                                            if mem[_23284] + _23213 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910 > -1 / mem[_23284] + _23213:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23284] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) + (_23213 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23520 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23525 = mem[_23520]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23520]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23564 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23578 = mem[_23564]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23616 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23616] > !_23578:
                                                revert with 0, 17
                                            if mem[_23616] + _23578 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525 > -1 / mem[_23616] + _23578:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23616] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) + (_23578 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23565 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23580 = mem[_23565]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23617 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23617] > !_23580:
                                                revert with 0, 17
                                            if mem[_23617] + _23580 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525 > -1 / mem[_23617] + _23580:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23617] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) + (_23580 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7988 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _7991 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _7988 + (32 * _7991) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7991)] = mem[ceil32(return_data.size) + _7988 + 224 len ceil32(32 * _7991)]
                    if 1 >= _7991:
                        revert with 0, 50
                    _11876 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12105 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12105]:
                                    revert with 0, 50
                                mem[_12105 + 32] = token1Address
                                if 1 >= mem[_12105]:
                                    revert with 0, 50
                                mem[_12105 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12105 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12105 + 100] = 1
                                mem[_12105 + 132] = 64
                                mem[_12105 + 164] = mem[_12105]
                                idx = 0
                                s = _12105 + 32
                                t = _12105 + 196
                                while idx < mem[_12105]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12105 + (32 * mem[_12105]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15535 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15569 = mem[_15535]
                                require mem[_15535] <= test266151307()
                                require _15535 + mem[_15535] + 31 < _15535 + return_data.size
                                _15593 = mem[_15535 + mem[_15535]]
                                if mem[_15535 + mem[_15535]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15535 + mem[_15535]]) + 1 < 0 or _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1
                                mem[_15535 + ceil32(return_data.size)] = _15593
                                require _15569 + (32 * _15593) + 32 <= return_data.size
                                mem[_15535 + ceil32(return_data.size) + 32 len ceil32(32 * _15593)] = mem[_15535 + _15569 + 32 len ceil32(32 * _15593)]
                                if 1 >= _15593:
                                    revert with 0, 50
                                _18697 = mem[_15535 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18919 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18933 = mem[_18919]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18919]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19237 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19290 = mem[_19237]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19495 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19495] > !_19290:
                                            revert with 0, 17
                                        if mem[_19495] + _19290 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933 > -1 / mem[_19495] + _19290:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19495] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933) + (_19290 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19238 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19292 = mem[_19238]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19496 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19496] > !_19292:
                                            revert with 0, 17
                                        if mem[_19496] + _19292 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933 > -1 / mem[_19496] + _19292:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19496] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933) + (_19292 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18933) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18975 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19005 = mem[_18975]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18975]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19466 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19545 = mem[_19466]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19769 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19769] > !_19545:
                                                revert with 0, 17
                                            if mem[_19769] + _19545 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005 > -1 / mem[_19769] + _19545:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19769] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005) + (_19545 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19467 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19547 = mem[_19467]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19770 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19770] > !_19547:
                                                revert with 0, 17
                                            if mem[_19770] + _19547 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005 > -1 / mem[_19770] + _19547:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19770] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005) + (_19547 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19005) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21294 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21315 = mem[_21294]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21294]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21486 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21523 = mem[_21486]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21682 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21682] > !_21523:
                                                revert with 0, 17
                                            if mem[_21682] + _21523 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315 > -1 / mem[_21682] + _21523:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21682] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) + (_21523 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21487 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21525 = mem[_21487]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21683 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21683] > !_21525:
                                                revert with 0, 17
                                            if mem[_21683] + _21525 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315 > -1 / mem[_21683] + _21525:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21683] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) + (_21525 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12166 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12166]:
                                        revert with 0, 50
                                    mem[_12166 + 32] = token1Address
                                    if 1 >= mem[_12166]:
                                        revert with 0, 50
                                    mem[_12166 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12166 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12166 + 100] = 10^stor259
                                    mem[_12166 + 132] = 64
                                    mem[_12166 + 164] = mem[_12166]
                                    idx = 0
                                    s = _12166 + 32
                                    t = _12166 + 196
                                    while idx < mem[_12166]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12166 + (32 * mem[_12166]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15534 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15568 = mem[_15534]
                                    require mem[_15534] <= test266151307()
                                    require _15534 + mem[_15534] + 31 < _15534 + return_data.size
                                    _15592 = mem[_15534 + mem[_15534]]
                                    if mem[_15534 + mem[_15534]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15534 + mem[_15534]]) + 1 < 0 or _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1
                                    mem[_15534 + ceil32(return_data.size)] = _15592
                                    require _15568 + (32 * _15592) + 32 <= return_data.size
                                    mem[_15534 + ceil32(return_data.size) + 32 len ceil32(32 * _15592)] = mem[_15534 + _15568 + 32 len ceil32(32 * _15592)]
                                    var110002 = _15534 + ceil32(return_data.size) + ceil32(32 * _15592) + 32
                                    if 1 >= _15592:
                                        revert with 0, 50
                                    _18696 = mem[_15534 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18918 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18932 = mem[_18918]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18918]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19235 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19287 = mem[_19235]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19493 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19493] > !_19287:
                                                revert with 0, 17
                                            if mem[_19493] + _19287 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932 > -1 / mem[_19493] + _19287:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19493] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932) + (_19287 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19236 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19289 = mem[_19236]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19494 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19494] > !_19289:
                                                revert with 0, 17
                                            if mem[_19494] + _19289 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932 > -1 / mem[_19494] + _19289:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19494] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932) + (_19289 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18932) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18974 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19002 = mem[_18974]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18974]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19464 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19538 = mem[_19464]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19764 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19764] > !_19538:
                                                    revert with 0, 17
                                                if mem[_19764] + _19538 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002 > -1 / mem[_19764] + _19538:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19764] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002) + (_19538 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19465 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19540 = mem[_19465]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19765 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19765] > !_19540:
                                                    revert with 0, 17
                                                if mem[_19765] + _19540 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002 > -1 / mem[_19765] + _19540:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19765] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002) + (_19540 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19002) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21293 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21314 = mem[_21293]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21293]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21484 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21520 = mem[_21484]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21680 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21680] > !_21520:
                                                    revert with 0, 17
                                                if mem[_21680] + _21520 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314 > -1 / mem[_21680] + _21520:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21680] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) + (_21520 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21485 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21522 = mem[_21485]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21681 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21681] > !_21522:
                                                    revert with 0, 17
                                                if mem[_21681] + _21522 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314 > -1 / mem[_21681] + _21522:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21681] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) + (_21522 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _15557 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15557]:
                                        revert with 0, 50
                                    mem[_15557 + 32] = token1Address
                                    if 1 >= mem[_15557]:
                                        revert with 0, 50
                                    mem[_15557 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15557 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15557 + 100] = s * t
                                    mem[_15557 + 132] = 64
                                    mem[_15557 + 164] = mem[_15557]
                                    idx = 0
                                    s = _15557 + 32
                                    t = _15557 + 196
                                    while idx < mem[_15557]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15557 + (32 * mem[_15557]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18736 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18754 = mem[_18736]
                                    require mem[_18736] <= test266151307()
                                    require _18736 + mem[_18736] + 31 < _18736 + return_data.size
                                    _18770 = mem[_18736 + mem[_18736]]
                                    if mem[_18736 + mem[_18736]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18736 + mem[_18736]]) + 1 < 0 or _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1
                                    mem[_18736 + ceil32(return_data.size)] = _18770
                                    require _18754 + (32 * _18770) + 32 <= return_data.size
                                    mem[_18736 + ceil32(return_data.size) + 32 len ceil32(32 * _18770)] = mem[_18736 + _18754 + 32 len ceil32(32 * _18770)]
                                    var115002 = _18736 + ceil32(return_data.size) + ceil32(32 * _18770) + 32
                                    if 1 >= _18770:
                                        revert with 0, 50
                                    _21221 = mem[_18736 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21358 = mem[_21348]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21348]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21660 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21712 = mem[_21660]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21880 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21880] > !_21712:
                                                revert with 0, 17
                                            if mem[_21880] + _21712 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358 > -1 / mem[_21880] + _21712:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21880] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358) + (_21712 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21661 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21714 = mem[_21661]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21881 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21881] > !_21714:
                                                revert with 0, 17
                                            if mem[_21881] + _21714 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358 > -1 / mem[_21881] + _21714:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21881] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358) + (_21714 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21358) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21390 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21417 = mem[_21390]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21390]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21858 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21922 = mem[_21858]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22088 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22088] > !_21922:
                                                    revert with 0, 17
                                                if mem[_22088] + _21922 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417 > -1 / mem[_22088] + _21922:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22088] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) + (_21922 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21859 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21924 = mem[_21859]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22089 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22089] > !_21924:
                                                    revert with 0, 17
                                                if mem[_22089] + _21924 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417 > -1 / mem[_22089] + _21924:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22089] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) + (_21924 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22826 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22837 = mem[_22826]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22826]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22942 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22970 = mem[_22942]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23073 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23073] > !_22970:
                                                    revert with 0, 17
                                                if mem[_23073] + _22970 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837 > -1 / mem[_23073] + _22970:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23073] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) + (_22970 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22943 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22972 = mem[_22943]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23074] > !_22972:
                                                    revert with 0, 17
                                                if mem[_23074] + _22972 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837 > -1 / mem[_23074] + _22972:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23074] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) + (_22972 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) / 10^18
                        else:
                            _12003 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12003]:
                                revert with 0, 50
                            mem[_12003 + 32] = token1Address
                            if 1 >= mem[_12003]:
                                revert with 0, 50
                            mem[_12003 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12003 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12003 + 100] = 10^18
                            mem[_12003 + 132] = 64
                            mem[_12003 + 164] = mem[_12003]
                            idx = 0
                            s = _12003 + 32
                            t = _12003 + 196
                            while idx < mem[_12003]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12003 + (32 * mem[_12003]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15536 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15570 = mem[_15536]
                            require mem[_15536] <= test266151307()
                            require _15536 + mem[_15536] + 31 < _15536 + return_data.size
                            _15594 = mem[_15536 + mem[_15536]]
                            if mem[_15536 + mem[_15536]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15536 + mem[_15536]]) + 1 < 0 or _15536 + ceil32(return_data.size) + ceil32(32 * mem[_15536 + mem[_15536]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15536 + ceil32(return_data.size) + ceil32(32 * mem[_15536 + mem[_15536]]) + 1
                            mem[_15536 + ceil32(return_data.size)] = _15594
                            require _15570 + (32 * _15594) + 32 <= return_data.size
                            mem[_15536 + ceil32(return_data.size) + 32 len ceil32(32 * _15594)] = mem[_15536 + _15570 + 32 len ceil32(32 * _15594)]
                            var99002 = _15536 + ceil32(return_data.size) + ceil32(32 * _15594) + 32
                            var99005 = _15536 + _15570 + ceil32(32 * _15594) + 32
                            if 1 >= _15594:
                                revert with 0, 50
                            _18698 = mem[_15536 + ceil32(return_data.size) + 64]
                            _18723 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18723]:
                                revert with 0, 50
                            mem[_18723 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18723]:
                                revert with 0, 50
                            mem[_18723 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18723 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18723 + 100] = _18698
                            mem[_18723 + 132] = 64
                            mem[_18723 + 164] = mem[_18723]
                            idx = 0
                            s = _18723 + 32
                            t = _18723 + 196
                            while idx < mem[_18723]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18723 + (32 * mem[_18723]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21236 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21242 = mem[_21236]
                            require mem[_21236] <= test266151307()
                            require _21236 + mem[_21236] + 31 < _21236 + return_data.size
                            _21248 = mem[_21236 + mem[_21236]]
                            if mem[_21236 + mem[_21236]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21236 + mem[_21236]]) + 1 < 0 or _21236 + ceil32(return_data.size) + ceil32(32 * mem[_21236 + mem[_21236]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21236 + ceil32(return_data.size) + ceil32(32 * mem[_21236 + mem[_21236]]) + 1
                            mem[_21236 + ceil32(return_data.size)] = _21248
                            require _21242 + (32 * _21248) + 32 <= return_data.size
                            mem[_21236 + ceil32(return_data.size) + 32 len ceil32(32 * _21248)] = mem[_21236 + _21242 + 32 len ceil32(32 * _21248)]
                            if 1 >= _21248:
                                revert with 0, 50
                            _22794 = mem[_21236 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22856 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22861 = mem[_22856]
                                if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22856]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23060 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23093 = mem[_23060]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23180 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23180] > !_23093:
                                        revert with 0, 17
                                    if mem[_23180] + _23093 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861 > -1 / mem[_23180] + _23093:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23180] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) + (_23093 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23061 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23095 = mem[_23061]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23181 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23181] > !_23095:
                                        revert with 0, 17
                                    if mem[_23181] + _23095 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861 > -1 / mem[_23181] + _23095:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23181] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) + (_23095 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22876 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22903 = mem[_22876]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22876]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23169 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23204 = mem[_23169]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23278 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23278] > !_23204:
                                            revert with 0, 17
                                        if mem[_23278] + _23204 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903 > -1 / mem[_23278] + _23204:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23278] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) + (_23204 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23170 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23206 = mem[_23170]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23279 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23279] > !_23206:
                                            revert with 0, 17
                                        if mem[_23279] + _23206 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903 > -1 / mem[_23279] + _23206:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) + (_23206 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23519 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23524 = mem[_23519]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23519]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23562 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23575 = mem[_23562]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23614 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23614] > !_23575:
                                            revert with 0, 17
                                        if mem[_23614] + _23575 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524 > -1 / mem[_23614] + _23575:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23614] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) + (_23575 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23563 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23577 = mem[_23563]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23615 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23615] > !_23577:
                                            revert with 0, 17
                                        if mem[_23615] + _23577 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524 > -1 / mem[_23615] + _23577:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23615] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) + (_23577 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12164 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12164]:
                                        revert with 0, 50
                                    mem[_12164 + 32] = token1Address
                                    if 1 >= mem[_12164]:
                                        revert with 0, 50
                                    mem[_12164 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12164 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12164 + 100] = 1
                                    mem[_12164 + 132] = 64
                                    mem[_12164 + 164] = mem[_12164]
                                    idx = 0
                                    s = _12164 + 32
                                    t = _12164 + 196
                                    while idx < mem[_12164]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12164 + (32 * mem[_12164]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15530 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15565 = mem[_15530]
                                    require mem[_15530] <= test266151307()
                                    require _15530 + mem[_15530] + 31 < _15530 + return_data.size
                                    _15589 = mem[_15530 + mem[_15530]]
                                    if mem[_15530 + mem[_15530]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15530 + mem[_15530]]) + 1 < 0 or _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1
                                    mem[_15530 + ceil32(return_data.size)] = _15589
                                    require _15565 + (32 * _15589) + 32 <= return_data.size
                                    mem[_15530 + ceil32(return_data.size) + 32 len ceil32(32 * _15589)] = mem[_15530 + _15565 + 32 len ceil32(32 * _15589)]
                                    var110002 = _15530 + ceil32(return_data.size) + ceil32(32 * _15589) + 32
                                    if 1 >= _15589:
                                        revert with 0, 50
                                    _18691 = mem[_15530 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18917 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18931 = mem[_18917]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18917]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19233 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19284 = mem[_19233]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19490 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19490] > !_19284:
                                                revert with 0, 17
                                            if mem[_19490] + _19284 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931 > -1 / mem[_19490] + _19284:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19490] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931) + (_19284 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19234 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19286 = mem[_19234]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19491 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19491] > !_19286:
                                                revert with 0, 17
                                            if mem[_19491] + _19286 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931 > -1 / mem[_19491] + _19286:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19491] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931) + (_19286 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18931) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18972 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18999 = mem[_18972]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18972]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19462 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19531 = mem[_19462]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19758 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19758] > !_19531:
                                                    revert with 0, 17
                                                if mem[_19758] + _19531 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999 > -1 / mem[_19758] + _19531:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19758] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999) + (_19531 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19463 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19533 = mem[_19463]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19759 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19759] > !_19533:
                                                    revert with 0, 17
                                                if mem[_19759] + _19533 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999 > -1 / mem[_19759] + _19533:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19759] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999) + (_19533 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _18999) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21291 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21313 = mem[_21291]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21291]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21481 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21516 = mem[_21481]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21677 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21677] > !_21516:
                                                    revert with 0, 17
                                                if mem[_21677] + _21516 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313 > -1 / mem[_21677] + _21516:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21677] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) + (_21516 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21482 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21518 = mem[_21482]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21678 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21678] > !_21518:
                                                    revert with 0, 17
                                                if mem[_21678] + _21518 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313 > -1 / mem[_21678] + _21518:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21678] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) + (_21518 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12274 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12274]:
                                            revert with 0, 50
                                        mem[_12274 + 32] = token1Address
                                        if 1 >= mem[_12274]:
                                            revert with 0, 50
                                        mem[_12274 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12274 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12274 + 100] = 10^stor259
                                        mem[_12274 + 132] = 64
                                        mem[_12274 + 164] = mem[_12274]
                                        idx = 0
                                        s = _12274 + 32
                                        t = _12274 + 196
                                        while idx < mem[_12274]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12274 + (32 * mem[_12274]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15529 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15564 = mem[_15529]
                                        require mem[_15529] <= test266151307()
                                        require _15529 + mem[_15529] + 31 < _15529 + return_data.size
                                        _15588 = mem[_15529 + mem[_15529]]
                                        if mem[_15529 + mem[_15529]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15529 + mem[_15529]]) + 1 < 0 or _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1
                                        mem[_15529 + ceil32(return_data.size)] = _15588
                                        require _15564 + (32 * _15588) + 32 <= return_data.size
                                        mem[_15529 + ceil32(return_data.size) + 32 len ceil32(32 * _15588)] = mem[_15529 + _15564 + 32 len ceil32(32 * _15588)]
                                        var115002 = _15529 + ceil32(return_data.size) + ceil32(32 * _15588) + 32
                                        if 1 >= _15588:
                                            revert with 0, 50
                                        _18690 = mem[_15529 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18916 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18930 = mem[_18916]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18916]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19231 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19281 = mem[_19231]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19488 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19488] > !_19281:
                                                    revert with 0, 17
                                                if mem[_19488] + _19281 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930 > -1 / mem[_19488] + _19281:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19488] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930) + (_19281 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19232 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19283 = mem[_19232]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19489 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19489] > !_19283:
                                                    revert with 0, 17
                                                if mem[_19489] + _19283 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930 > -1 / mem[_19489] + _19283:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19489] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930) + (_19283 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18930) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18971 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18996 = mem[_18971]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18971]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19460 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19524 = mem[_19460]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19753 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19753] > !_19524:
                                                        revert with 0, 17
                                                    if mem[_19753] + _19524 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996 > -1 / mem[_19753] + _19524:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19753] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996) + (_19524 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19461 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19526 = mem[_19461]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19754 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19754] > !_19526:
                                                        revert with 0, 17
                                                    if mem[_19754] + _19526 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996 > -1 / mem[_19754] + _19526:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19754] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996) + (_19526 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18996) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21290 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21312 = mem[_21290]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21290]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21479 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21513 = mem[_21479]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21675 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21675] > !_21513:
                                                        revert with 0, 17
                                                    if mem[_21675] + _21513 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312 > -1 / mem[_21675] + _21513:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21675] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) + (_21513 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21480 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21515 = mem[_21480]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21676 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21676] > !_21515:
                                                        revert with 0, 17
                                                    if mem[_21676] + _21515 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312 > -1 / mem[_21676] + _21515:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21676] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) + (_21515 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _15555 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15555]:
                                            revert with 0, 50
                                        mem[_15555 + 32] = token1Address
                                        if 1 >= mem[_15555]:
                                            revert with 0, 50
                                        mem[_15555 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15555 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15555 + 100] = s * t
                                        mem[_15555 + 132] = 64
                                        mem[_15555 + 164] = mem[_15555]
                                        idx = 0
                                        s = _15555 + 32
                                        t = _15555 + 196
                                        while idx < mem[_15555]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15555 + (32 * mem[_15555]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18734 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18752 = mem[_18734]
                                        require mem[_18734] <= test266151307()
                                        require _18734 + mem[_18734] + 31 < _18734 + return_data.size
                                        _18768 = mem[_18734 + mem[_18734]]
                                        if mem[_18734 + mem[_18734]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18734 + mem[_18734]]) + 1 < 0 or _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1
                                        mem[_18734 + ceil32(return_data.size)] = _18768
                                        require _18752 + (32 * _18768) + 32 <= return_data.size
                                        mem[_18734 + ceil32(return_data.size) + 32 len ceil32(32 * _18768)] = mem[_18734 + _18752 + 32 len ceil32(32 * _18768)]
                                        var120002 = _18734 + ceil32(return_data.size) + ceil32(32 * _18768) + 32
                                        if 1 >= _18768:
                                            revert with 0, 50
                                        _21219 = mem[_18734 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21347 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21357 = mem[_21347]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21347]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21658 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21709 = mem[_21658]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21877 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21877] > !_21709:
                                                    revert with 0, 17
                                                if mem[_21877] + _21709 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357 > -1 / mem[_21877] + _21709:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21877] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357) + (_21709 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21659 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21711 = mem[_21659]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21878 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21878] > !_21711:
                                                    revert with 0, 17
                                                if mem[_21878] + _21711 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357 > -1 / mem[_21878] + _21711:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21878] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357) + (_21711 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21357) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21389 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21406 = mem[_21389]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21389]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21856 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21915 = mem[_21856]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22083 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22083] > !_21915:
                                                        revert with 0, 17
                                                    if mem[_22083] + _21915 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406 > -1 / mem[_22083] + _21915:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) + (_21915 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21857 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21917 = mem[_21857]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22084 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22084] > !_21917:
                                                        revert with 0, 17
                                                    if mem[_22084] + _21917 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406 > -1 / mem[_22084] + _21917:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22084] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) + (_21917 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22825 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22836 = mem[_22825]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22825]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22939 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22966 = mem[_22939]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23071 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23071] > !_22966:
                                                        revert with 0, 17
                                                    if mem[_23071] + _22966 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836 > -1 / mem[_23071] + _22966:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23071] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) + (_22966 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22940 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22968 = mem[_22940]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23072] > !_22968:
                                                        revert with 0, 17
                                                    if mem[_23072] + _22968 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836 > -1 / mem[_23072] + _22968:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) + (_22968 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) / 10^18
                            else:
                                _12091 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12091]:
                                    revert with 0, 50
                                mem[_12091 + 32] = token1Address
                                if 1 >= mem[_12091]:
                                    revert with 0, 50
                                mem[_12091 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12091 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12091 + 100] = 10^18
                                mem[_12091 + 132] = 64
                                mem[_12091 + 164] = mem[_12091]
                                idx = 0
                                s = _12091 + 32
                                t = _12091 + 196
                                while idx < mem[_12091]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12091 + (32 * mem[_12091]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15531 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15566 = mem[_15531]
                                require mem[_15531] <= test266151307()
                                require _15531 + mem[_15531] + 31 < _15531 + return_data.size
                                _15590 = mem[_15531 + mem[_15531]]
                                if mem[_15531 + mem[_15531]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15531 + mem[_15531]]) + 1 < 0 or _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1
                                mem[_15531 + ceil32(return_data.size)] = _15590
                                require _15566 + (32 * _15590) + 32 <= return_data.size
                                mem[_15531 + ceil32(return_data.size) + 32 len ceil32(32 * _15590)] = mem[_15531 + _15566 + 32 len ceil32(32 * _15590)]
                                var104002 = _15531 + ceil32(return_data.size) + ceil32(32 * _15590) + 32
                                if 1 >= _15590:
                                    revert with 0, 50
                                _18692 = mem[_15531 + ceil32(return_data.size) + 64]
                                _18721 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18721]:
                                    revert with 0, 50
                                mem[_18721 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18721]:
                                    revert with 0, 50
                                mem[_18721 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18721 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18721 + 100] = _18692
                                mem[_18721 + 132] = 64
                                mem[_18721 + 164] = mem[_18721]
                                idx = 0
                                s = _18721 + 32
                                t = _18721 + 196
                                while idx < mem[_18721]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18721 + (32 * mem[_18721]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21235 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21241 = mem[_21235]
                                require mem[_21235] <= test266151307()
                                require _21235 + mem[_21235] + 31 < _21235 + return_data.size
                                _21247 = mem[_21235 + mem[_21235]]
                                if mem[_21235 + mem[_21235]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21235 + mem[_21235]]) + 1 < 0 or _21235 + ceil32(return_data.size) + ceil32(32 * mem[_21235 + mem[_21235]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21235 + ceil32(return_data.size) + ceil32(32 * mem[_21235 + mem[_21235]]) + 1
                                mem[_21235 + ceil32(return_data.size)] = _21247
                                require _21241 + (32 * _21247) + 32 <= return_data.size
                                mem[_21235 + ceil32(return_data.size) + 32 len ceil32(32 * _21247)] = mem[_21235 + _21241 + 32 len ceil32(32 * _21247)]
                                if 1 >= _21247:
                                    revert with 0, 50
                                _22793 = mem[_21235 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22855 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22860 = mem[_22855]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22855]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23058 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23090 = mem[_23058]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23178 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23178] > !_23090:
                                            revert with 0, 17
                                        if mem[_23178] + _23090 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860 > -1 / mem[_23178] + _23090:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23178] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) + (_23090 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23059 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23092 = mem[_23059]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23179 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23179] > !_23092:
                                            revert with 0, 17
                                        if mem[_23179] + _23092 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860 > -1 / mem[_23179] + _23092:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23179] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) + (_23092 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22875 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22896 = mem[_22875]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22875]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23167 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23197 = mem[_23167]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23273 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23273] > !_23197:
                                                revert with 0, 17
                                            if mem[_23273] + _23197 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896 > -1 / mem[_23273] + _23197:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23273] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) + (_23197 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23168 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23199 = mem[_23168]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23274 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23274] > !_23199:
                                                revert with 0, 17
                                            if mem[_23274] + _23199 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896 > -1 / mem[_23274] + _23199:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) + (_23199 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23518 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23523 = mem[_23518]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23518]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23560 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23572 = mem[_23560]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23612 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23612] > !_23572:
                                                revert with 0, 17
                                            if mem[_23612] + _23572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523 > -1 / mem[_23612] + _23572:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23612] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) + (_23572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23561 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23574 = mem[_23561]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23613 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23613] > !_23574:
                                                revert with 0, 17
                                            if mem[_23613] + _23574 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523 > -1 / mem[_23613] + _23574:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23613] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) + (_23574 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _15728 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15728]:
                                        revert with 0, 50
                                    mem[_15728 + 32] = token1Address
                                    if 1 >= mem[_15728]:
                                        revert with 0, 50
                                    mem[_15728 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15728 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15728 + 100] = 1
                                    mem[_15728 + 132] = 64
                                    mem[_15728 + 164] = mem[_15728]
                                    idx = 0
                                    u = _15728 + 32
                                    v = _15728 + 196
                                    while idx < mem[_15728]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15728 + (32 * mem[_15728]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18732 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18750 = mem[_18732]
                                    require mem[_18732] <= test266151307()
                                    require _18732 + mem[_18732] + 31 < _18732 + return_data.size
                                    _18766 = mem[_18732 + mem[_18732]]
                                    if mem[_18732 + mem[_18732]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18732 + mem[_18732]]) + 1 < 0 or _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1
                                    mem[_18732 + ceil32(return_data.size)] = _18766
                                    require _18750 + (32 * _18766) + 32 <= return_data.size
                                    mem[_18732 + ceil32(return_data.size) + 32 len ceil32(32 * _18766)] = mem[_18732 + _18750 + 32 len ceil32(32 * _18766)]
                                    var115002 = _18732 + ceil32(return_data.size) + ceil32(32 * _18766) + 32
                                    if 1 >= _18766:
                                        revert with 0, 50
                                    _21215 = mem[_18732 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21346 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21356 = mem[_21346]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21346]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21656 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21706 = mem[_21656]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21875 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21875] > !_21706:
                                                revert with 0, 17
                                            if mem[_21875] + _21706 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356 > -1 / mem[_21875] + _21706:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21875] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) + (_21706 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21657 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21708 = mem[_21657]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21876 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21876] > !_21708:
                                                revert with 0, 17
                                            if mem[_21876] + _21708 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356 > -1 / mem[_21876] + _21708:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21876] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) + (_21708 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21387 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21403 = mem[_21387]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21387]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21854 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21908 = mem[_21854]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22077 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22077] > !_21908:
                                                    revert with 0, 17
                                                if mem[_22077] + _21908 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403 > -1 / mem[_22077] + _21908:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22077] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) + (_21908 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21855 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21910 = mem[_21855]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22078 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22078] > !_21910:
                                                    revert with 0, 17
                                                if mem[_22078] + _21910 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403 > -1 / mem[_22078] + _21910:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) + (_21910 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22823 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22835 = mem[_22823]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22823]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22937 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22963 = mem[_22937]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23068 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23068] > !_22963:
                                                    revert with 0, 17
                                                if mem[_23068] + _22963 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835 > -1 / mem[_23068] + _22963:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23068] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) + (_22963 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22938 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22965 = mem[_22938]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23069 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23069] > !_22965:
                                                    revert with 0, 17
                                                if mem[_23069] + _22965 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835 > -1 / mem[_23069] + _22965:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23069] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) + (_22965 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _15798 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15798]:
                                            revert with 0, 50
                                        mem[_15798 + 32] = token1Address
                                        if 1 >= mem[_15798]:
                                            revert with 0, 50
                                        mem[_15798 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15798 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15798 + 100] = 10^stor259
                                        mem[_15798 + 132] = 64
                                        mem[_15798 + 164] = mem[_15798]
                                        idx = 0
                                        u = _15798 + 32
                                        v = _15798 + 196
                                        while idx < mem[_15798]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15798 + (32 * mem[_15798]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18731 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18749 = mem[_18731]
                                        require mem[_18731] <= test266151307()
                                        require _18731 + mem[_18731] + 31 < _18731 + return_data.size
                                        _18765 = mem[_18731 + mem[_18731]]
                                        if mem[_18731 + mem[_18731]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18731 + mem[_18731]]) + 1 < 0 or _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1
                                        mem[_18731 + ceil32(return_data.size)] = _18765
                                        require _18749 + (32 * _18765) + 32 <= return_data.size
                                        mem[_18731 + ceil32(return_data.size) + 32 len ceil32(32 * _18765)] = mem[_18731 + _18749 + 32 len ceil32(32 * _18765)]
                                        var120002 = _18731 + ceil32(return_data.size) + ceil32(32 * _18765) + 32
                                        if 1 >= _18765:
                                            revert with 0, 50
                                        _21214 = mem[_18731 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21345 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21355 = mem[_21345]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21345]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21654 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21703 = mem[_21654]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21873 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21873] > !_21703:
                                                    revert with 0, 17
                                                if mem[_21873] + _21703 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355 > -1 / mem[_21873] + _21703:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21873] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) + (_21703 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21655 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21705 = mem[_21655]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21874 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21874] > !_21705:
                                                    revert with 0, 17
                                                if mem[_21874] + _21705 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355 > -1 / mem[_21874] + _21705:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21874] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) + (_21705 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21386 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21400 = mem[_21386]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21386]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21852 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21901 = mem[_21852]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22072] > !_21901:
                                                        revert with 0, 17
                                                    if mem[_22072] + _21901 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400 > -1 / mem[_22072] + _21901:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) + (_21901 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21853 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21903 = mem[_21853]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22073 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22073] > !_21903:
                                                        revert with 0, 17
                                                    if mem[_22073] + _21903 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400 > -1 / mem[_22073] + _21903:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22073] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) + (_21903 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22822 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22834 = mem[_22822]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22822]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22935 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22960 = mem[_22935]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23066 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23066] > !_22960:
                                                        revert with 0, 17
                                                    if mem[_23066] + _22960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834 > -1 / mem[_23066] + _22960:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23066] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) + (_22960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22936 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22962 = mem[_22936]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23067 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23067] > !_22962:
                                                        revert with 0, 17
                                                    if mem[_23067] + _22962 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834 > -1 / mem[_23067] + _22962:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23067] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) + (_22962 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _18746 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_18746]:
                                            revert with 0, 50
                                        mem[_18746 + 32] = token1Address
                                        if 1 >= mem[_18746]:
                                            revert with 0, 50
                                        mem[_18746 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_18746 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_18746 + 100] = u * v
                                        mem[_18746 + 132] = 64
                                        mem[_18746 + 164] = mem[_18746]
                                        idx = 0
                                        u = _18746 + 32
                                        v = _18746 + 196
                                        while idx < mem[_18746]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _18746 + (32 * mem[_18746]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21233 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21239 = mem[_21233]
                                        require mem[_21233] <= test266151307()
                                        require _21233 + mem[_21233] + 31 < _21233 + return_data.size
                                        _21245 = mem[_21233 + mem[_21233]]
                                        if mem[_21233 + mem[_21233]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_21233 + mem[_21233]]) + 1 < 0 or _21233 + ceil32(return_data.size) + ceil32(32 * mem[_21233 + mem[_21233]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _21233 + ceil32(return_data.size) + ceil32(32 * mem[_21233 + mem[_21233]]) + 1
                                        mem[_21233 + ceil32(return_data.size)] = _21245
                                        require _21239 + (32 * _21245) + 32 <= return_data.size
                                        mem[_21233 + ceil32(return_data.size) + 32 len ceil32(32 * _21245)] = mem[_21233 + _21239 + 32 len ceil32(32 * _21245)]
                                        if 1 >= _21245:
                                            revert with 0, 50
                                        _22791 = mem[_21233 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22854 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22859 = mem[_22854]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22854]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23056 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23087 = mem[_23056]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23175 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23175] > !_23087:
                                                    revert with 0, 17
                                                if mem[_23175] + _23087 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859 > -1 / mem[_23175] + _23087:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23175] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) + (_23087 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23057 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23089 = mem[_23057]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23176 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23176] > !_23089:
                                                    revert with 0, 17
                                                if mem[_23176] + _23089 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859 > -1 / mem[_23176] + _23089:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23176] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) + (_23089 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22874 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22881 = mem[_22874]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22874]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23165 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23190 = mem[_23165]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23268 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23268] > !_23190:
                                                        revert with 0, 17
                                                    if mem[_23268] + _23190 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881 > -1 / mem[_23268] + _23190:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23268] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) + (_23190 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23166 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23192 = mem[_23166]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23269 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23269] > !_23192:
                                                        revert with 0, 17
                                                    if mem[_23269] + _23192 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881 > -1 / mem[_23269] + _23192:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23269] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) + (_23192 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23517 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23522 = mem[_23517]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23517]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23557 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23568 = mem[_23557]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23610 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23610] > !_23568:
                                                        revert with 0, 17
                                                    if mem[_23610] + _23568 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522 > -1 / mem[_23610] + _23568:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23610] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) + (_23568 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23558 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23570 = mem[_23558]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23611 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23611] > !_23570:
                                                        revert with 0, 17
                                                    if mem[_23611] + _23570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522 > -1 / mem[_23611] + _23570:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23611] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) + (_23570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) / 10^18
                            else:
                                _15635 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15635]:
                                    revert with 0, 50
                                mem[_15635 + 32] = token1Address
                                if 1 >= mem[_15635]:
                                    revert with 0, 50
                                mem[_15635 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_15635 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15635 + 100] = 10^18
                                mem[_15635 + 132] = 64
                                mem[_15635 + 164] = mem[_15635]
                                idx = 0
                                u = _15635 + 32
                                v = _15635 + 196
                                while idx < mem[_15635]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15635 + (32 * mem[_15635]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18733 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18751 = mem[_18733]
                                require mem[_18733] <= test266151307()
                                require _18733 + mem[_18733] + 31 < _18733 + return_data.size
                                _18767 = mem[_18733 + mem[_18733]]
                                if mem[_18733 + mem[_18733]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_18733 + mem[_18733]]) + 1 < 0 or _18733 + ceil32(return_data.size) + ceil32(32 * mem[_18733 + mem[_18733]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _18733 + ceil32(return_data.size) + ceil32(32 * mem[_18733 + mem[_18733]]) + 1
                                mem[_18733 + ceil32(return_data.size)] = _18767
                                require _18751 + (32 * _18767) + 32 <= return_data.size
                                mem[_18733 + ceil32(return_data.size) + 32 len ceil32(32 * _18767)] = mem[_18733 + _18751 + 32 len ceil32(32 * _18767)]
                                var109002 = _18733 + ceil32(return_data.size) + ceil32(32 * _18767) + 32
                                if 1 >= _18767:
                                    revert with 0, 50
                                _21216 = mem[_18733 + ceil32(return_data.size) + 64]
                                _21231 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21231]:
                                    revert with 0, 50
                                mem[_21231 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21231]:
                                    revert with 0, 50
                                mem[_21231 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21231 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21231 + 100] = _21216
                                mem[_21231 + 132] = 64
                                mem[_21231 + 164] = mem[_21231]
                                idx = 0
                                u = _21231 + 32
                                v = _21231 + 196
                                while idx < mem[_21231]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21231 + (32 * mem[_21231]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22797 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22798 = mem[_22797]
                                require mem[_22797] <= test266151307()
                                require _22797 + mem[_22797] + 31 < _22797 + return_data.size
                                _22799 = mem[_22797 + mem[_22797]]
                                if mem[_22797 + mem[_22797]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_22797 + mem[_22797]]) + 1 < 0 or _22797 + ceil32(return_data.size) + ceil32(32 * mem[_22797 + mem[_22797]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _22797 + ceil32(return_data.size) + ceil32(32 * mem[_22797 + mem[_22797]]) + 1
                                mem[_22797 + ceil32(return_data.size)] = _22799
                                require _22798 + (32 * _22799) + 32 <= return_data.size
                                mem[_22797 + ceil32(return_data.size) + 32 len ceil32(32 * _22799)] = mem[_22797 + _22798 + 32 len ceil32(32 * _22799)]
                                if 1 >= _22799:
                                    revert with 0, 50
                                _23506 = mem[_22797 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23529 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23530 = mem[_23529]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23529]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23608 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23620 = mem[_23608]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23643 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23643] > !_23620:
                                            revert with 0, 17
                                        if mem[_23643] + _23620 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530 > -1 / mem[_23643] + _23620:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23643] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) + (_23620 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23609 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23622 = mem[_23609]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23644 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23644] > !_23622:
                                            revert with 0, 17
                                        if mem[_23644] + _23622 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530 > -1 / mem[_23644] + _23622:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23644] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) + (_23622 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23533 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23540 = mem[_23533]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23533]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23641 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23649 = mem[_23641]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23663 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23663] > !_23649:
                                                revert with 0, 17
                                            if mem[_23663] + _23649 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540 > -1 / mem[_23663] + _23649:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23663] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) + (_23649 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23642 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23651 = mem[_23642]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23664 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23664] > !_23651:
                                                revert with 0, 17
                                            if mem[_23664] + _23651 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540 > -1 / mem[_23664] + _23651:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23664] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) + (_23651 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23709 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23710 = mem[_23709]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23709]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23715 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23717 = mem[_23715]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23724 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23724] > !_23717:
                                                revert with 0, 17
                                            if mem[_23724] + _23717 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710 > -1 / mem[_23724] + _23717:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23724] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) + (_23717 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23716 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23719 = mem[_23716]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23725 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23725] > !_23719:
                                                revert with 0, 17
                                            if mem[_23725] + _23719 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710 > -1 / mem[_23725] + _23719:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23725] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) + (_23719 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) / 10^18
    return memory
      from mem[64]
       len 32
}

function getAllPoolInUSD() {
    require ext_code.size(0xa77230d17318075983913bc2145db16c7366156)
    staticcall 0xa77230d17318075983913bc2145db16c7366156.latestAnswer() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 'ChainLink error'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = token1Address
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = 1
            mem[(2 * ceil32(return_data.size)) + 228] = 64
            mem[(2 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4035 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _4044 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            require _4035 + (32 * _4044) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4044)] = mem[(2 * ceil32(return_data.size)) + _4035 + 224 len ceil32(32 * _4044)]
            if 1 >= _4044:
                revert with 0, 50
            _7974 = mem[(4 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8015 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8035 = mem[_8015]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7974) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8015]:
                    revert with 0, 18
                if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / mem[_8015] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / mem[_8015]:
                    revert with 0, 17
                if not sub_abddf82e:
                    mem[mem[64] + 36] = this.address
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8345 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8394 = mem[_8345]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8527 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8527] > !_8394:
                        revert with 0, 17
                    if mem[_8527] + _8394 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8527] + _8394:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8527] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6) + (_8394 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stakingRewardAddress)
                    staticcall stakingRewardAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8346 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8396 = mem[_8346]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8528 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8528] > !_8396:
                        revert with 0, 17
                    if mem[_8528] + _8396 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8528] + _8396:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8528] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6) + (_8396 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974) / _8035 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8061 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8097 = mem[_8061]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8061]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / mem[_8061] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / mem[_8061]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8499 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8565 = mem[_8499]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8690 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8690] > !_8565:
                            revert with 0, 17
                        if mem[_8690] + _8565 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8690] + _8565:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8690] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6) + (_8565 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8500 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8567 = mem[_8500]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8691 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8691] > !_8567:
                            revert with 0, 17
                        if mem[_8691] + _8567 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8691] + _8567:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8691] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6) + (_8567 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / 10^stor259) / _8097 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12014 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12065 = mem[_12014]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12014]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / mem[_12014] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / mem[_12014]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12359 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12422 = mem[_12359]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12544 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12544] > !_12422:
                            revert with 0, 17
                        if mem[_12544] + _12422 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12544] + _12422:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12544] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6) + (_12422 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12360 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12424 = mem[_12360]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12545 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12545] > !_12424:
                            revert with 0, 17
                        if mem[_12545] + _12424 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12545] + _12424:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12545] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6) + (_12424 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7974 / s * t) / _12065 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 10^stor259
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4034 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4043 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require _4034 + (32 * _4043) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4043)] = mem[(2 * ceil32(return_data.size)) + _4034 + 224 len ceil32(32 * _4043)]
                if 1 >= _4043:
                    revert with 0, 50
                _7973 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8014 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8034 = mem[_8014]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7973) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8014]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / mem[_8014] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / mem[_8014]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8343 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8391 = mem[_8343]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8525 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8525] > !_8391:
                            revert with 0, 17
                        if mem[_8525] + _8391 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8525] + _8391:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8525] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6) + (_8391 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8344 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8393 = mem[_8344]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8526 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8526] > !_8393:
                            revert with 0, 17
                        if mem[_8526] + _8393 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8526] + _8393:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8526] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6) + (_8393 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973) / _8034 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8060 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8094 = mem[_8060]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8060]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / mem[_8060] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / mem[_8060]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8497 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8558 = mem[_8497]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8685 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8685] > !_8558:
                                revert with 0, 17
                            if mem[_8685] + _8558 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8685] + _8558:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8685] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6) + (_8558 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8498 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8560 = mem[_8498]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8686 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8686] > !_8560:
                                revert with 0, 17
                            if mem[_8686] + _8560 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8686] + _8560:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8686] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6) + (_8560 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / 10^stor259) / _8094 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12013 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12064 = mem[_12013]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12013]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / mem[_12013] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / mem[_12013]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12357 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12419 = mem[_12357]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12542 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12542] > !_12419:
                                revert with 0, 17
                            if mem[_12542] + _12419 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12542] + _12419:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12542] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6) + (_12419 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12358 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12421 = mem[_12358]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12543 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12543] > !_12421:
                                revert with 0, 17
                            if mem[_12543] + _12421 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12543] + _12421:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12543] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6) + (_12421 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7973 / s * t) / _12064 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = s * t
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                u = (2 * ceil32(return_data.size)) + 128
                v = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _7980 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _7983 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require _7980 + (32 * _7983) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7983)] = mem[(2 * ceil32(return_data.size)) + _7980 + 224 len ceil32(32 * _7983)]
                if 1 >= _7983:
                    revert with 0, 50
                _11880 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12080 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12106 = mem[_12080]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11880) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12080]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / mem[_12080] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / mem[_12080]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12477 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12539 = mem[_12477]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12639 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12639] > !_12539:
                            revert with 0, 17
                        if mem[_12639] + _12539 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12639] + _12539:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12639] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6) + (_12539 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12478 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12541 = mem[_12478]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12640 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12640] > !_12541:
                            revert with 0, 17
                        if mem[_12640] + _12541 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12640] + _12541:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12640] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6) + (_12541 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880) / _12106 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12141 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12181 = mem[_12141]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12141]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / mem[_12141] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / mem[_12141]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12619 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12662 = mem[_12619]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12734 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12734] > !_12662:
                                revert with 0, 17
                            if mem[_12734] + _12662 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12734] + _12662:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12734] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6) + (_12662 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12620 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12664 = mem[_12620]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12735 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12735] > !_12664:
                                revert with 0, 17
                            if mem[_12735] + _12664 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12735] + _12664:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12735] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6) + (_12664 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / 10^stor259) / _12181 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15690 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15737 = mem[_15690]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_15690]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / mem[_15690] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / mem[_15690]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15994 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16038 = mem[_15994]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16167 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16167] > !_16038:
                                revert with 0, 17
                            if mem[_16167] + _16038 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16167] + _16038:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16167] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6) + (_16038 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15995 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16040 = mem[_15995]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16168 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16168] > !_16040:
                                revert with 0, 17
                            if mem[_16168] + _16040 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16168] + _16040:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16168] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6) + (_16040 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11880 / s * t) / _15737 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4032 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4041 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require _4032 + (32 * _4041) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4041)] = mem[(2 * ceil32(return_data.size)) + _4032 + 224 len ceil32(32 * _4041)]
                if 1 >= _4041:
                    revert with 0, 50
                _7971 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8013 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8033 = mem[_8013]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7971) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8013]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / mem[_8013] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / mem[_8013]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8341 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8388 = mem[_8341]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8523 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8523] > !_8388:
                            revert with 0, 17
                        if mem[_8523] + _8388 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8523] + _8388:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8523] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6) + (_8388 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8342 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8390 = mem[_8342]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8524 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8524] > !_8390:
                            revert with 0, 17
                        if mem[_8524] + _8390 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8524] + _8390:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8524] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6) + (_8390 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971) / _8033 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8059 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8091 = mem[_8059]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8059]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / mem[_8059] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / mem[_8059]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8494 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8551 = mem[_8494]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8680 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8680] > !_8551:
                                revert with 0, 17
                            if mem[_8680] + _8551 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8680] + _8551:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8680] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6) + (_8551 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8495 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8553 = mem[_8495]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8681 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8681] > !_8553:
                                revert with 0, 17
                            if mem[_8681] + _8553 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8681] + _8553:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8681] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6) + (_8553 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / 10^stor258) / _8091 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12012 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12061 = mem[_12012]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12012]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / mem[_12012] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / mem[_12012]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12355 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12412 = mem[_12355]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12537 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12537] > !_12412:
                                revert with 0, 17
                            if mem[_12537] + _12412 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12537] + _12412:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12537] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6) + (_12412 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12356 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12414 = mem[_12356]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12538 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12538] > !_12414:
                                revert with 0, 17
                            if mem[_12538] + _12414 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12538] + _12414:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12538] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6) + (_12414 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7971 / s * t) / _12061 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4031 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4040 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4031 + (32 * _4040) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4040)] = mem[(2 * ceil32(return_data.size)) + _4031 + 224 len ceil32(32 * _4040)]
                    if 1 >= _4040:
                        revert with 0, 50
                    _7970 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8012 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8032 = mem[_8012]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7970) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8012]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / mem[_8012] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / mem[_8012]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8339 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8385 = mem[_8339]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8521 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8521] > !_8385:
                                revert with 0, 17
                            if mem[_8521] + _8385 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8521] + _8385:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8521] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6) + (_8385 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8340 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8387 = mem[_8340]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8522 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8522] > !_8387:
                                revert with 0, 17
                            if mem[_8522] + _8387 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8522] + _8387:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8522] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6) + (_8387 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970) / _8032 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8058 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8088 = mem[_8058]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8058]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / mem[_8058] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / mem[_8058]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8492 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8544 = mem[_8492]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8675 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8675] > !_8544:
                                    revert with 0, 17
                                if mem[_8675] + _8544 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8675] + _8544:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8675] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6) + (_8544 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8493 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _8546 = mem[_8493]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8676 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8676] > !_8546:
                                    revert with 0, 17
                                if mem[_8676] + _8546 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8676] + _8546:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8676] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6) + (_8546 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / 10^stor258) / _8088 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12011 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12060 = mem[_12011]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12011]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / mem[_12011] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / mem[_12011]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12353 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12409 = mem[_12353]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12535 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12535] > !_12409:
                                    revert with 0, 17
                                if mem[_12535] + _12409 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12535] + _12409:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12535] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6) + (_12409 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12354 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12411 = mem[_12354]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12536 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12536] > !_12411:
                                    revert with 0, 17
                                if mem[_12536] + _12411 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12536] + _12411:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12536] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6) + (_12411 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7970 / s * t) / _12060 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7979 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _7982 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _7979 + (32 * _7982) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7982)] = mem[(2 * ceil32(return_data.size)) + _7979 + 224 len ceil32(32 * _7982)]
                    if 1 >= _7982:
                        revert with 0, 50
                    _11879 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12079 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12105 = mem[_12079]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11879) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12079]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / mem[_12079] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / mem[_12079]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12467 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12532 = mem[_12467]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12637 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12637] > !_12532:
                                revert with 0, 17
                            if mem[_12637] + _12532 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12637] + _12532:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12637] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6) + (_12532 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12468 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12534 = mem[_12468]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12638 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12638] > !_12534:
                                revert with 0, 17
                            if mem[_12638] + _12534 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12638] + _12534:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12638] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6) + (_12534 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879) / _12105 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12140 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12178 = mem[_12140]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12140]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / mem[_12140] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / mem[_12140]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12617 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12655 = mem[_12617]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12729 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12729] > !_12655:
                                    revert with 0, 17
                                if mem[_12729] + _12655 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12729] + _12655:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12729] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6) + (_12655 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12618 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12657 = mem[_12618]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12730 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12730] > !_12657:
                                    revert with 0, 17
                                if mem[_12730] + _12657 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12730] + _12657:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12730] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6) + (_12657 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / 10^stor258) / _12178 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15689 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15736 = mem[_15689]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_15689]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / mem[_15689] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / mem[_15689]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15992 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16035 = mem[_15992]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16165 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16165] > !_16035:
                                    revert with 0, 17
                                if mem[_16165] + _16035 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16165] + _16035:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16165] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6) + (_16035 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15993 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16037 = mem[_15993]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16166 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16166] > !_16037:
                                    revert with 0, 17
                                if mem[_16166] + _16037 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16166] + _16037:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16166] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6) + (_16037 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11879 / s * t) / _15736 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4029 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4038 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require _4029 + (32 * _4038) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4038)] = mem[(2 * ceil32(return_data.size)) + _4029 + 224 len ceil32(32 * _4038)]
                if 1 >= _4038:
                    revert with 0, 50
                _7968 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8030 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8030]:
                                revert with 0, 50
                            mem[_8030 + 32] = token1Address
                            if 1 >= mem[_8030]:
                                revert with 0, 50
                            mem[_8030 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8030 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8030 + 100] = 1
                            mem[_8030 + 132] = 64
                            mem[_8030 + 164] = mem[_8030]
                            idx = 0
                            s = _8030 + 32
                            t = _8030 + 196
                            while idx < mem[_8030]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8030 + (32 * mem[_8030]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11899 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11923 = mem[_11899]
                            require mem[_11899] <= test266151307()
                            require _11899 + mem[_11899] + 31 < _11899 + return_data.size
                            _11939 = mem[_11899 + mem[_11899]]
                            if mem[_11899 + mem[_11899]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11899 + mem[_11899]]) + 1 < 0 or _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1
                            mem[_11899 + ceil32(return_data.size)] = _11939
                            require _11923 + (32 * _11939) + 32 <= return_data.size
                            mem[_11899 + ceil32(return_data.size) + 32 len ceil32(32 * _11939)] = mem[_11899 + _11923 + 32 len ceil32(32 * _11939)]
                            if 1 >= _11939:
                                revert with 0, 50
                            _15505 = mem[_11899 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15781 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15803 = mem[_15781]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15505) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_15781]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / mem[_15781] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / mem[_15781]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16127 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16198 = mem[_16127]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16349 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16349] > !_16198:
                                        revert with 0, 17
                                    if mem[_16349] + _16198 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16349] + _16198:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16349] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6) + (_16198 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16128 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16200 = mem[_16128]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16350 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16350] > !_16200:
                                        revert with 0, 17
                                    if mem[_16350] + _16200 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16350] + _16200:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16350] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6) + (_16200 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505) / _15803 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15844 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15891 = mem[_15844]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15844]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / mem[_15844] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / mem[_15844]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16325 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16412 = mem[_16325]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16552 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16552] > !_16412:
                                            revert with 0, 17
                                        if mem[_16552] + _16412 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16552] + _16412:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16552] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6) + (_16412 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16326 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16414 = mem[_16326]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16553 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16553] > !_16414:
                                            revert with 0, 17
                                        if mem[_16553] + _16414 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16553] + _16414:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16553] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6) + (_16414 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / 10^stor259) / _15891 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18845 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18874 = mem[_18845]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18845]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / mem[_18845] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / mem[_18845]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19125 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19176 = mem[_19125]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19339 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19339] > !_19176:
                                            revert with 0, 17
                                        if mem[_19339] + _19176 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19339] + _19176:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19339] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6) + (_19176 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19126 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19178 = mem[_19126]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19340 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19340] > !_19178:
                                            revert with 0, 17
                                        if mem[_19340] + _19178 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19340] + _19178:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19340] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6) + (_19178 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15505 / s * t) / _18874 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8082 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8082]:
                                    revert with 0, 50
                                mem[_8082 + 32] = token1Address
                                if 1 >= mem[_8082]:
                                    revert with 0, 50
                                mem[_8082 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8082 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8082 + 100] = 10^stor259
                                mem[_8082 + 132] = 64
                                mem[_8082 + 164] = mem[_8082]
                                idx = 0
                                s = _8082 + 32
                                t = _8082 + 196
                                while idx < mem[_8082]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8082 + (32 * mem[_8082]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11898 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11922 = mem[_11898]
                                require mem[_11898] <= test266151307()
                                require _11898 + mem[_11898] + 31 < _11898 + return_data.size
                                _11938 = mem[_11898 + mem[_11898]]
                                if mem[_11898 + mem[_11898]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11898 + mem[_11898]]) + 1 < 0 or _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1
                                mem[_11898 + ceil32(return_data.size)] = _11938
                                require _11922 + (32 * _11938) + 32 <= return_data.size
                                mem[_11898 + ceil32(return_data.size) + 32 len ceil32(32 * _11938)] = mem[_11898 + _11922 + 32 len ceil32(32 * _11938)]
                                var107002 = _11898 + ceil32(return_data.size) + ceil32(32 * _11938) + 32
                                if 1 >= _11938:
                                    revert with 0, 50
                                _15504 = mem[_11898 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15780 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15802 = mem[_15780]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15504) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15780]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / mem[_15780] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / mem[_15780]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16125 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16195 = mem[_16125]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16347 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16347] > !_16195:
                                            revert with 0, 17
                                        if mem[_16347] + _16195 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16347] + _16195:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16347] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6) + (_16195 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16126 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16197 = mem[_16126]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16348] > !_16197:
                                            revert with 0, 17
                                        if mem[_16348] + _16197 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16348] + _16197:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16348] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6) + (_16197 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15802 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15843 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15888 = mem[_15843]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15843]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / mem[_15843] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / mem[_15843]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16323 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16405 = mem[_16323]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16547 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16547] > !_16405:
                                                revert with 0, 17
                                            if mem[_16547] + _16405 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16547] + _16405:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16547] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6) + (_16405 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16324 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16407 = mem[_16324]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16548 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16548] > !_16407:
                                                revert with 0, 17
                                            if mem[_16548] + _16407 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16548] + _16407:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16548] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6) + (_16407 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18844 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18873 = mem[_18844]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18844]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / mem[_18844] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / mem[_18844]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19123 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19173 = mem[_19123]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19337 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19337] > !_19173:
                                                revert with 0, 17
                                            if mem[_19337] + _19173 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19337] + _19173:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19337] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6) + (_19173 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19124 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19175 = mem[_19124]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19338 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19338] > !_19175:
                                                revert with 0, 17
                                            if mem[_19338] + _19175 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19338] + _19175:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19338] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6) + (_19175 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18873 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _11907 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11907]:
                                    revert with 0, 50
                                mem[_11907 + 32] = token1Address
                                if 1 >= mem[_11907]:
                                    revert with 0, 50
                                mem[_11907 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_11907 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11907 + 100] = s * t
                                mem[_11907 + 132] = 64
                                mem[_11907 + 164] = mem[_11907]
                                idx = 0
                                s = _11907 + 32
                                t = _11907 + 196
                                while idx < mem[_11907]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11907 + (32 * mem[_11907]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15543 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15575 = mem[_15543]
                                require mem[_15543] <= test266151307()
                                require _15543 + mem[_15543] + 31 < _15543 + return_data.size
                                _15599 = mem[_15543 + mem[_15543]]
                                if mem[_15543 + mem[_15543]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15543 + mem[_15543]]) + 1 < 0 or _15543 + ceil32(return_data.size) + ceil32(32 * mem[_15543 + mem[_15543]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15543 + ceil32(return_data.size) + ceil32(32 * mem[_15543 + mem[_15543]]) + 1
                                mem[_15543 + ceil32(return_data.size)] = _15599
                                require _15575 + (32 * _15599) + 32 <= return_data.size
                                mem[_15543 + ceil32(return_data.size) + 32 len ceil32(32 * _15599)] = mem[_15543 + _15575 + 32 len ceil32(32 * _15599)]
                                var112002 = _15543 + ceil32(return_data.size) + ceil32(32 * _15599) + 32
                                if 1 >= _15599:
                                    revert with 0, 50
                                _18709 = mem[_15543 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18917 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18931 = mem[_18917]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _18709) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18917]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / mem[_18917] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / mem[_18917]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19296 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19385 = mem[_19296]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19577 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19577] > !_19385:
                                            revert with 0, 17
                                        if mem[_19577] + _19385 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19577] + _19385:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19577] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6) + (_19385 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19297 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19387 = mem[_19297]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19578 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19578] > !_19387:
                                            revert with 0, 17
                                        if mem[_19578] + _19387 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19578] + _19387:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19578] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6) + (_19387 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18931 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18976 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19019 = mem[_18976]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18976]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / mem[_18976] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / mem[_18976]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19547 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19668 = mem[_19547]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19845 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19845] > !_19668:
                                                revert with 0, 17
                                            if mem[_19845] + _19668 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19845] + _19668:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19845] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6) + (_19668 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19548 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19670 = mem[_19548]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19846 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19846] > !_19670:
                                                revert with 0, 17
                                            if mem[_19846] + _19670 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19846] + _19670:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19846] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6) + (_19670 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19019 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21295 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21313 = mem[_21295]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21295]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / mem[_21295] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / mem[_21295]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21523 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21573 = mem[_21523]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21726 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21726] > !_21573:
                                                revert with 0, 17
                                            if mem[_21726] + _21573 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21726] + _21573:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21726] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6) + (_21573 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21524 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21575 = mem[_21524]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21727 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21727] > !_21575:
                                                revert with 0, 17
                                            if mem[_21727] + _21575 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21727] + _21575:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21727] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6) + (_21575 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21313 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        _7993 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_7993]:
                            revert with 0, 50
                        mem[_7993 + 32] = token1Address
                        if 1 >= mem[_7993]:
                            revert with 0, 50
                        mem[_7993 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_7993 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_7993 + 100] = 10^18
                        mem[_7993 + 132] = 64
                        mem[_7993 + 164] = mem[_7993]
                        idx = 0
                        s = _7993 + 32
                        t = _7993 + 196
                        while idx < mem[_7993]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _7993 + (32 * mem[_7993]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11900 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11924 = mem[_11900]
                        require mem[_11900] <= test266151307()
                        require _11900 + mem[_11900] + 31 < _11900 + return_data.size
                        _11940 = mem[_11900 + mem[_11900]]
                        if mem[_11900 + mem[_11900]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11900 + mem[_11900]]) + 1 < 0 or _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1
                        mem[_11900 + ceil32(return_data.size)] = _11940
                        require _11924 + (32 * _11940) + 32 <= return_data.size
                        mem[_11900 + ceil32(return_data.size) + 32 len ceil32(32 * _11940)] = mem[_11900 + _11924 + 32 len ceil32(32 * _11940)]
                        var96002 = _11900 + ceil32(return_data.size) + ceil32(32 * _11940) + 32
                        var96005 = _11900 + _11924 + ceil32(32 * _11940) + 32
                        if 1 >= _11940:
                            revert with 0, 50
                        _15506 = mem[_11900 + ceil32(return_data.size) + 64]
                        _15515 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_15515]:
                            revert with 0, 50
                        mem[_15515 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_15515]:
                            revert with 0, 50
                        mem[_15515 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_15515 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_15515 + 100] = _15506
                        mem[_15515 + 132] = 64
                        mem[_15515 + 164] = mem[_15515]
                        idx = 0
                        s = _15515 + 32
                        t = _15515 + 196
                        while idx < mem[_15515]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _15515 + (32 * mem[_15515]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _18735 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _18753 = mem[_18735]
                        require mem[_18735] <= test266151307()
                        require _18735 + mem[_18735] + 31 < _18735 + return_data.size
                        _18769 = mem[_18735 + mem[_18735]]
                        if mem[_18735 + mem[_18735]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_18735 + mem[_18735]]) + 1 < 0 or _18735 + ceil32(return_data.size) + ceil32(32 * mem[_18735 + mem[_18735]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _18735 + ceil32(return_data.size) + ceil32(32 * mem[_18735 + mem[_18735]]) + 1
                        mem[_18735 + ceil32(return_data.size)] = _18769
                        require _18753 + (32 * _18769) + 32 <= return_data.size
                        mem[_18735 + ceil32(return_data.size) + 32 len ceil32(32 * _18769)] = mem[_18735 + _18753 + 32 len ceil32(32 * _18769)]
                        if 1 >= _18769:
                            revert with 0, 50
                        _21220 = mem[_18735 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21344 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21354 = mem[_21344]
                            if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _21220) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_21344]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / mem[_21344] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / mem[_21344]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21687 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _21757 = mem[_21687]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21914 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21914] > !_21757:
                                    revert with 0, 17
                                if mem[_21914] + _21757 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21914] + _21757:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21914] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6) + (_21757 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21688 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21759 = mem[_21688]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21915 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21915] > !_21759:
                                    revert with 0, 17
                                if mem[_21915] + _21759 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21915] + _21759:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21915] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6) + (_21759 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220) / _21354 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21386 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21417 = mem[_21386]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21386]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / mem[_21386] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / mem[_21386]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21893 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21985 = mem[_21893]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22120 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22120] > !_21985:
                                        revert with 0, 17
                                    if mem[_22120] + _21985 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22120] + _21985:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22120] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6) + (_21985 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21894 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21987 = mem[_21894]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22121 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22121] > !_21987:
                                        revert with 0, 17
                                    if mem[_22121] + _21987 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22121] + _21987:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22121] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6) + (_21987 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / 10^stor259) / _21417 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7968 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22822 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22833 = mem[_22822]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7968) + (Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22822]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / mem[_22822] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / mem[_22822]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22955 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22987 = mem[_22955]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23082 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23082] > !_22987:
                                        revert with 0, 17
                                    if mem[_23082] + _22987 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23082] + _22987:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23082] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6) + (_22987 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22956 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22989 = mem[_22956]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23083 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23083] > !_22989:
                                        revert with 0, 17
                                    if mem[_23083] + _22989 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23083] + _22989:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6) + (_22989 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21220 / s * t) / _22833 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8080 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8080]:
                                    revert with 0, 50
                                mem[_8080 + 32] = token1Address
                                if 1 >= mem[_8080]:
                                    revert with 0, 50
                                mem[_8080 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8080 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8080 + 100] = 1
                                mem[_8080 + 132] = 64
                                mem[_8080 + 164] = mem[_8080]
                                idx = 0
                                s = _8080 + 32
                                t = _8080 + 196
                                while idx < mem[_8080]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8080 + (32 * mem[_8080]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11894 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11919 = mem[_11894]
                                require mem[_11894] <= test266151307()
                                require _11894 + mem[_11894] + 31 < _11894 + return_data.size
                                _11935 = mem[_11894 + mem[_11894]]
                                if mem[_11894 + mem[_11894]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11894 + mem[_11894]]) + 1 < 0 or _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1
                                mem[_11894 + ceil32(return_data.size)] = _11935
                                require _11919 + (32 * _11935) + 32 <= return_data.size
                                mem[_11894 + ceil32(return_data.size) + 32 len ceil32(32 * _11935)] = mem[_11894 + _11919 + 32 len ceil32(32 * _11935)]
                                var107002 = _11894 + ceil32(return_data.size) + ceil32(32 * _11935) + 32
                                if 1 >= _11935:
                                    revert with 0, 50
                                _15499 = mem[_11894 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15779 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15801 = mem[_15779]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15499) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15779]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / mem[_15779] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / mem[_15779]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16123 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16190 = mem[_16123]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16344 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16344] > !_16190:
                                            revert with 0, 17
                                        if mem[_16344] + _16190 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16344] + _16190:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16344] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6) + (_16190 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16124 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16192 = mem[_16124]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16345 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16345] > !_16192:
                                            revert with 0, 17
                                        if mem[_16345] + _16192 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16345] + _16192:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16345] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6) + (_16192 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15801 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15841 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15885 = mem[_15841]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15841]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / mem[_15841] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / mem[_15841]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16320 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16396 = mem[_16320]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16539 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16539] > !_16396:
                                                revert with 0, 17
                                            if mem[_16539] + _16396 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16539] + _16396:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16539] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6) + (_16396 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16321 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16398 = mem[_16321]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16540 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16540] > !_16398:
                                                revert with 0, 17
                                            if mem[_16540] + _16398 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16540] + _16398:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16540] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6) + (_16398 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15885 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18842 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18872 = mem[_18842]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18842]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / mem[_18842] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / mem[_18842]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19121 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19168 = mem[_19121]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19332 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19332] > !_19168:
                                                revert with 0, 17
                                            if mem[_19332] + _19168 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19332] + _19168:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19332] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6) + (_19168 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19122 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19170 = mem[_19122]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19333 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19333] > !_19170:
                                                revert with 0, 17
                                            if mem[_19333] + _19170 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19333] + _19170:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19333] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6) + (_19170 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18872 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8163 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8163]:
                                        revert with 0, 50
                                    mem[_8163 + 32] = token1Address
                                    if 1 >= mem[_8163]:
                                        revert with 0, 50
                                    mem[_8163 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8163 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8163 + 100] = 10^stor259
                                    mem[_8163 + 132] = 64
                                    mem[_8163 + 164] = mem[_8163]
                                    idx = 0
                                    s = _8163 + 32
                                    t = _8163 + 196
                                    while idx < mem[_8163]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8163 + (32 * mem[_8163]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11893 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11918 = mem[_11893]
                                    require mem[_11893] <= test266151307()
                                    require _11893 + mem[_11893] + 31 < _11893 + return_data.size
                                    _11934 = mem[_11893 + mem[_11893]]
                                    if mem[_11893 + mem[_11893]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11893 + mem[_11893]]) + 1 < 0 or _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1
                                    mem[_11893 + ceil32(return_data.size)] = _11934
                                    require _11918 + (32 * _11934) + 32 <= return_data.size
                                    mem[_11893 + ceil32(return_data.size) + 32 len ceil32(32 * _11934)] = mem[_11893 + _11918 + 32 len ceil32(32 * _11934)]
                                    var112002 = _11893 + ceil32(return_data.size) + ceil32(32 * _11934) + 32
                                    if 1 >= _11934:
                                        revert with 0, 50
                                    _15498 = mem[_11893 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15778 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15800 = mem[_15778]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15778]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / mem[_15778] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / mem[_15778]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16121 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16187 = mem[_16121]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16342 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16342] > !_16187:
                                                revert with 0, 17
                                            if mem[_16342] + _16187 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16342] + _16187:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16342] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6) + (_16187 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16122 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16189 = mem[_16122]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16343 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16343] > !_16189:
                                                revert with 0, 17
                                            if mem[_16343] + _16189 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16343] + _16189:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16343] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6) + (_16189 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15800 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15840 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15882 = mem[_15840]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15840]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / mem[_15840] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / mem[_15840]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16318 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16389 = mem[_16318]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16534 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16534] > !_16389:
                                                    revert with 0, 17
                                                if mem[_16534] + _16389 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16534] + _16389:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16534] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6) + (_16389 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16319 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16391 = mem[_16319]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16535 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16535] > !_16391:
                                                    revert with 0, 17
                                                if mem[_16535] + _16391 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16535] + _16391:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16535] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6) + (_16391 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15882 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18841 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18871 = mem[_18841]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18841]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / mem[_18841] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / mem[_18841]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19119 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19165 = mem[_19119]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19330 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19330] > !_19165:
                                                    revert with 0, 17
                                                if mem[_19330] + _19165 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19330] + _19165:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19330] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6) + (_19165 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19120 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19167 = mem[_19120]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19331 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19331] > !_19167:
                                                    revert with 0, 17
                                                if mem[_19331] + _19167 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19331] + _19167:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19331] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6) + (_19167 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18871 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11905 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11905]:
                                        revert with 0, 50
                                    mem[_11905 + 32] = token1Address
                                    if 1 >= mem[_11905]:
                                        revert with 0, 50
                                    mem[_11905 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11905 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11905 + 100] = s * t
                                    mem[_11905 + 132] = 64
                                    mem[_11905 + 164] = mem[_11905]
                                    idx = 0
                                    s = _11905 + 32
                                    t = _11905 + 196
                                    while idx < mem[_11905]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11905 + (32 * mem[_11905]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15541 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15573 = mem[_15541]
                                    require mem[_15541] <= test266151307()
                                    require _15541 + mem[_15541] + 31 < _15541 + return_data.size
                                    _15597 = mem[_15541 + mem[_15541]]
                                    if mem[_15541 + mem[_15541]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15541 + mem[_15541]]) + 1 < 0 or _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1
                                    mem[_15541 + ceil32(return_data.size)] = _15597
                                    require _15573 + (32 * _15597) + 32 <= return_data.size
                                    mem[_15541 + ceil32(return_data.size) + 32 len ceil32(32 * _15597)] = mem[_15541 + _15573 + 32 len ceil32(32 * _15597)]
                                    var117002 = _15541 + ceil32(return_data.size) + ceil32(32 * _15597) + 32
                                    if 1 >= _15597:
                                        revert with 0, 50
                                    _18707 = mem[_15541 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15541 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15541 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18916 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18930 = mem[_18916]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18916]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / mem[_18916] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / mem[_18916]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19294 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19382 = mem[_19294]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19575 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19575] > !_19382:
                                                revert with 0, 17
                                            if mem[_19575] + _19382 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19575] + _19382:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19575] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6) + (_19382 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19295 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19384 = mem[_19295]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19576 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19576] > !_19384:
                                                revert with 0, 17
                                            if mem[_19576] + _19384 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19576] + _19384:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19576] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6) + (_19384 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18930 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15541 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15541 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18975 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19016 = mem[_18975]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18975]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / mem[_18975] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / mem[_18975]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19544 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19661 = mem[_19544]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19840 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19840] > !_19661:
                                                    revert with 0, 17
                                                if mem[_19840] + _19661 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19840] + _19661:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6) + (_19661 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19545 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19663 = mem[_19545]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19841 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19841] > !_19663:
                                                    revert with 0, 17
                                                if mem[_19841] + _19663 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19841] + _19663:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19841] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6) + (_19663 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15541 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15541 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21294 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21312 = mem[_21294]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21294]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / mem[_21294] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / mem[_21294]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21521 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21570 = mem[_21521]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21724 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21724] > !_21570:
                                                    revert with 0, 17
                                                if mem[_21724] + _21570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21724] + _21570:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21724] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6) + (_21570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21522 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21572 = mem[_21522]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21725 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21725] > !_21572:
                                                    revert with 0, 17
                                                if mem[_21725] + _21572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21725] + _21572:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21725] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6) + (_21572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21312 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _8021 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8021]:
                                revert with 0, 50
                            mem[_8021 + 32] = token1Address
                            if 1 >= mem[_8021]:
                                revert with 0, 50
                            mem[_8021 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8021 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8021 + 100] = 10^18
                            mem[_8021 + 132] = 64
                            mem[_8021 + 164] = mem[_8021]
                            idx = 0
                            s = _8021 + 32
                            t = _8021 + 196
                            while idx < mem[_8021]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8021 + (32 * mem[_8021]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11895 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11920 = mem[_11895]
                            require mem[_11895] <= test266151307()
                            require _11895 + mem[_11895] + 31 < _11895 + return_data.size
                            _11936 = mem[_11895 + mem[_11895]]
                            if mem[_11895 + mem[_11895]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11895 + mem[_11895]]) + 1 < 0 or _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1
                            mem[_11895 + ceil32(return_data.size)] = _11936
                            require _11920 + (32 * _11936) + 32 <= return_data.size
                            mem[_11895 + ceil32(return_data.size) + 32 len ceil32(32 * _11936)] = mem[_11895 + _11920 + 32 len ceil32(32 * _11936)]
                            var101002 = _11895 + ceil32(return_data.size) + ceil32(32 * _11936) + 32
                            if 1 >= _11936:
                                revert with 0, 50
                            _15500 = mem[_11895 + ceil32(return_data.size) + 64]
                            _15513 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15513]:
                                revert with 0, 50
                            mem[_15513 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15513]:
                                revert with 0, 50
                            mem[_15513 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15513 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15513 + 100] = _15500
                            mem[_15513 + 132] = 64
                            mem[_15513 + 164] = mem[_15513]
                            idx = 0
                            s = _15513 + 32
                            t = _15513 + 196
                            while idx < mem[_15513]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15513 + (32 * mem[_15513]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18734 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18752 = mem[_18734]
                            require mem[_18734] <= test266151307()
                            require _18734 + mem[_18734] + 31 < _18734 + return_data.size
                            _18768 = mem[_18734 + mem[_18734]]
                            if mem[_18734 + mem[_18734]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_18734 + mem[_18734]]) + 1 < 0 or _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1
                            mem[_18734 + ceil32(return_data.size)] = _18768
                            require _18752 + (32 * _18768) + 32 <= return_data.size
                            mem[_18734 + ceil32(return_data.size) + 32 len ceil32(32 * _18768)] = mem[_18734 + _18752 + 32 len ceil32(32 * _18768)]
                            if 1 >= _18768:
                                revert with 0, 50
                            _21219 = mem[_18734 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21343 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21353 = mem[_21343]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21343]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / mem[_21343] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / mem[_21343]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21685 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21754 = mem[_21685]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21912 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21912] > !_21754:
                                        revert with 0, 17
                                    if mem[_21912] + _21754 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21912] + _21754:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21912] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6) + (_21754 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21686 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21756 = mem[_21686]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21913 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21913] > !_21756:
                                        revert with 0, 17
                                    if mem[_21913] + _21756 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21913] + _21756:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21913] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6) + (_21756 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21353 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21385 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21414 = mem[_21385]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21385]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / mem[_21385] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / mem[_21385]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21891 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21978 = mem[_21891]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22115 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22115] > !_21978:
                                            revert with 0, 17
                                        if mem[_22115] + _21978 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22115] + _21978:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22115] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6) + (_21978 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21892 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21980 = mem[_21892]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22116 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22116] > !_21980:
                                            revert with 0, 17
                                        if mem[_22116] + _21980 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22116] + _21980:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22116] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6) + (_21980 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21414 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22821 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22832 = mem[_22821]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22821]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / mem[_22821] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / mem[_22821]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22953 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22984 = mem[_22953]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23080 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23080] > !_22984:
                                            revert with 0, 17
                                        if mem[_23080] + _22984 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23080] + _22984:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23080] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6) + (_22984 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22954 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22986 = mem[_22954]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23081 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23081] > !_22986:
                                            revert with 0, 17
                                        if mem[_23081] + _22986 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23081] + _22986:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23081] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6) + (_22986 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22832 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12050 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12050]:
                                    revert with 0, 50
                                mem[_12050 + 32] = token1Address
                                if 1 >= mem[_12050]:
                                    revert with 0, 50
                                mem[_12050 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12050 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12050 + 100] = 1
                                mem[_12050 + 132] = 64
                                mem[_12050 + 164] = mem[_12050]
                                idx = 0
                                u = _12050 + 32
                                v = _12050 + 196
                                while idx < mem[_12050]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12050 + (32 * mem[_12050]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15539 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15571 = mem[_15539]
                                require mem[_15539] <= test266151307()
                                require _15539 + mem[_15539] + 31 < _15539 + return_data.size
                                _15595 = mem[_15539 + mem[_15539]]
                                if mem[_15539 + mem[_15539]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15539 + mem[_15539]]) + 1 < 0 or _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1
                                mem[_15539 + ceil32(return_data.size)] = _15595
                                require _15571 + (32 * _15595) + 32 <= return_data.size
                                mem[_15539 + ceil32(return_data.size) + 32 len ceil32(32 * _15595)] = mem[_15539 + _15571 + 32 len ceil32(32 * _15595)]
                                var112002 = _15539 + ceil32(return_data.size) + ceil32(32 * _15595) + 32
                                if 1 >= _15595:
                                    revert with 0, 50
                                _18703 = mem[_15539 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18915 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18929 = mem[_18915]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18915]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / mem[_18915] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / mem[_18915]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19292 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19377 = mem[_19292]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19572 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19572] > !_19377:
                                            revert with 0, 17
                                        if mem[_19572] + _19377 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19572] + _19377:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19572] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6) + (_19377 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19293 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19379 = mem[_19293]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19573 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19573] > !_19379:
                                            revert with 0, 17
                                        if mem[_19573] + _19379 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19573] + _19379:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19573] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6) + (_19379 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18929 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18973 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19013 = mem[_18973]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18973]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / mem[_18973] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / mem[_18973]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19542 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19652 = mem[_19542]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19832 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19832] > !_19652:
                                                revert with 0, 17
                                            if mem[_19832] + _19652 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19832] + _19652:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19832] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6) + (_19652 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19543 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19654 = mem[_19543]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19833 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19833] > !_19654:
                                                revert with 0, 17
                                            if mem[_19833] + _19654 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19833] + _19654:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19833] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6) + (_19654 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21292 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21311 = mem[_21292]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21292]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / mem[_21292] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / mem[_21292]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21519 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21565 = mem[_21519]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21719 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21719] > !_21565:
                                                revert with 0, 17
                                            if mem[_21719] + _21565 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21719] + _21565:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21719] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6) + (_21565 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21520 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21567 = mem[_21520]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21720 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21720] > !_21567:
                                                revert with 0, 17
                                            if mem[_21720] + _21567 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21720] + _21567:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21720] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6) + (_21567 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21311 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12115 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12115]:
                                        revert with 0, 50
                                    mem[_12115 + 32] = token1Address
                                    if 1 >= mem[_12115]:
                                        revert with 0, 50
                                    mem[_12115 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12115 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12115 + 100] = 10^stor259
                                    mem[_12115 + 132] = 64
                                    mem[_12115 + 164] = mem[_12115]
                                    idx = 0
                                    u = _12115 + 32
                                    v = _12115 + 196
                                    while idx < mem[_12115]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12115 + (32 * mem[_12115]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15538 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15570 = mem[_15538]
                                    require mem[_15538] <= test266151307()
                                    require _15538 + mem[_15538] + 31 < _15538 + return_data.size
                                    _15594 = mem[_15538 + mem[_15538]]
                                    if mem[_15538 + mem[_15538]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15538 + mem[_15538]]) + 1 < 0 or _15538 + ceil32(return_data.size) + ceil32(32 * mem[_15538 + mem[_15538]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15538 + ceil32(return_data.size) + ceil32(32 * mem[_15538 + mem[_15538]]) + 1
                                    mem[_15538 + ceil32(return_data.size)] = _15594
                                    require _15570 + (32 * _15594) + 32 <= return_data.size
                                    mem[_15538 + ceil32(return_data.size) + 32 len ceil32(32 * _15594)] = mem[_15538 + _15570 + 32 len ceil32(32 * _15594)]
                                    var117002 = _15538 + ceil32(return_data.size) + ceil32(32 * _15594) + 32
                                    if 1 >= _15594:
                                        revert with 0, 50
                                    _18702 = mem[_15538 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18914 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18928 = mem[_18914]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18914]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / mem[_18914] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / mem[_18914]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19290 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19374 = mem[_19290]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19570 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19570] > !_19374:
                                                revert with 0, 17
                                            if mem[_19570] + _19374 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19570] + _19374:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19570] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6) + (_19374 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19291 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19376 = mem[_19291]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19571 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19571] > !_19376:
                                                revert with 0, 17
                                            if mem[_19571] + _19376 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19571] + _19376:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19571] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6) + (_19376 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18928 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18972 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19010 = mem[_18972]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18972]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / mem[_18972] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / mem[_18972]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19540 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19645 = mem[_19540]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19827 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19827] > !_19645:
                                                    revert with 0, 17
                                                if mem[_19827] + _19645 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19827] + _19645:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19827] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6) + (_19645 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19541 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19647 = mem[_19541]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19828 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19828] > !_19647:
                                                    revert with 0, 17
                                                if mem[_19828] + _19647 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19828] + _19647:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19828] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6) + (_19647 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21291 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21310 = mem[_21291]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21291]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / mem[_21291] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / mem[_21291]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21517 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21562 = mem[_21517]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21717 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21717] > !_21562:
                                                    revert with 0, 17
                                                if mem[_21717] + _21562 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21717] + _21562:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21717] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6) + (_21562 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21518 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21564 = mem[_21518]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21718 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21718] > !_21564:
                                                    revert with 0, 17
                                                if mem[_21718] + _21564 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21718] + _21564:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21718] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6) + (_21564 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21310 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _15551 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15551]:
                                        revert with 0, 50
                                    mem[_15551 + 32] = token1Address
                                    if 1 >= mem[_15551]:
                                        revert with 0, 50
                                    mem[_15551 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15551 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15551 + 100] = u * v
                                    mem[_15551 + 132] = 64
                                    mem[_15551 + 164] = mem[_15551]
                                    idx = 0
                                    u = _15551 + 32
                                    v = _15551 + 196
                                    while idx < mem[_15551]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15551 + (32 * mem[_15551]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18732 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18750 = mem[_18732]
                                    require mem[_18732] <= test266151307()
                                    require _18732 + mem[_18732] + 31 < _18732 + return_data.size
                                    _18766 = mem[_18732 + mem[_18732]]
                                    if mem[_18732 + mem[_18732]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18732 + mem[_18732]]) + 1 < 0 or _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1
                                    mem[_18732 + ceil32(return_data.size)] = _18766
                                    require _18750 + (32 * _18766) + 32 <= return_data.size
                                    mem[_18732 + ceil32(return_data.size) + 32 len ceil32(32 * _18766)] = mem[_18732 + _18750 + 32 len ceil32(32 * _18766)]
                                    if 1 >= _18766:
                                        revert with 0, 50
                                    _21217 = mem[_18732 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21342 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21352 = mem[_21342]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21217) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21342]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / mem[_21342] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / mem[_21342]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21683 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21751 = mem[_21683]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21910 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21910] > !_21751:
                                                revert with 0, 17
                                            if mem[_21910] + _21751 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21910] + _21751:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21910] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6) + (_21751 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21684 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21753 = mem[_21684]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21911 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21911] > !_21753:
                                                revert with 0, 17
                                            if mem[_21911] + _21753 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21911] + _21753:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21911] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6) + (_21753 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217) / _21352 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21384 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21411 = mem[_21384]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21384]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / mem[_21384] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / mem[_21384]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21888 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21971 = mem[_21888]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22110 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22110] > !_21971:
                                                    revert with 0, 17
                                                if mem[_22110] + _21971 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22110] + _21971:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22110] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6) + (_21971 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21889 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21973 = mem[_21889]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22111 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22111] > !_21973:
                                                    revert with 0, 17
                                                if mem[_22111] + _21973 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22111] + _21973:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22111] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6) + (_21973 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / 10^stor259) / _21411 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22820 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22831 = mem[_22820]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22820]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / mem[_22820] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / mem[_22820]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22951 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22981 = mem[_22951]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23078 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23078] > !_22981:
                                                    revert with 0, 17
                                                if mem[_23078] + _22981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23078] + _22981:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6) + (_22981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22952 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22983 = mem[_22952]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23079 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23079] > !_22983:
                                                    revert with 0, 17
                                                if mem[_23079] + _22983 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23079] + _22983:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23079] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6) + (_22983 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21217 / u * v) / _22831 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _11961 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_11961]:
                                revert with 0, 50
                            mem[_11961 + 32] = token1Address
                            if 1 >= mem[_11961]:
                                revert with 0, 50
                            mem[_11961 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_11961 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_11961 + 100] = 10^18
                            mem[_11961 + 132] = 64
                            mem[_11961 + 164] = mem[_11961]
                            idx = 0
                            u = _11961 + 32
                            v = _11961 + 196
                            while idx < mem[_11961]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _11961 + (32 * mem[_11961]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15540 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15572 = mem[_15540]
                            require mem[_15540] <= test266151307()
                            require _15540 + mem[_15540] + 31 < _15540 + return_data.size
                            _15596 = mem[_15540 + mem[_15540]]
                            if mem[_15540 + mem[_15540]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15540 + mem[_15540]]) + 1 < 0 or _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1
                            mem[_15540 + ceil32(return_data.size)] = _15596
                            require _15572 + (32 * _15596) + 32 <= return_data.size
                            mem[_15540 + ceil32(return_data.size) + 32 len ceil32(32 * _15596)] = mem[_15540 + _15572 + 32 len ceil32(32 * _15596)]
                            var106002 = _15540 + ceil32(return_data.size) + ceil32(32 * _15596) + 32
                            if 1 >= _15596:
                                revert with 0, 50
                            _18704 = mem[_15540 + ceil32(return_data.size) + 64]
                            _18717 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18717]:
                                revert with 0, 50
                            mem[_18717 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18717]:
                                revert with 0, 50
                            mem[_18717 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18717 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18717 + 100] = _18704
                            mem[_18717 + 132] = 64
                            mem[_18717 + 164] = mem[_18717]
                            idx = 0
                            u = _18717 + 32
                            v = _18717 + 196
                            while idx < mem[_18717]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18717 + (32 * mem[_18717]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21228 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21234 = mem[_21228]
                            require mem[_21228] <= test266151307()
                            require _21228 + mem[_21228] + 31 < _21228 + return_data.size
                            _21240 = mem[_21228 + mem[_21228]]
                            if mem[_21228 + mem[_21228]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21228 + mem[_21228]]) + 1 < 0 or _21228 + ceil32(return_data.size) + ceil32(32 * mem[_21228 + mem[_21228]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21228 + ceil32(return_data.size) + ceil32(32 * mem[_21228 + mem[_21228]]) + 1
                            mem[_21228 + ceil32(return_data.size)] = _21240
                            require _21234 + (32 * _21240) + 32 <= return_data.size
                            mem[_21228 + ceil32(return_data.size) + 32 len ceil32(32 * _21240)] = mem[_21228 + _21234 + 32 len ceil32(32 * _21240)]
                            if 1 >= _21240:
                                revert with 0, 50
                            _22786 = mem[_21228 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21228 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21228 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22848 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22853 = mem[_22848]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22786) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22848]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / mem[_22848] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / mem[_22848]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23059 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23096 = mem[_23059]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23179 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23179] > !_23096:
                                        revert with 0, 17
                                    if mem[_23179] + _23096 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23179] + _23096:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23179] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6) + (_23096 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23060 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23098 = mem[_23060]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23180 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23180] > !_23098:
                                        revert with 0, 17
                                    if mem[_23180] + _23098 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23180] + _23098:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23180] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6) + (_23098 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786) / _22853 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21228 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21228 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22868 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22883 = mem[_22868]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22868]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / mem[_22868] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / mem[_22868]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23169 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23213 = mem[_23169]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23279 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23279] > !_23213:
                                            revert with 0, 17
                                        if mem[_23279] + _23213 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23279] + _23213:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6) + (_23213 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23170 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23215 = mem[_23170]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23280 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23280] > !_23215:
                                            revert with 0, 17
                                        if mem[_23280] + _23215 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23280] + _23215:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23280] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6) + (_23215 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / 10^stor259) / _22883 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21228 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21228 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23511 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23516 = mem[_23511]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23511]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / mem[_23511] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / mem[_23511]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23557 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23571 = mem[_23557]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23608 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23608] > !_23571:
                                            revert with 0, 17
                                        if mem[_23608] + _23571 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23608] + _23571:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23608] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6) + (_23571 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23558 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23573 = mem[_23558]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23609 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23609] > !_23573:
                                            revert with 0, 17
                                        if mem[_23609] + _23573 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23609] + _23573:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23609] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6) + (_23573 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7968 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22786 / u * v) / _23516 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4028 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4037 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4028 + (32 * _4037) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4037)] = mem[(2 * ceil32(return_data.size)) + _4028 + 224 len ceil32(32 * _4037)]
                    if 1 >= _4037:
                        revert with 0, 50
                    _7967 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8027 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8027]:
                                    revert with 0, 50
                                mem[_8027 + 32] = token1Address
                                if 1 >= mem[_8027]:
                                    revert with 0, 50
                                mem[_8027 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8027 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8027 + 100] = 1
                                mem[_8027 + 132] = 64
                                mem[_8027 + 164] = mem[_8027]
                                idx = 0
                                s = _8027 + 32
                                t = _8027 + 196
                                while idx < mem[_8027]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8027 + (32 * mem[_8027]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11889 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11915 = mem[_11889]
                                require mem[_11889] <= test266151307()
                                require _11889 + mem[_11889] + 31 < _11889 + return_data.size
                                _11931 = mem[_11889 + mem[_11889]]
                                if mem[_11889 + mem[_11889]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11889 + mem[_11889]]) + 1 < 0 or _11889 + ceil32(return_data.size) + ceil32(32 * mem[_11889 + mem[_11889]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11889 + ceil32(return_data.size) + ceil32(32 * mem[_11889 + mem[_11889]]) + 1
                                mem[_11889 + ceil32(return_data.size)] = _11931
                                require _11915 + (32 * _11931) + 32 <= return_data.size
                                mem[_11889 + ceil32(return_data.size) + 32 len ceil32(32 * _11931)] = mem[_11889 + _11915 + 32 len ceil32(32 * _11931)]
                                if 1 >= _11931:
                                    revert with 0, 50
                                _15490 = mem[_11889 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11889 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11889 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15776 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15798 = mem[_15776]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15490) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15776]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / mem[_15776] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / mem[_15776]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16118 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16182 = mem[_16118]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16338 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16338] > !_16182:
                                            revert with 0, 17
                                        if mem[_16338] + _16182 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16338] + _16182:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16338] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6) + (_16182 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16119 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16184 = mem[_16119]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16339 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16339] > !_16184:
                                            revert with 0, 17
                                        if mem[_16339] + _16184 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16339] + _16184:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16339] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6) + (_16184 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490) / _15798 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11889 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11889 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15838 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15878 = mem[_15838]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15838]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / mem[_15838] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / mem[_15838]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16313 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16380 = mem[_16313]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16525 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16525] > !_16380:
                                                revert with 0, 17
                                            if mem[_16525] + _16380 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16525] + _16380:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16525] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6) + (_16380 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16314 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16382 = mem[_16314]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16526 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16526] > !_16382:
                                                revert with 0, 17
                                            if mem[_16526] + _16382 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16526] + _16382:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16526] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6) + (_16382 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / 10^stor259) / _15878 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11889 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11889 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18837 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18869 = mem[_18837]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18837]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / mem[_18837] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / mem[_18837]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19117 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19158 = mem[_19117]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19322 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19322] > !_19158:
                                                revert with 0, 17
                                            if mem[_19322] + _19158 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19322] + _19158:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19322] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6) + (_19158 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19118 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19160 = mem[_19118]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19323 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19323] > !_19160:
                                                revert with 0, 17
                                            if mem[_19323] + _19160 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19323] + _19160:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19323] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6) + (_19160 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15490 / s * t) / _18869 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8076 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8076]:
                                        revert with 0, 50
                                    mem[_8076 + 32] = token1Address
                                    if 1 >= mem[_8076]:
                                        revert with 0, 50
                                    mem[_8076 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8076 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8076 + 100] = 10^stor259
                                    mem[_8076 + 132] = 64
                                    mem[_8076 + 164] = mem[_8076]
                                    idx = 0
                                    s = _8076 + 32
                                    t = _8076 + 196
                                    while idx < mem[_8076]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8076 + (32 * mem[_8076]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11888 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11914 = mem[_11888]
                                    require mem[_11888] <= test266151307()
                                    require _11888 + mem[_11888] + 31 < _11888 + return_data.size
                                    _11930 = mem[_11888 + mem[_11888]]
                                    if mem[_11888 + mem[_11888]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11888 + mem[_11888]]) + 1 < 0 or _11888 + ceil32(return_data.size) + ceil32(32 * mem[_11888 + mem[_11888]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11888 + ceil32(return_data.size) + ceil32(32 * mem[_11888 + mem[_11888]]) + 1
                                    mem[_11888 + ceil32(return_data.size)] = _11930
                                    require _11914 + (32 * _11930) + 32 <= return_data.size
                                    mem[_11888 + ceil32(return_data.size) + 32 len ceil32(32 * _11930)] = mem[_11888 + _11914 + 32 len ceil32(32 * _11930)]
                                    var112002 = _11888 + ceil32(return_data.size) + ceil32(32 * _11930) + 32
                                    if 1 >= _11930:
                                        revert with 0, 50
                                    _15489 = mem[_11888 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11888 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11888 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15775 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15797 = mem[_15775]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15489) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15775]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / mem[_15775] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / mem[_15775]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16116 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16179 = mem[_16116]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16336 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16336] > !_16179:
                                                revert with 0, 17
                                            if mem[_16336] + _16179 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16336] + _16179:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16336] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6) + (_16179 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16117 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16181 = mem[_16117]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16337 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16337] > !_16181:
                                                revert with 0, 17
                                            if mem[_16337] + _16181 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16337] + _16181:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16337] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6) + (_16181 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489) / _15797 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11888 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11888 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15837 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15875 = mem[_15837]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15837]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / mem[_15837] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / mem[_15837]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16311 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16373 = mem[_16311]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16520 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16520] > !_16373:
                                                    revert with 0, 17
                                                if mem[_16520] + _16373 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16520] + _16373:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16520] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6) + (_16373 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16312 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16375 = mem[_16312]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16521 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16521] > !_16375:
                                                    revert with 0, 17
                                                if mem[_16521] + _16375 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16521] + _16375:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16521] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6) + (_16375 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / 10^stor259) / _15875 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11888 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11888 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18836 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18868 = mem[_18836]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18836]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / mem[_18836] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / mem[_18836]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19115 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19155 = mem[_19115]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19320 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19320] > !_19155:
                                                    revert with 0, 17
                                                if mem[_19320] + _19155 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19320] + _19155:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19320] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6) + (_19155 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19116 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19157 = mem[_19116]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19321 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19321] > !_19157:
                                                    revert with 0, 17
                                                if mem[_19321] + _19157 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19321] + _19157:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19321] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6) + (_19157 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15489 / s * t) / _18868 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11903 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11903]:
                                        revert with 0, 50
                                    mem[_11903 + 32] = token1Address
                                    if 1 >= mem[_11903]:
                                        revert with 0, 50
                                    mem[_11903 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11903 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11903 + 100] = s * t
                                    mem[_11903 + 132] = 64
                                    mem[_11903 + 164] = mem[_11903]
                                    idx = 0
                                    s = _11903 + 32
                                    t = _11903 + 196
                                    while idx < mem[_11903]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11903 + (32 * mem[_11903]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15534 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15567 = mem[_15534]
                                    require mem[_15534] <= test266151307()
                                    require _15534 + mem[_15534] + 31 < _15534 + return_data.size
                                    _15591 = mem[_15534 + mem[_15534]]
                                    if mem[_15534 + mem[_15534]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15534 + mem[_15534]]) + 1 < 0 or _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1
                                    mem[_15534 + ceil32(return_data.size)] = _15591
                                    require _15567 + (32 * _15591) + 32 <= return_data.size
                                    mem[_15534 + ceil32(return_data.size) + 32 len ceil32(32 * _15591)] = mem[_15534 + _15567 + 32 len ceil32(32 * _15591)]
                                    var117002 = _15534 + ceil32(return_data.size) + ceil32(32 * _15591) + 32
                                    if 1 >= _15591:
                                        revert with 0, 50
                                    _18699 = mem[_15534 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18913 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18927 = mem[_18913]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _18699) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18913]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / mem[_18913] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / mem[_18913]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19288 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19371 = mem[_19288]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19568 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19568] > !_19371:
                                                revert with 0, 17
                                            if mem[_19568] + _19371 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19568] + _19371:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19568] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6) + (_19371 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19289 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19373 = mem[_19289]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19569 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19569] > !_19373:
                                                revert with 0, 17
                                            if mem[_19569] + _19373 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19569] + _19373:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19569] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6) + (_19373 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699) / _18927 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18971 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19007 = mem[_18971]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18971]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / mem[_18971] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / mem[_18971]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19536 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19638 = mem[_19536]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19822 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19822] > !_19638:
                                                    revert with 0, 17
                                                if mem[_19822] + _19638 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19822] + _19638:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19822] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6) + (_19638 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19537 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19640 = mem[_19537]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19823 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19823] > !_19640:
                                                    revert with 0, 17
                                                if mem[_19823] + _19640 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19823] + _19640:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19823] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6) + (_19640 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / 10^stor259) / _19007 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21290 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21309 = mem[_21290]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21290]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / mem[_21290] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / mem[_21290]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21515 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21559 = mem[_21515]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21715 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21715] > !_21559:
                                                    revert with 0, 17
                                                if mem[_21715] + _21559 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21715] + _21559:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21715] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6) + (_21559 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21516 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21561 = mem[_21516]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21716 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21716] > !_21561:
                                                    revert with 0, 17
                                                if mem[_21716] + _21561 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21716] + _21561:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21716] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6) + (_21561 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18699 / s * t) / _21309 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _7991 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_7991]:
                                revert with 0, 50
                            mem[_7991 + 32] = token1Address
                            if 1 >= mem[_7991]:
                                revert with 0, 50
                            mem[_7991 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_7991 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_7991 + 100] = 10^18
                            mem[_7991 + 132] = 64
                            mem[_7991 + 164] = mem[_7991]
                            idx = 0
                            s = _7991 + 32
                            t = _7991 + 196
                            while idx < mem[_7991]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _7991 + (32 * mem[_7991]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11890 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11916 = mem[_11890]
                            require mem[_11890] <= test266151307()
                            require _11890 + mem[_11890] + 31 < _11890 + return_data.size
                            _11932 = mem[_11890 + mem[_11890]]
                            if mem[_11890 + mem[_11890]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11890 + mem[_11890]]) + 1 < 0 or _11890 + ceil32(return_data.size) + ceil32(32 * mem[_11890 + mem[_11890]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11890 + ceil32(return_data.size) + ceil32(32 * mem[_11890 + mem[_11890]]) + 1
                            mem[_11890 + ceil32(return_data.size)] = _11932
                            require _11916 + (32 * _11932) + 32 <= return_data.size
                            mem[_11890 + ceil32(return_data.size) + 32 len ceil32(32 * _11932)] = mem[_11890 + _11916 + 32 len ceil32(32 * _11932)]
                            var101002 = _11890 + ceil32(return_data.size) + ceil32(32 * _11932) + 32
                            var101005 = _11890 + _11916 + ceil32(32 * _11932) + 32
                            if 1 >= _11932:
                                revert with 0, 50
                            _15491 = mem[_11890 + ceil32(return_data.size) + 64]
                            _15511 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15511]:
                                revert with 0, 50
                            mem[_15511 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15511]:
                                revert with 0, 50
                            mem[_15511 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15511 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15511 + 100] = _15491
                            mem[_15511 + 132] = 64
                            mem[_15511 + 164] = mem[_15511]
                            idx = 0
                            s = _15511 + 32
                            t = _15511 + 196
                            while idx < mem[_15511]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15511 + (32 * mem[_15511]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18731 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18749 = mem[_18731]
                            require mem[_18731] <= test266151307()
                            require _18731 + mem[_18731] + 31 < _18731 + return_data.size
                            _18765 = mem[_18731 + mem[_18731]]
                            if mem[_18731 + mem[_18731]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_18731 + mem[_18731]]) + 1 < 0 or _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1
                            mem[_18731 + ceil32(return_data.size)] = _18765
                            require _18749 + (32 * _18765) + 32 <= return_data.size
                            mem[_18731 + ceil32(return_data.size) + 32 len ceil32(32 * _18765)] = mem[_18731 + _18749 + 32 len ceil32(32 * _18765)]
                            if 1 >= _18765:
                                revert with 0, 50
                            _21216 = mem[_18731 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21341 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21351 = mem[_21341]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _21216) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21341]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / mem[_21341] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / mem[_21341]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21681 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21748 = mem[_21681]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21908 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21908] > !_21748:
                                        revert with 0, 17
                                    if mem[_21908] + _21748 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21908] + _21748:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21908] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6) + (_21748 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21682 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21750 = mem[_21682]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21909 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21909] > !_21750:
                                        revert with 0, 17
                                    if mem[_21909] + _21750 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21909] + _21750:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21909] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6) + (_21750 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216) / _21351 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21383 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21408 = mem[_21383]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21383]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / mem[_21383] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / mem[_21383]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21886 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21964 = mem[_21886]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22105 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22105] > !_21964:
                                            revert with 0, 17
                                        if mem[_22105] + _21964 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22105] + _21964:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22105] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6) + (_21964 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21887 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21966 = mem[_21887]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22106 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22106] > !_21966:
                                            revert with 0, 17
                                        if mem[_22106] + _21966 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22106] + _21966:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22106] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6) + (_21966 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / 10^stor259) / _21408 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7967 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22819 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22830 = mem[_22819]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7967) + (Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22819]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / mem[_22819] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / mem[_22819]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22949 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22978 = mem[_22949]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23076 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23076] > !_22978:
                                            revert with 0, 17
                                        if mem[_23076] + _22978 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23076] + _22978:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23076] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6) + (_22978 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22950 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22980 = mem[_22950]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23077 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23077] > !_22980:
                                            revert with 0, 17
                                        if mem[_23077] + _22980 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23077] + _22980:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23077] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6) + (_22980 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21216 / s * t) / _22830 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8074 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8074]:
                                        revert with 0, 50
                                    mem[_8074 + 32] = token1Address
                                    if 1 >= mem[_8074]:
                                        revert with 0, 50
                                    mem[_8074 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8074 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8074 + 100] = 1
                                    mem[_8074 + 132] = 64
                                    mem[_8074 + 164] = mem[_8074]
                                    idx = 0
                                    s = _8074 + 32
                                    t = _8074 + 196
                                    while idx < mem[_8074]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8074 + (32 * mem[_8074]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11884 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11911 = mem[_11884]
                                    require mem[_11884] <= test266151307()
                                    require _11884 + mem[_11884] + 31 < _11884 + return_data.size
                                    _11927 = mem[_11884 + mem[_11884]]
                                    if mem[_11884 + mem[_11884]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_11884 + mem[_11884]]) + 1 < 0 or _11884 + ceil32(return_data.size) + ceil32(32 * mem[_11884 + mem[_11884]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _11884 + ceil32(return_data.size) + ceil32(32 * mem[_11884 + mem[_11884]]) + 1
                                    mem[_11884 + ceil32(return_data.size)] = _11927
                                    require _11911 + (32 * _11927) + 32 <= return_data.size
                                    mem[_11884 + ceil32(return_data.size) + 32 len ceil32(32 * _11927)] = mem[_11884 + _11911 + 32 len ceil32(32 * _11927)]
                                    var112002 = _11884 + ceil32(return_data.size) + ceil32(32 * _11927) + 32
                                    if 1 >= _11927:
                                        revert with 0, 50
                                    _15484 = mem[_11884 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11884 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11884 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15774 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15796 = mem[_15774]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15484) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15774]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / mem[_15774] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / mem[_15774]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16114 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16174 = mem[_16114]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16333 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16333] > !_16174:
                                                revert with 0, 17
                                            if mem[_16333] + _16174 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16333] + _16174:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16333] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6) + (_16174 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16115 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16176 = mem[_16115]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16334 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16334] > !_16176:
                                                revert with 0, 17
                                            if mem[_16334] + _16176 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16334] + _16176:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16334] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6) + (_16176 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484) / _15796 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11884 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11884 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15835 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15872 = mem[_15835]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15835]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / mem[_15835] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / mem[_15835]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16308 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16364 = mem[_16308]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16512 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16512] > !_16364:
                                                    revert with 0, 17
                                                if mem[_16512] + _16364 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16512] + _16364:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16512] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6) + (_16364 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16309 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16366 = mem[_16309]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16513 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16513] > !_16366:
                                                    revert with 0, 17
                                                if mem[_16513] + _16366 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16513] + _16366:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16513] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6) + (_16366 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / 10^stor259) / _15872 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11884 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11884 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18834 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18867 = mem[_18834]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18834]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / mem[_18834] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / mem[_18834]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19113 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19150 = mem[_19113]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19315 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19315] > !_19150:
                                                    revert with 0, 17
                                                if mem[_19315] + _19150 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19315] + _19150:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19315] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6) + (_19150 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19114 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19152 = mem[_19114]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19316 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19316] > !_19152:
                                                    revert with 0, 17
                                                if mem[_19316] + _19152 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19316] + _19152:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19316] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6) + (_19152 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15484 / s * t) / _18867 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8155 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8155]:
                                            revert with 0, 50
                                        mem[_8155 + 32] = token1Address
                                        if 1 >= mem[_8155]:
                                            revert with 0, 50
                                        mem[_8155 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8155 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8155 + 100] = 10^stor259
                                        mem[_8155 + 132] = 64
                                        mem[_8155 + 164] = mem[_8155]
                                        idx = 0
                                        s = _8155 + 32
                                        t = _8155 + 196
                                        while idx < mem[_8155]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8155 + (32 * mem[_8155]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11883 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _11910 = mem[_11883]
                                        require mem[_11883] <= test266151307()
                                        require _11883 + mem[_11883] + 31 < _11883 + return_data.size
                                        _11926 = mem[_11883 + mem[_11883]]
                                        if mem[_11883 + mem[_11883]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_11883 + mem[_11883]]) + 1 < 0 or _11883 + ceil32(return_data.size) + ceil32(32 * mem[_11883 + mem[_11883]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _11883 + ceil32(return_data.size) + ceil32(32 * mem[_11883 + mem[_11883]]) + 1
                                        mem[_11883 + ceil32(return_data.size)] = _11926
                                        require _11910 + (32 * _11926) + 32 <= return_data.size
                                        mem[_11883 + ceil32(return_data.size) + 32 len ceil32(32 * _11926)] = mem[_11883 + _11910 + 32 len ceil32(32 * _11926)]
                                        var117002 = _11883 + ceil32(return_data.size) + ceil32(32 * _11926) + 32
                                        if 1 >= _11926:
                                            revert with 0, 50
                                        _15483 = mem[_11883 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11883 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11883 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15773 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15795 = mem[_15773]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15483) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15773]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / mem[_15773] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / mem[_15773]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16112 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16171 = mem[_16112]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16331 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16331] > !_16171:
                                                    revert with 0, 17
                                                if mem[_16331] + _16171 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16331] + _16171:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16331] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6) + (_16171 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16113 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16173 = mem[_16113]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16332 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16332] > !_16173:
                                                    revert with 0, 17
                                                if mem[_16332] + _16173 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16332] + _16173:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16332] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6) + (_16173 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483) / _15795 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11883 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11883 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15834 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _15869 = mem[_15834]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_15834]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / mem[_15834] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / mem[_15834]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16306 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16357 = mem[_16306]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16507 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16507] > !_16357:
                                                        revert with 0, 17
                                                    if mem[_16507] + _16357 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16507] + _16357:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16507] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6) + (_16357 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16307 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _16359 = mem[_16307]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16508 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16508] > !_16359:
                                                        revert with 0, 17
                                                    if mem[_16508] + _16359 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16508] + _16359:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16508] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6) + (_16359 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / 10^stor259) / _15869 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11883 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11883 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18833 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18866 = mem[_18833]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18833]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / mem[_18833] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / mem[_18833]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19111 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19147 = mem[_19111]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19313 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19313] > !_19147:
                                                        revert with 0, 17
                                                    if mem[_19313] + _19147 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19313] + _19147:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19313] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6) + (_19147 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19112 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19149 = mem[_19112]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19314 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19314] > !_19149:
                                                        revert with 0, 17
                                                    if mem[_19314] + _19149 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19314] + _19149:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19314] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6) + (_19149 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15483 / s * t) / _18866 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _11901 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_11901]:
                                            revert with 0, 50
                                        mem[_11901 + 32] = token1Address
                                        if 1 >= mem[_11901]:
                                            revert with 0, 50
                                        mem[_11901 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_11901 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_11901 + 100] = s * t
                                        mem[_11901 + 132] = 64
                                        mem[_11901 + 164] = mem[_11901]
                                        idx = 0
                                        s = _11901 + 32
                                        t = _11901 + 196
                                        while idx < mem[_11901]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _11901 + (32 * mem[_11901]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15532 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15565 = mem[_15532]
                                        require mem[_15532] <= test266151307()
                                        require _15532 + mem[_15532] + 31 < _15532 + return_data.size
                                        _15589 = mem[_15532 + mem[_15532]]
                                        if mem[_15532 + mem[_15532]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15532 + mem[_15532]]) + 1 < 0 or _15532 + ceil32(return_data.size) + ceil32(32 * mem[_15532 + mem[_15532]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15532 + ceil32(return_data.size) + ceil32(32 * mem[_15532 + mem[_15532]]) + 1
                                        mem[_15532 + ceil32(return_data.size)] = _15589
                                        require _15565 + (32 * _15589) + 32 <= return_data.size
                                        mem[_15532 + ceil32(return_data.size) + 32 len ceil32(32 * _15589)] = mem[_15532 + _15565 + 32 len ceil32(32 * _15589)]
                                        var122002 = _15532 + ceil32(return_data.size) + ceil32(32 * _15589) + 32
                                        if 1 >= _15589:
                                            revert with 0, 50
                                        _18697 = mem[_15532 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15532 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15532 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18912 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18926 = mem[_18912]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18697) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18912]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / mem[_18912] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / mem[_18912]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19286 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19368 = mem[_19286]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19566 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19566] > !_19368:
                                                    revert with 0, 17
                                                if mem[_19566] + _19368 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19566] + _19368:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19566] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6) + (_19368 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19287 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19370 = mem[_19287]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19567 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19567] > !_19370:
                                                    revert with 0, 17
                                                if mem[_19567] + _19370 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19567] + _19370:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19567] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6) + (_19370 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18926 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15532 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15532 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18970 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19004 = mem[_18970]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18970]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / mem[_18970] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / mem[_18970]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19533 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19631 = mem[_19533]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19817 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19817] > !_19631:
                                                        revert with 0, 17
                                                    if mem[_19817] + _19631 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19817] + _19631:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19817] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6) + (_19631 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19534 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19633 = mem[_19534]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19818 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19818] > !_19633:
                                                        revert with 0, 17
                                                    if mem[_19818] + _19633 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19818] + _19633:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19818] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6) + (_19633 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19004 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15532 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15532 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21289 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21308 = mem[_21289]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21289]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / mem[_21289] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / mem[_21289]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21513 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21556 = mem[_21513]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21713 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21713] > !_21556:
                                                        revert with 0, 17
                                                    if mem[_21713] + _21556 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21713] + _21556:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21713] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6) + (_21556 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21514 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21558 = mem[_21514]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21714 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21714] > !_21558:
                                                        revert with 0, 17
                                                    if mem[_21714] + _21558 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21714] + _21558:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21714] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6) + (_21558 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21308 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _8016 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8016]:
                                    revert with 0, 50
                                mem[_8016 + 32] = token1Address
                                if 1 >= mem[_8016]:
                                    revert with 0, 50
                                mem[_8016 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8016 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8016 + 100] = 10^18
                                mem[_8016 + 132] = 64
                                mem[_8016 + 164] = mem[_8016]
                                idx = 0
                                s = _8016 + 32
                                t = _8016 + 196
                                while idx < mem[_8016]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8016 + (32 * mem[_8016]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11885 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11912 = mem[_11885]
                                require mem[_11885] <= test266151307()
                                require _11885 + mem[_11885] + 31 < _11885 + return_data.size
                                _11928 = mem[_11885 + mem[_11885]]
                                if mem[_11885 + mem[_11885]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_11885 + mem[_11885]]) + 1 < 0 or _11885 + ceil32(return_data.size) + ceil32(32 * mem[_11885 + mem[_11885]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _11885 + ceil32(return_data.size) + ceil32(32 * mem[_11885 + mem[_11885]]) + 1
                                mem[_11885 + ceil32(return_data.size)] = _11928
                                require _11912 + (32 * _11928) + 32 <= return_data.size
                                mem[_11885 + ceil32(return_data.size) + 32 len ceil32(32 * _11928)] = mem[_11885 + _11912 + 32 len ceil32(32 * _11928)]
                                var106002 = _11885 + ceil32(return_data.size) + ceil32(32 * _11928) + 32
                                if 1 >= _11928:
                                    revert with 0, 50
                                _15485 = mem[_11885 + ceil32(return_data.size) + 64]
                                _15509 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15509]:
                                    revert with 0, 50
                                mem[_15509 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_15509]:
                                    revert with 0, 50
                                mem[_15509 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_15509 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15509 + 100] = _15485
                                mem[_15509 + 132] = 64
                                mem[_15509 + 164] = mem[_15509]
                                idx = 0
                                s = _15509 + 32
                                t = _15509 + 196
                                while idx < mem[_15509]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15509 + (32 * mem[_15509]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18730 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18748 = mem[_18730]
                                require mem[_18730] <= test266151307()
                                require _18730 + mem[_18730] + 31 < _18730 + return_data.size
                                _18764 = mem[_18730 + mem[_18730]]
                                if mem[_18730 + mem[_18730]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_18730 + mem[_18730]]) + 1 < 0 or _18730 + ceil32(return_data.size) + ceil32(32 * mem[_18730 + mem[_18730]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _18730 + ceil32(return_data.size) + ceil32(32 * mem[_18730 + mem[_18730]]) + 1
                                mem[_18730 + ceil32(return_data.size)] = _18764
                                require _18748 + (32 * _18764) + 32 <= return_data.size
                                mem[_18730 + ceil32(return_data.size) + 32 len ceil32(32 * _18764)] = mem[_18730 + _18748 + 32 len ceil32(32 * _18764)]
                                if 1 >= _18764:
                                    revert with 0, 50
                                _21215 = mem[_18730 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18730 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18730 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21340 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21350 = mem[_21340]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21215) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21340]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / mem[_21340] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / mem[_21340]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21679 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21745 = mem[_21679]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21906 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21906] > !_21745:
                                            revert with 0, 17
                                        if mem[_21906] + _21745 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21906] + _21745:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21906] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6) + (_21745 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21680 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21747 = mem[_21680]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21907 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21907] > !_21747:
                                            revert with 0, 17
                                        if mem[_21907] + _21747 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21907] + _21747:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21907] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6) + (_21747 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21350 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18730 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18730 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21382 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21405 = mem[_21382]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21382]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / mem[_21382] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / mem[_21382]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21884 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21957 = mem[_21884]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22100 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22100] > !_21957:
                                                revert with 0, 17
                                            if mem[_22100] + _21957 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22100] + _21957:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22100] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6) + (_21957 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21885 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21959 = mem[_21885]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22101 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22101] > !_21959:
                                                revert with 0, 17
                                            if mem[_22101] + _21959 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22101] + _21959:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22101] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6) + (_21959 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21405 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18730 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18730 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22818 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22829 = mem[_22818]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22818]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / mem[_22818] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / mem[_22818]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22947 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22975 = mem[_22947]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23074 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23074] > !_22975:
                                                revert with 0, 17
                                            if mem[_23074] + _22975 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23074] + _22975:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23074] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6) + (_22975 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22948 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22977 = mem[_22948]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23075 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23075] > !_22977:
                                                revert with 0, 17
                                            if mem[_23075] + _22977 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23075] + _22977:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23075] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6) + (_22977 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / s * t) / _22829 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12042 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12042]:
                                        revert with 0, 50
                                    mem[_12042 + 32] = token1Address
                                    if 1 >= mem[_12042]:
                                        revert with 0, 50
                                    mem[_12042 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12042 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12042 + 100] = 1
                                    mem[_12042 + 132] = 64
                                    mem[_12042 + 164] = mem[_12042]
                                    idx = 0
                                    u = _12042 + 32
                                    v = _12042 + 196
                                    while idx < mem[_12042]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12042 + (32 * mem[_12042]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15530 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15563 = mem[_15530]
                                    require mem[_15530] <= test266151307()
                                    require _15530 + mem[_15530] + 31 < _15530 + return_data.size
                                    _15587 = mem[_15530 + mem[_15530]]
                                    if mem[_15530 + mem[_15530]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15530 + mem[_15530]]) + 1 < 0 or _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1
                                    mem[_15530 + ceil32(return_data.size)] = _15587
                                    require _15563 + (32 * _15587) + 32 <= return_data.size
                                    mem[_15530 + ceil32(return_data.size) + 32 len ceil32(32 * _15587)] = mem[_15530 + _15563 + 32 len ceil32(32 * _15587)]
                                    var117002 = _15530 + ceil32(return_data.size) + ceil32(32 * _15587) + 32
                                    if 1 >= _15587:
                                        revert with 0, 50
                                    _18693 = mem[_15530 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18911 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18925 = mem[_18911]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18693) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18911]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / mem[_18911] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / mem[_18911]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19284 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19363 = mem[_19284]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19563 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19563] > !_19363:
                                                revert with 0, 17
                                            if mem[_19563] + _19363 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19563] + _19363:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19563] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6) + (_19363 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19285 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19365 = mem[_19285]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19564 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19564] > !_19365:
                                                revert with 0, 17
                                            if mem[_19564] + _19365 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19564] + _19365:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19564] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6) + (_19365 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693) / _18925 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18968 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19001 = mem[_18968]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18968]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / mem[_18968] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / mem[_18968]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19531 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19622 = mem[_19531]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19809 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19809] > !_19622:
                                                    revert with 0, 17
                                                if mem[_19809] + _19622 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19809] + _19622:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19809] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6) + (_19622 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19532 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19624 = mem[_19532]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19810 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19810] > !_19624:
                                                    revert with 0, 17
                                                if mem[_19810] + _19624 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19810] + _19624:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19810] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6) + (_19624 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / 10^stor259) / _19001 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21287 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21307 = mem[_21287]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21287]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / mem[_21287] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / mem[_21287]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21511 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21551 = mem[_21511]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21708 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21708] > !_21551:
                                                    revert with 0, 17
                                                if mem[_21708] + _21551 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21708] + _21551:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21708] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6) + (_21551 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21512 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21553 = mem[_21512]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21709 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21709] > !_21553:
                                                    revert with 0, 17
                                                if mem[_21709] + _21553 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21709] + _21553:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21709] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6) + (_21553 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18693 / u * v) / _21307 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12109 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12109]:
                                            revert with 0, 50
                                        mem[_12109 + 32] = token1Address
                                        if 1 >= mem[_12109]:
                                            revert with 0, 50
                                        mem[_12109 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12109 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12109 + 100] = 10^stor259
                                        mem[_12109 + 132] = 64
                                        mem[_12109 + 164] = mem[_12109]
                                        idx = 0
                                        u = _12109 + 32
                                        v = _12109 + 196
                                        while idx < mem[_12109]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12109 + (32 * mem[_12109]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15529 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15562 = mem[_15529]
                                        require mem[_15529] <= test266151307()
                                        require _15529 + mem[_15529] + 31 < _15529 + return_data.size
                                        _15586 = mem[_15529 + mem[_15529]]
                                        if mem[_15529 + mem[_15529]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15529 + mem[_15529]]) + 1 < 0 or _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1
                                        mem[_15529 + ceil32(return_data.size)] = _15586
                                        require _15562 + (32 * _15586) + 32 <= return_data.size
                                        mem[_15529 + ceil32(return_data.size) + 32 len ceil32(32 * _15586)] = mem[_15529 + _15562 + 32 len ceil32(32 * _15586)]
                                        var122002 = _15529 + ceil32(return_data.size) + ceil32(32 * _15586) + 32
                                        if 1 >= _15586:
                                            revert with 0, 50
                                        _18692 = mem[_15529 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18910 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18924 = mem[_18910]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18692) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18910]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / mem[_18910] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / mem[_18910]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19282 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19360 = mem[_19282]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19561 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19561] > !_19360:
                                                    revert with 0, 17
                                                if mem[_19561] + _19360 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19561] + _19360:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19561] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6) + (_19360 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19283 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19362 = mem[_19283]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19562 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19562] > !_19362:
                                                    revert with 0, 17
                                                if mem[_19562] + _19362 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19562] + _19362:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19562] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6) + (_19362 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692) / _18924 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18967 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18998 = mem[_18967]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18967]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / mem[_18967] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / mem[_18967]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19529 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19615 = mem[_19529]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19804 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19804] > !_19615:
                                                        revert with 0, 17
                                                    if mem[_19804] + _19615 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19804] + _19615:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19804] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6) + (_19615 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19530 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19617 = mem[_19530]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19805 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19805] > !_19617:
                                                        revert with 0, 17
                                                    if mem[_19805] + _19617 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19805] + _19617:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19805] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6) + (_19617 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / 10^stor259) / _18998 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21286 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21306 = mem[_21286]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21286]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / mem[_21286] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / mem[_21286]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21509 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21548 = mem[_21509]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21706 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21706] > !_21548:
                                                        revert with 0, 17
                                                    if mem[_21706] + _21548 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21706] + _21548:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21706] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6) + (_21548 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21510 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21550 = mem[_21510]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21707 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21707] > !_21550:
                                                        revert with 0, 17
                                                    if mem[_21707] + _21550 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21707] + _21550:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21707] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6) + (_21550 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18692 / u * v) / _21306 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _15549 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15549]:
                                            revert with 0, 50
                                        mem[_15549 + 32] = token1Address
                                        if 1 >= mem[_15549]:
                                            revert with 0, 50
                                        mem[_15549 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15549 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15549 + 100] = u * v
                                        mem[_15549 + 132] = 64
                                        mem[_15549 + 164] = mem[_15549]
                                        idx = 0
                                        u = _15549 + 32
                                        v = _15549 + 196
                                        while idx < mem[_15549]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15549 + (32 * mem[_15549]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18728 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18746 = mem[_18728]
                                        require mem[_18728] <= test266151307()
                                        require _18728 + mem[_18728] + 31 < _18728 + return_data.size
                                        _18762 = mem[_18728 + mem[_18728]]
                                        if mem[_18728 + mem[_18728]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18728 + mem[_18728]]) + 1 < 0 or _18728 + ceil32(return_data.size) + ceil32(32 * mem[_18728 + mem[_18728]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18728 + ceil32(return_data.size) + ceil32(32 * mem[_18728 + mem[_18728]]) + 1
                                        mem[_18728 + ceil32(return_data.size)] = _18762
                                        require _18746 + (32 * _18762) + 32 <= return_data.size
                                        mem[_18728 + ceil32(return_data.size) + 32 len ceil32(32 * _18762)] = mem[_18728 + _18746 + 32 len ceil32(32 * _18762)]
                                        if 1 >= _18762:
                                            revert with 0, 50
                                        _21213 = mem[_18728 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18728 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18728 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21339 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21349 = mem[_21339]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21213) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21339]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / mem[_21339] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / mem[_21339]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21677 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21742 = mem[_21677]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21904 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21904] > !_21742:
                                                    revert with 0, 17
                                                if mem[_21904] + _21742 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21904] + _21742:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21904] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6) + (_21742 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21678 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21744 = mem[_21678]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21905 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21905] > !_21744:
                                                    revert with 0, 17
                                                if mem[_21905] + _21744 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21905] + _21744:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21905] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6) + (_21744 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213) / _21349 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18728 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18728 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21381 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21402 = mem[_21381]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21381]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / mem[_21381] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / mem[_21381]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21881 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21950 = mem[_21881]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22095 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22095] > !_21950:
                                                        revert with 0, 17
                                                    if mem[_22095] + _21950 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22095] + _21950:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22095] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6) + (_21950 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21882 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21952 = mem[_21882]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22096 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22096] > !_21952:
                                                        revert with 0, 17
                                                    if mem[_22096] + _21952 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22096] + _21952:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22096] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6) + (_21952 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / 10^stor259) / _21402 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18728 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18728 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22817 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22828 = mem[_22817]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22817]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / mem[_22817] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / mem[_22817]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22945 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22972 = mem[_22945]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23072] > !_22972:
                                                        revert with 0, 17
                                                    if mem[_23072] + _22972 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23072] + _22972:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6) + (_22972 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22946 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22974 = mem[_22946]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23073 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23073] > !_22974:
                                                        revert with 0, 17
                                                    if mem[_23073] + _22974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23073] + _22974:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23073] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6) + (_22974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21213 / u * v) / _22828 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _11957 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11957]:
                                    revert with 0, 50
                                mem[_11957 + 32] = token1Address
                                if 1 >= mem[_11957]:
                                    revert with 0, 50
                                mem[_11957 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_11957 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11957 + 100] = 10^18
                                mem[_11957 + 132] = 64
                                mem[_11957 + 164] = mem[_11957]
                                idx = 0
                                u = _11957 + 32
                                v = _11957 + 196
                                while idx < mem[_11957]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11957 + (32 * mem[_11957]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15531 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15564 = mem[_15531]
                                require mem[_15531] <= test266151307()
                                require _15531 + mem[_15531] + 31 < _15531 + return_data.size
                                _15588 = mem[_15531 + mem[_15531]]
                                if mem[_15531 + mem[_15531]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15531 + mem[_15531]]) + 1 < 0 or _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1
                                mem[_15531 + ceil32(return_data.size)] = _15588
                                require _15564 + (32 * _15588) + 32 <= return_data.size
                                mem[_15531 + ceil32(return_data.size) + 32 len ceil32(32 * _15588)] = mem[_15531 + _15564 + 32 len ceil32(32 * _15588)]
                                var111002 = _15531 + ceil32(return_data.size) + ceil32(32 * _15588) + 32
                                if 1 >= _15588:
                                    revert with 0, 50
                                _18694 = mem[_15531 + ceil32(return_data.size) + 64]
                                _18715 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18715]:
                                    revert with 0, 50
                                mem[_18715 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18715]:
                                    revert with 0, 50
                                mem[_18715 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18715 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18715 + 100] = _18694
                                mem[_18715 + 132] = 64
                                mem[_18715 + 164] = mem[_18715]
                                idx = 0
                                u = _18715 + 32
                                v = _18715 + 196
                                while idx < mem[_18715]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18715 + (32 * mem[_18715]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21227 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21233 = mem[_21227]
                                require mem[_21227] <= test266151307()
                                require _21227 + mem[_21227] + 31 < _21227 + return_data.size
                                _21239 = mem[_21227 + mem[_21227]]
                                if mem[_21227 + mem[_21227]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21227 + mem[_21227]]) + 1 < 0 or _21227 + ceil32(return_data.size) + ceil32(32 * mem[_21227 + mem[_21227]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21227 + ceil32(return_data.size) + ceil32(32 * mem[_21227 + mem[_21227]]) + 1
                                mem[_21227 + ceil32(return_data.size)] = _21239
                                require _21233 + (32 * _21239) + 32 <= return_data.size
                                mem[_21227 + ceil32(return_data.size) + 32 len ceil32(32 * _21239)] = mem[_21227 + _21233 + 32 len ceil32(32 * _21239)]
                                if 1 >= _21239:
                                    revert with 0, 50
                                _22785 = mem[_21227 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21227 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21227 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22847 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22852 = mem[_22847]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22785) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22847]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / mem[_22847] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / mem[_22847]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23057 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23093 = mem[_23057]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23177 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23177] > !_23093:
                                            revert with 0, 17
                                        if mem[_23177] + _23093 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23177] + _23093:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23177] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6) + (_23093 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23058 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23095 = mem[_23058]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23178 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23178] > !_23095:
                                            revert with 0, 17
                                        if mem[_23178] + _23095 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23178] + _23095:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23178] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6) + (_23095 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785) / _22852 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21227 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21227 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22867 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22880 = mem[_22867]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22867]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / mem[_22867] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / mem[_22867]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23167 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23206 = mem[_23167]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23274 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23274] > !_23206:
                                                revert with 0, 17
                                            if mem[_23274] + _23206 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23274] + _23206:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6) + (_23206 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23168 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23208 = mem[_23168]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23275 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23275] > !_23208:
                                                revert with 0, 17
                                            if mem[_23275] + _23208 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23275] + _23208:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23275] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6) + (_23208 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / 10^stor259) / _22880 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21227 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21227 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23510 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23515 = mem[_23510]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23510]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / mem[_23510] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / mem[_23510]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23555 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23568 = mem[_23555]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23606 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23606] > !_23568:
                                                revert with 0, 17
                                            if mem[_23606] + _23568 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23606] + _23568:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23606] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6) + (_23568 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23556 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23570 = mem[_23556]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23607 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23607] > !_23570:
                                                revert with 0, 17
                                            if mem[_23607] + _23570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23607] + _23570:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23607] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6) + (_23570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7967 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22785 / u * v) / _23515 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7978 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _7981 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _7978 + (32 * _7981) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7981)] = mem[(2 * ceil32(return_data.size)) + _7978 + 224 len ceil32(32 * _7981)]
                    if 1 >= _7981:
                        revert with 0, 50
                    _11866 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12095 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12095]:
                                    revert with 0, 50
                                mem[_12095 + 32] = token1Address
                                if 1 >= mem[_12095]:
                                    revert with 0, 50
                                mem[_12095 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12095 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12095 + 100] = 1
                                mem[_12095 + 132] = 64
                                mem[_12095 + 164] = mem[_12095]
                                idx = 0
                                s = _12095 + 32
                                t = _12095 + 196
                                while idx < mem[_12095]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12095 + (32 * mem[_12095]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15525 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15559 = mem[_15525]
                                require mem[_15525] <= test266151307()
                                require _15525 + mem[_15525] + 31 < _15525 + return_data.size
                                _15583 = mem[_15525 + mem[_15525]]
                                if mem[_15525 + mem[_15525]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15525 + mem[_15525]]) + 1 < 0 or _15525 + ceil32(return_data.size) + ceil32(32 * mem[_15525 + mem[_15525]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15525 + ceil32(return_data.size) + ceil32(32 * mem[_15525 + mem[_15525]]) + 1
                                mem[_15525 + ceil32(return_data.size)] = _15583
                                require _15559 + (32 * _15583) + 32 <= return_data.size
                                mem[_15525 + ceil32(return_data.size) + 32 len ceil32(32 * _15583)] = mem[_15525 + _15559 + 32 len ceil32(32 * _15583)]
                                if 1 >= _15583:
                                    revert with 0, 50
                                _18687 = mem[_15525 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15525 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15525 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18909 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18923 = mem[_18909]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18687) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18909]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / mem[_18909] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / mem[_18909]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19280 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19355 = mem[_19280]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19558 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19558] > !_19355:
                                            revert with 0, 17
                                        if mem[_19558] + _19355 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19558] + _19355:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19558] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6) + (_19355 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19281 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19357 = mem[_19281]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19559 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19559] > !_19357:
                                            revert with 0, 17
                                        if mem[_19559] + _19357 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19559] + _19357:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19559] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6) + (_19357 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687) / _18923 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15525 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15525 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18965 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18995 = mem[_18965]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18965]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / mem[_18965] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / mem[_18965]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19526 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19606 = mem[_19526]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19796 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19796] > !_19606:
                                                revert with 0, 17
                                            if mem[_19796] + _19606 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19796] + _19606:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19796] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6) + (_19606 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19527 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19608 = mem[_19527]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19797 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19797] > !_19608:
                                                revert with 0, 17
                                            if mem[_19797] + _19608 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19797] + _19608:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19797] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6) + (_19608 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / 10^stor259) / _18995 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15525 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15525 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21284 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21305 = mem[_21284]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21284]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / mem[_21284] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / mem[_21284]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21507 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21543 = mem[_21507]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21701 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21701] > !_21543:
                                                revert with 0, 17
                                            if mem[_21701] + _21543 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21701] + _21543:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21701] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6) + (_21543 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21508 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21545 = mem[_21508]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21702 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21702] > !_21545:
                                                revert with 0, 17
                                            if mem[_21702] + _21545 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21702] + _21545:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21702] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6) + (_21545 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18687 / s * t) / _21305 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12156 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12156]:
                                        revert with 0, 50
                                    mem[_12156 + 32] = token1Address
                                    if 1 >= mem[_12156]:
                                        revert with 0, 50
                                    mem[_12156 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12156 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12156 + 100] = 10^stor259
                                    mem[_12156 + 132] = 64
                                    mem[_12156 + 164] = mem[_12156]
                                    idx = 0
                                    s = _12156 + 32
                                    t = _12156 + 196
                                    while idx < mem[_12156]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12156 + (32 * mem[_12156]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15524 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15558 = mem[_15524]
                                    require mem[_15524] <= test266151307()
                                    require _15524 + mem[_15524] + 31 < _15524 + return_data.size
                                    _15582 = mem[_15524 + mem[_15524]]
                                    if mem[_15524 + mem[_15524]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15524 + mem[_15524]]) + 1 < 0 or _15524 + ceil32(return_data.size) + ceil32(32 * mem[_15524 + mem[_15524]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15524 + ceil32(return_data.size) + ceil32(32 * mem[_15524 + mem[_15524]]) + 1
                                    mem[_15524 + ceil32(return_data.size)] = _15582
                                    require _15558 + (32 * _15582) + 32 <= return_data.size
                                    mem[_15524 + ceil32(return_data.size) + 32 len ceil32(32 * _15582)] = mem[_15524 + _15558 + 32 len ceil32(32 * _15582)]
                                    var117002 = _15524 + ceil32(return_data.size) + ceil32(32 * _15582) + 32
                                    if 1 >= _15582:
                                        revert with 0, 50
                                    _18686 = mem[_15524 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15524 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15524 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18908 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18922 = mem[_18908]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18686) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18908]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / mem[_18908] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / mem[_18908]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19278 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19352 = mem[_19278]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19556 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19556] > !_19352:
                                                revert with 0, 17
                                            if mem[_19556] + _19352 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19556] + _19352:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19556] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6) + (_19352 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19279 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19354 = mem[_19279]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19557 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19557] > !_19354:
                                                revert with 0, 17
                                            if mem[_19557] + _19354 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19557] + _19354:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19557] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6) + (_19354 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686) / _18922 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15524 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15524 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18964 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18992 = mem[_18964]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18964]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / mem[_18964] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / mem[_18964]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19524 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19599 = mem[_19524]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19791 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19791] > !_19599:
                                                    revert with 0, 17
                                                if mem[_19791] + _19599 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19791] + _19599:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19791] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6) + (_19599 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19525 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19601 = mem[_19525]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19792 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19792] > !_19601:
                                                    revert with 0, 17
                                                if mem[_19792] + _19601 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19792] + _19601:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19792] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6) + (_19601 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / 10^stor259) / _18992 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15524 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15524 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21283 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21304 = mem[_21283]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21283]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / mem[_21283] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / mem[_21283]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21505 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21540 = mem[_21505]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21699 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21699] > !_21540:
                                                    revert with 0, 17
                                                if mem[_21699] + _21540 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21699] + _21540:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21699] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6) + (_21540 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21506 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21542 = mem[_21506]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21700 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21700] > !_21542:
                                                    revert with 0, 17
                                                if mem[_21700] + _21542 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21700] + _21542:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21700] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6) + (_21542 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18686 / s * t) / _21304 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _15547 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15547]:
                                        revert with 0, 50
                                    mem[_15547 + 32] = token1Address
                                    if 1 >= mem[_15547]:
                                        revert with 0, 50
                                    mem[_15547 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15547 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15547 + 100] = s * t
                                    mem[_15547 + 132] = 64
                                    mem[_15547 + 164] = mem[_15547]
                                    idx = 0
                                    s = _15547 + 32
                                    t = _15547 + 196
                                    while idx < mem[_15547]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15547 + (32 * mem[_15547]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18726 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18744 = mem[_18726]
                                    require mem[_18726] <= test266151307()
                                    require _18726 + mem[_18726] + 31 < _18726 + return_data.size
                                    _18760 = mem[_18726 + mem[_18726]]
                                    if mem[_18726 + mem[_18726]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18726 + mem[_18726]]) + 1 < 0 or _18726 + ceil32(return_data.size) + ceil32(32 * mem[_18726 + mem[_18726]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18726 + ceil32(return_data.size) + ceil32(32 * mem[_18726 + mem[_18726]]) + 1
                                    mem[_18726 + ceil32(return_data.size)] = _18760
                                    require _18744 + (32 * _18760) + 32 <= return_data.size
                                    mem[_18726 + ceil32(return_data.size) + 32 len ceil32(32 * _18760)] = mem[_18726 + _18744 + 32 len ceil32(32 * _18760)]
                                    var122002 = _18726 + ceil32(return_data.size) + ceil32(32 * _18760) + 32
                                    if 1 >= _18760:
                                        revert with 0, 50
                                    _21211 = mem[_18726 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18726 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18726 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21338 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21348 = mem[_21338]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _21211) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21338]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / mem[_21338] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / mem[_21338]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21675 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21739 = mem[_21675]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21902 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21902] > !_21739:
                                                revert with 0, 17
                                            if mem[_21902] + _21739 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21902] + _21739:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21902] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6) + (_21739 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21676 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21741 = mem[_21676]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21903 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21903] > !_21741:
                                                revert with 0, 17
                                            if mem[_21903] + _21741 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21903] + _21741:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21903] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6) + (_21741 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211) / _21348 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18726 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18726 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21380 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21399 = mem[_21380]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21380]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / mem[_21380] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / mem[_21380]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21878 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21943 = mem[_21878]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22090 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22090] > !_21943:
                                                    revert with 0, 17
                                                if mem[_22090] + _21943 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22090] + _21943:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22090] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6) + (_21943 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21879 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21945 = mem[_21879]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22091 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22091] > !_21945:
                                                    revert with 0, 17
                                                if mem[_22091] + _21945 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22091] + _21945:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22091] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6) + (_21945 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / 10^stor259) / _21399 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18726 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18726 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22816 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22827 = mem[_22816]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22816]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / mem[_22816] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / mem[_22816]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22943 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22969 = mem[_22943]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23070 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23070] > !_22969:
                                                    revert with 0, 17
                                                if mem[_23070] + _22969 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23070] + _22969:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23070] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6) + (_22969 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22944 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22971 = mem[_22944]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23071 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23071] > !_22971:
                                                    revert with 0, 17
                                                if mem[_23071] + _22971 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23071] + _22971:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23071] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6) + (_22971 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21211 / s * t) / _22827 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _11993 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_11993]:
                                revert with 0, 50
                            mem[_11993 + 32] = token1Address
                            if 1 >= mem[_11993]:
                                revert with 0, 50
                            mem[_11993 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_11993 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_11993 + 100] = 10^18
                            mem[_11993 + 132] = 64
                            mem[_11993 + 164] = mem[_11993]
                            idx = 0
                            s = _11993 + 32
                            t = _11993 + 196
                            while idx < mem[_11993]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _11993 + (32 * mem[_11993]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15526 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15560 = mem[_15526]
                            require mem[_15526] <= test266151307()
                            require _15526 + mem[_15526] + 31 < _15526 + return_data.size
                            _15584 = mem[_15526 + mem[_15526]]
                            if mem[_15526 + mem[_15526]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_15526 + mem[_15526]]) + 1 < 0 or _15526 + ceil32(return_data.size) + ceil32(32 * mem[_15526 + mem[_15526]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _15526 + ceil32(return_data.size) + ceil32(32 * mem[_15526 + mem[_15526]]) + 1
                            mem[_15526 + ceil32(return_data.size)] = _15584
                            require _15560 + (32 * _15584) + 32 <= return_data.size
                            mem[_15526 + ceil32(return_data.size) + 32 len ceil32(32 * _15584)] = mem[_15526 + _15560 + 32 len ceil32(32 * _15584)]
                            var106002 = _15526 + ceil32(return_data.size) + ceil32(32 * _15584) + 32
                            var106005 = _15526 + _15560 + ceil32(32 * _15584) + 32
                            if 1 >= _15584:
                                revert with 0, 50
                            _18688 = mem[_15526 + ceil32(return_data.size) + 64]
                            _18713 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18713]:
                                revert with 0, 50
                            mem[_18713 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18713]:
                                revert with 0, 50
                            mem[_18713 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18713 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18713 + 100] = _18688
                            mem[_18713 + 132] = 64
                            mem[_18713 + 164] = mem[_18713]
                            idx = 0
                            s = _18713 + 32
                            t = _18713 + 196
                            while idx < mem[_18713]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18713 + (32 * mem[_18713]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21226 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21232 = mem[_21226]
                            require mem[_21226] <= test266151307()
                            require _21226 + mem[_21226] + 31 < _21226 + return_data.size
                            _21238 = mem[_21226 + mem[_21226]]
                            if mem[_21226 + mem[_21226]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21226 + mem[_21226]]) + 1 < 0 or _21226 + ceil32(return_data.size) + ceil32(32 * mem[_21226 + mem[_21226]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21226 + ceil32(return_data.size) + ceil32(32 * mem[_21226 + mem[_21226]]) + 1
                            mem[_21226 + ceil32(return_data.size)] = _21238
                            require _21232 + (32 * _21238) + 32 <= return_data.size
                            mem[_21226 + ceil32(return_data.size) + 32 len ceil32(32 * _21238)] = mem[_21226 + _21232 + 32 len ceil32(32 * _21238)]
                            if 1 >= _21238:
                                revert with 0, 50
                            _22784 = mem[_21226 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21226 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21226 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22846 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22851 = mem[_22846]
                                if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _22784) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22846]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / mem[_22846] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / mem[_22846]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23055 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23090 = mem[_23055]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23175 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23175] > !_23090:
                                        revert with 0, 17
                                    if mem[_23175] + _23090 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23175] + _23090:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23175] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6) + (_23090 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23056 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23092 = mem[_23056]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23176 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23176] > !_23092:
                                        revert with 0, 17
                                    if mem[_23176] + _23092 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23176] + _23092:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23176] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6) + (_23092 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784) / _22851 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21226 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21226 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22866 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22877 = mem[_22866]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22866]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / mem[_22866] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / mem[_22866]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23165 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23199 = mem[_23165]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23269 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23269] > !_23199:
                                            revert with 0, 17
                                        if mem[_23269] + _23199 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23269] + _23199:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23269] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6) + (_23199 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23166 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23201 = mem[_23166]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23270 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23270] > !_23201:
                                            revert with 0, 17
                                        if mem[_23270] + _23201 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23270] + _23201:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23270] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6) + (_23201 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / 10^stor259) / _22877 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21226 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11866 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21226 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23509 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23514 = mem[_23509]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11866) + (Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23509]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / mem[_23509] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / mem[_23509]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23553 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23565 = mem[_23553]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23604 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23604] > !_23565:
                                            revert with 0, 17
                                        if mem[_23604] + _23565 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23604] + _23565:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23604] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6) + (_23565 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23554 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23567 = mem[_23554]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23605 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23605] > !_23567:
                                            revert with 0, 17
                                        if mem[_23605] + _23567 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23605] + _23567:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23605] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6) + (_23567 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22784 / s * t) / _23514 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12154 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12154]:
                                        revert with 0, 50
                                    mem[_12154 + 32] = token1Address
                                    if 1 >= mem[_12154]:
                                        revert with 0, 50
                                    mem[_12154 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12154 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12154 + 100] = 1
                                    mem[_12154 + 132] = 64
                                    mem[_12154 + 164] = mem[_12154]
                                    idx = 0
                                    s = _12154 + 32
                                    t = _12154 + 196
                                    while idx < mem[_12154]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12154 + (32 * mem[_12154]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15520 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15555 = mem[_15520]
                                    require mem[_15520] <= test266151307()
                                    require _15520 + mem[_15520] + 31 < _15520 + return_data.size
                                    _15579 = mem[_15520 + mem[_15520]]
                                    if mem[_15520 + mem[_15520]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_15520 + mem[_15520]]) + 1 < 0 or _15520 + ceil32(return_data.size) + ceil32(32 * mem[_15520 + mem[_15520]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _15520 + ceil32(return_data.size) + ceil32(32 * mem[_15520 + mem[_15520]]) + 1
                                    mem[_15520 + ceil32(return_data.size)] = _15579
                                    require _15555 + (32 * _15579) + 32 <= return_data.size
                                    mem[_15520 + ceil32(return_data.size) + 32 len ceil32(32 * _15579)] = mem[_15520 + _15555 + 32 len ceil32(32 * _15579)]
                                    var117002 = _15520 + ceil32(return_data.size) + ceil32(32 * _15579) + 32
                                    if 1 >= _15579:
                                        revert with 0, 50
                                    _18681 = mem[_15520 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15520 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15520 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18907 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18921 = mem[_18907]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18681) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18907]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / mem[_18907] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / mem[_18907]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19276 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19347 = mem[_19276]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19553 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19553] > !_19347:
                                                revert with 0, 17
                                            if mem[_19553] + _19347 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19553] + _19347:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19553] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6) + (_19347 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19277 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19349 = mem[_19277]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19554 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19554] > !_19349:
                                                revert with 0, 17
                                            if mem[_19554] + _19349 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19554] + _19349:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19554] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6) + (_19349 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681) / _18921 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15520 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15520 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18962 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18989 = mem[_18962]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18962]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / mem[_18962] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / mem[_18962]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19521 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19590 = mem[_19521]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19783 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19783] > !_19590:
                                                    revert with 0, 17
                                                if mem[_19783] + _19590 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19783] + _19590:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19783] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6) + (_19590 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19522 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19592 = mem[_19522]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19784 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19784] > !_19592:
                                                    revert with 0, 17
                                                if mem[_19784] + _19592 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19784] + _19592:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19784] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6) + (_19592 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / 10^stor259) / _18989 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15520 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15520 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21281 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21303 = mem[_21281]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21281]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / mem[_21281] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / mem[_21281]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21503 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21535 = mem[_21503]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21694 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21694] > !_21535:
                                                    revert with 0, 17
                                                if mem[_21694] + _21535 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21694] + _21535:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21694] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6) + (_21535 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21504 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21537 = mem[_21504]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21695 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21695] > !_21537:
                                                    revert with 0, 17
                                                if mem[_21695] + _21537 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21695] + _21537:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21695] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6) + (_21537 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18681 / s * t) / _21303 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12240 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12240]:
                                            revert with 0, 50
                                        mem[_12240 + 32] = token1Address
                                        if 1 >= mem[_12240]:
                                            revert with 0, 50
                                        mem[_12240 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12240 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12240 + 100] = 10^stor259
                                        mem[_12240 + 132] = 64
                                        mem[_12240 + 164] = mem[_12240]
                                        idx = 0
                                        s = _12240 + 32
                                        t = _12240 + 196
                                        while idx < mem[_12240]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12240 + (32 * mem[_12240]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15519 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15554 = mem[_15519]
                                        require mem[_15519] <= test266151307()
                                        require _15519 + mem[_15519] + 31 < _15519 + return_data.size
                                        _15578 = mem[_15519 + mem[_15519]]
                                        if mem[_15519 + mem[_15519]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_15519 + mem[_15519]]) + 1 < 0 or _15519 + ceil32(return_data.size) + ceil32(32 * mem[_15519 + mem[_15519]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _15519 + ceil32(return_data.size) + ceil32(32 * mem[_15519 + mem[_15519]]) + 1
                                        mem[_15519 + ceil32(return_data.size)] = _15578
                                        require _15554 + (32 * _15578) + 32 <= return_data.size
                                        mem[_15519 + ceil32(return_data.size) + 32 len ceil32(32 * _15578)] = mem[_15519 + _15554 + 32 len ceil32(32 * _15578)]
                                        var122002 = _15519 + ceil32(return_data.size) + ceil32(32 * _15578) + 32
                                        if 1 >= _15578:
                                            revert with 0, 50
                                        _18680 = mem[_15519 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15519 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15519 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18906 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18920 = mem[_18906]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18680) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18906]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / mem[_18906] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / mem[_18906]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19274 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19344 = mem[_19274]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19551 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19551] > !_19344:
                                                    revert with 0, 17
                                                if mem[_19551] + _19344 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19551] + _19344:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19551] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6) + (_19344 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19275 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19346 = mem[_19275]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19552 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19552] > !_19346:
                                                    revert with 0, 17
                                                if mem[_19552] + _19346 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19552] + _19346:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19552] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6) + (_19346 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680) / _18920 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15519 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15519 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18961 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18986 = mem[_18961]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18961]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / mem[_18961] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / mem[_18961]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19519 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19583 = mem[_19519]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19778 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19778] > !_19583:
                                                        revert with 0, 17
                                                    if mem[_19778] + _19583 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19778] + _19583:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19778] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6) + (_19583 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19520 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19585 = mem[_19520]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19779 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19779] > !_19585:
                                                        revert with 0, 17
                                                    if mem[_19779] + _19585 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19779] + _19585:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19779] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6) + (_19585 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / 10^stor259) / _18986 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15519 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15519 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21280 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21302 = mem[_21280]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21280]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / mem[_21280] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / mem[_21280]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21501 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21532 = mem[_21501]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21692 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21692] > !_21532:
                                                        revert with 0, 17
                                                    if mem[_21692] + _21532 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21692] + _21532:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21692] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6) + (_21532 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21502 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21534 = mem[_21502]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21693 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21693] > !_21534:
                                                        revert with 0, 17
                                                    if mem[_21693] + _21534 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21693] + _21534:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21693] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6) + (_21534 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18680 / s * t) / _21302 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _15545 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15545]:
                                            revert with 0, 50
                                        mem[_15545 + 32] = token1Address
                                        if 1 >= mem[_15545]:
                                            revert with 0, 50
                                        mem[_15545 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15545 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15545 + 100] = s * t
                                        mem[_15545 + 132] = 64
                                        mem[_15545 + 164] = mem[_15545]
                                        idx = 0
                                        s = _15545 + 32
                                        t = _15545 + 196
                                        while idx < mem[_15545]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15545 + (32 * mem[_15545]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18724 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18742 = mem[_18724]
                                        require mem[_18724] <= test266151307()
                                        require _18724 + mem[_18724] + 31 < _18724 + return_data.size
                                        _18758 = mem[_18724 + mem[_18724]]
                                        if mem[_18724 + mem[_18724]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18724 + mem[_18724]]) + 1 < 0 or _18724 + ceil32(return_data.size) + ceil32(32 * mem[_18724 + mem[_18724]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18724 + ceil32(return_data.size) + ceil32(32 * mem[_18724 + mem[_18724]]) + 1
                                        mem[_18724 + ceil32(return_data.size)] = _18758
                                        require _18742 + (32 * _18758) + 32 <= return_data.size
                                        mem[_18724 + ceil32(return_data.size) + 32 len ceil32(32 * _18758)] = mem[_18724 + _18742 + 32 len ceil32(32 * _18758)]
                                        var127002 = _18724 + ceil32(return_data.size) + ceil32(32 * _18758) + 32
                                        if 1 >= _18758:
                                            revert with 0, 50
                                        _21209 = mem[_18724 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18724 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18724 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21337 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21347 = mem[_21337]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21209) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21337]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / mem[_21337] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / mem[_21337]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21673 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21736 = mem[_21673]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21900 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21900] > !_21736:
                                                    revert with 0, 17
                                                if mem[_21900] + _21736 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21900] + _21736:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21900] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6) + (_21736 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21674 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21738 = mem[_21674]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21901 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21901] > !_21738:
                                                    revert with 0, 17
                                                if mem[_21901] + _21738 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21901] + _21738:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21901] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6) + (_21738 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209) / _21347 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18724 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18724 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21379 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21396 = mem[_21379]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21379]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / mem[_21379] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / mem[_21379]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21875 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21936 = mem[_21875]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22085 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22085] > !_21936:
                                                        revert with 0, 17
                                                    if mem[_22085] + _21936 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22085] + _21936:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22085] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6) + (_21936 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21876 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21938 = mem[_21876]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22086 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22086] > !_21938:
                                                        revert with 0, 17
                                                    if mem[_22086] + _21938 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22086] + _21938:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22086] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6) + (_21938 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / 10^stor259) / _21396 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18724 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18724 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22815 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22826 = mem[_22815]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22815]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / mem[_22815] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / mem[_22815]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22941 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22966 = mem[_22941]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23068 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23068] > !_22966:
                                                        revert with 0, 17
                                                    if mem[_23068] + _22966 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23068] + _22966:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23068] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6) + (_22966 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22942 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22968 = mem[_22942]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23069 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23069] > !_22968:
                                                        revert with 0, 17
                                                    if mem[_23069] + _22968 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23069] + _22968:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23069] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6) + (_22968 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21209 / s * t) / _22826 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _12081 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12081]:
                                    revert with 0, 50
                                mem[_12081 + 32] = token1Address
                                if 1 >= mem[_12081]:
                                    revert with 0, 50
                                mem[_12081 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12081 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12081 + 100] = 10^18
                                mem[_12081 + 132] = 64
                                mem[_12081 + 164] = mem[_12081]
                                idx = 0
                                s = _12081 + 32
                                t = _12081 + 196
                                while idx < mem[_12081]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12081 + (32 * mem[_12081]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15521 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15556 = mem[_15521]
                                require mem[_15521] <= test266151307()
                                require _15521 + mem[_15521] + 31 < _15521 + return_data.size
                                _15580 = mem[_15521 + mem[_15521]]
                                if mem[_15521 + mem[_15521]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_15521 + mem[_15521]]) + 1 < 0 or _15521 + ceil32(return_data.size) + ceil32(32 * mem[_15521 + mem[_15521]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _15521 + ceil32(return_data.size) + ceil32(32 * mem[_15521 + mem[_15521]]) + 1
                                mem[_15521 + ceil32(return_data.size)] = _15580
                                require _15556 + (32 * _15580) + 32 <= return_data.size
                                mem[_15521 + ceil32(return_data.size) + 32 len ceil32(32 * _15580)] = mem[_15521 + _15556 + 32 len ceil32(32 * _15580)]
                                var111002 = _15521 + ceil32(return_data.size) + ceil32(32 * _15580) + 32
                                if 1 >= _15580:
                                    revert with 0, 50
                                _18682 = mem[_15521 + ceil32(return_data.size) + 64]
                                _18711 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18711]:
                                    revert with 0, 50
                                mem[_18711 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18711]:
                                    revert with 0, 50
                                mem[_18711 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18711 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18711 + 100] = _18682
                                mem[_18711 + 132] = 64
                                mem[_18711 + 164] = mem[_18711]
                                idx = 0
                                s = _18711 + 32
                                t = _18711 + 196
                                while idx < mem[_18711]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18711 + (32 * mem[_18711]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21225 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21231 = mem[_21225]
                                require mem[_21225] <= test266151307()
                                require _21225 + mem[_21225] + 31 < _21225 + return_data.size
                                _21237 = mem[_21225 + mem[_21225]]
                                if mem[_21225 + mem[_21225]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21225 + mem[_21225]]) + 1 < 0 or _21225 + ceil32(return_data.size) + ceil32(32 * mem[_21225 + mem[_21225]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21225 + ceil32(return_data.size) + ceil32(32 * mem[_21225 + mem[_21225]]) + 1
                                mem[_21225 + ceil32(return_data.size)] = _21237
                                require _21231 + (32 * _21237) + 32 <= return_data.size
                                mem[_21225 + ceil32(return_data.size) + 32 len ceil32(32 * _21237)] = mem[_21225 + _21231 + 32 len ceil32(32 * _21237)]
                                if 1 >= _21237:
                                    revert with 0, 50
                                _22783 = mem[_21225 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21225 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21225 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22845 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22850 = mem[_22845]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22783) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22845]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / mem[_22845] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / mem[_22845]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23053 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23087 = mem[_23053]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23173 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23173] > !_23087:
                                            revert with 0, 17
                                        if mem[_23173] + _23087 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23173] + _23087:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23173] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6) + (_23087 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23054 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23089 = mem[_23054]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23174 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23174] > !_23089:
                                            revert with 0, 17
                                        if mem[_23174] + _23089 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23174] + _23089:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23174] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6) + (_23089 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783) / _22850 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21225 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21225 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22865 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22874 = mem[_22865]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22865]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / mem[_22865] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / mem[_22865]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23163 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23192 = mem[_23163]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23264 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23264] > !_23192:
                                                revert with 0, 17
                                            if mem[_23264] + _23192 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23264] + _23192:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23264] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6) + (_23192 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23164 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23194 = mem[_23164]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23265 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23265] > !_23194:
                                                revert with 0, 17
                                            if mem[_23265] + _23194 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23265] + _23194:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23265] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6) + (_23194 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / 10^stor259) / _22874 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21225 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21225 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23508 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23513 = mem[_23508]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23508]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / mem[_23508] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / mem[_23508]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23551 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23562 = mem[_23551]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23602 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23602] > !_23562:
                                                revert with 0, 17
                                            if mem[_23602] + _23562 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23602] + _23562:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23602] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6) + (_23562 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23552 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23564 = mem[_23552]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23603 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23603] > !_23564:
                                                revert with 0, 17
                                            if mem[_23603] + _23564 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23603] + _23564:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23603] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6) + (_23564 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22783 / s * t) / _23513 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _15718 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15718]:
                                        revert with 0, 50
                                    mem[_15718 + 32] = token1Address
                                    if 1 >= mem[_15718]:
                                        revert with 0, 50
                                    mem[_15718 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15718 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15718 + 100] = 1
                                    mem[_15718 + 132] = 64
                                    mem[_15718 + 164] = mem[_15718]
                                    idx = 0
                                    u = _15718 + 32
                                    v = _15718 + 196
                                    while idx < mem[_15718]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15718 + (32 * mem[_15718]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18722 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18740 = mem[_18722]
                                    require mem[_18722] <= test266151307()
                                    require _18722 + mem[_18722] + 31 < _18722 + return_data.size
                                    _18756 = mem[_18722 + mem[_18722]]
                                    if mem[_18722 + mem[_18722]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_18722 + mem[_18722]]) + 1 < 0 or _18722 + ceil32(return_data.size) + ceil32(32 * mem[_18722 + mem[_18722]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _18722 + ceil32(return_data.size) + ceil32(32 * mem[_18722 + mem[_18722]]) + 1
                                    mem[_18722 + ceil32(return_data.size)] = _18756
                                    require _18740 + (32 * _18756) + 32 <= return_data.size
                                    mem[_18722 + ceil32(return_data.size) + 32 len ceil32(32 * _18756)] = mem[_18722 + _18740 + 32 len ceil32(32 * _18756)]
                                    var122002 = _18722 + ceil32(return_data.size) + ceil32(32 * _18756) + 32
                                    if 1 >= _18756:
                                        revert with 0, 50
                                    _21205 = mem[_18722 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18722 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18722 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21336 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21346 = mem[_21336]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21205) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21336]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / mem[_21336] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / mem[_21336]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21671 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21731 = mem[_21671]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21897 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21897] > !_21731:
                                                revert with 0, 17
                                            if mem[_21897] + _21731 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21897] + _21731:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21897] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6) + (_21731 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21672 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21733 = mem[_21672]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21898 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21898] > !_21733:
                                                revert with 0, 17
                                            if mem[_21898] + _21733 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21898] + _21733:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21898] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6) + (_21733 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205) / _21346 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18722 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18722 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21377 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21393 = mem[_21377]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21377]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / mem[_21377] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / mem[_21377]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21873 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21927 = mem[_21873]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22077 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22077] > !_21927:
                                                    revert with 0, 17
                                                if mem[_22077] + _21927 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22077] + _21927:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22077] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6) + (_21927 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21874 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21929 = mem[_21874]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22078 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22078] > !_21929:
                                                    revert with 0, 17
                                                if mem[_22078] + _21929 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22078] + _21929:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6) + (_21929 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / 10^stor259) / _21393 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18722 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18722 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22813 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22825 = mem[_22813]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22813]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / mem[_22813] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / mem[_22813]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22939 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22961 = mem[_22939]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23063 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23063] > !_22961:
                                                    revert with 0, 17
                                                if mem[_23063] + _22961 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23063] + _22961:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23063] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6) + (_22961 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22940 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22963 = mem[_22940]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23064 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23064] > !_22963:
                                                    revert with 0, 17
                                                if mem[_23064] + _22963 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23064] + _22963:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23064] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6) + (_22963 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21205 / u * v) / _22825 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _15788 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15788]:
                                            revert with 0, 50
                                        mem[_15788 + 32] = token1Address
                                        if 1 >= mem[_15788]:
                                            revert with 0, 50
                                        mem[_15788 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15788 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15788 + 100] = 10^stor259
                                        mem[_15788 + 132] = 64
                                        mem[_15788 + 164] = mem[_15788]
                                        idx = 0
                                        u = _15788 + 32
                                        v = _15788 + 196
                                        while idx < mem[_15788]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15788 + (32 * mem[_15788]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18721 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18739 = mem[_18721]
                                        require mem[_18721] <= test266151307()
                                        require _18721 + mem[_18721] + 31 < _18721 + return_data.size
                                        _18755 = mem[_18721 + mem[_18721]]
                                        if mem[_18721 + mem[_18721]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_18721 + mem[_18721]]) + 1 < 0 or _18721 + ceil32(return_data.size) + ceil32(32 * mem[_18721 + mem[_18721]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _18721 + ceil32(return_data.size) + ceil32(32 * mem[_18721 + mem[_18721]]) + 1
                                        mem[_18721 + ceil32(return_data.size)] = _18755
                                        require _18739 + (32 * _18755) + 32 <= return_data.size
                                        mem[_18721 + ceil32(return_data.size) + 32 len ceil32(32 * _18755)] = mem[_18721 + _18739 + 32 len ceil32(32 * _18755)]
                                        var127002 = _18721 + ceil32(return_data.size) + ceil32(32 * _18755) + 32
                                        if 1 >= _18755:
                                            revert with 0, 50
                                        _21204 = mem[_18721 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18721 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18721 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21335 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21345 = mem[_21335]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21204) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21335]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / mem[_21335] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / mem[_21335]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21669 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21728 = mem[_21669]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21895 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21895] > !_21728:
                                                    revert with 0, 17
                                                if mem[_21895] + _21728 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21895] + _21728:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21895] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6) + (_21728 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21670 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21730 = mem[_21670]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21896 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21896] > !_21730:
                                                    revert with 0, 17
                                                if mem[_21896] + _21730 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21896] + _21730:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21896] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6) + (_21730 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204) / _21345 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18721 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18721 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21376 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21390 = mem[_21376]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21376]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / mem[_21376] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / mem[_21376]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21871 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21920 = mem[_21871]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22072] > !_21920:
                                                        revert with 0, 17
                                                    if mem[_22072] + _21920 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22072] + _21920:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6) + (_21920 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21872 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21922 = mem[_21872]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22073 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22073] > !_21922:
                                                        revert with 0, 17
                                                    if mem[_22073] + _21922 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22073] + _21922:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22073] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6) + (_21922 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / 10^stor259) / _21390 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18721 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18721 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22812 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22824 = mem[_22812]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22812]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / mem[_22812] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / mem[_22812]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22937 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22958 = mem[_22937]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23061 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23061] > !_22958:
                                                        revert with 0, 17
                                                    if mem[_23061] + _22958 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23061] + _22958:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23061] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6) + (_22958 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22938 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22960 = mem[_22938]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23062 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23062] > !_22960:
                                                        revert with 0, 17
                                                    if mem[_23062] + _22960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23062] + _22960:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23062] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6) + (_22960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21204 / u * v) / _22824 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _18736 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_18736]:
                                            revert with 0, 50
                                        mem[_18736 + 32] = token1Address
                                        if 1 >= mem[_18736]:
                                            revert with 0, 50
                                        mem[_18736 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_18736 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_18736 + 100] = u * v
                                        mem[_18736 + 132] = 64
                                        mem[_18736 + 164] = mem[_18736]
                                        idx = 0
                                        u = _18736 + 32
                                        v = _18736 + 196
                                        while idx < mem[_18736]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _18736 + (32 * mem[_18736]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21223 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21229 = mem[_21223]
                                        require mem[_21223] <= test266151307()
                                        require _21223 + mem[_21223] + 31 < _21223 + return_data.size
                                        _21235 = mem[_21223 + mem[_21223]]
                                        if mem[_21223 + mem[_21223]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_21223 + mem[_21223]]) + 1 < 0 or _21223 + ceil32(return_data.size) + ceil32(32 * mem[_21223 + mem[_21223]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _21223 + ceil32(return_data.size) + ceil32(32 * mem[_21223 + mem[_21223]]) + 1
                                        mem[_21223 + ceil32(return_data.size)] = _21235
                                        require _21229 + (32 * _21235) + 32 <= return_data.size
                                        mem[_21223 + ceil32(return_data.size) + 32 len ceil32(32 * _21235)] = mem[_21223 + _21229 + 32 len ceil32(32 * _21235)]
                                        if 1 >= _21235:
                                            revert with 0, 50
                                        _22781 = mem[_21223 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21223 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21223 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22844 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22849 = mem[_22844]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22781) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22844]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / mem[_22844] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / mem[_22844]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23051 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23084 = mem[_23051]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23171 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23171] > !_23084:
                                                    revert with 0, 17
                                                if mem[_23171] + _23084 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23171] + _23084:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23171] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6) + (_23084 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23052 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23086 = mem[_23052]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23172 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23172] > !_23086:
                                                    revert with 0, 17
                                                if mem[_23172] + _23086 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23172] + _23086:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23172] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6) + (_23086 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781) / _22849 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21223 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21223 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22864 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22871 = mem[_22864]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22864]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / mem[_22864] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / mem[_22864]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23160 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23185 = mem[_23160]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23259 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23259] > !_23185:
                                                        revert with 0, 17
                                                    if mem[_23259] + _23185 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23259] + _23185:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23259] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6) + (_23185 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23161 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23187 = mem[_23161]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23260 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23260] > !_23187:
                                                        revert with 0, 17
                                                    if mem[_23260] + _23187 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23260] + _23187:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23260] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6) + (_23187 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / 10^stor259) / _22871 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21223 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21223 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23507 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23512 = mem[_23507]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23507]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / mem[_23507] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / mem[_23507]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23549 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23559 = mem[_23549]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23600 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23600] > !_23559:
                                                        revert with 0, 17
                                                    if mem[_23600] + _23559 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23600] + _23559:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23600] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6) + (_23559 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23550 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23561 = mem[_23550]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23601 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23601] > !_23561:
                                                        revert with 0, 17
                                                    if mem[_23601] + _23561 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23601] + _23561:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23601] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6) + (_23561 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22781 / u * v) / _23512 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _15625 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15625]:
                                    revert with 0, 50
                                mem[_15625 + 32] = token1Address
                                if 1 >= mem[_15625]:
                                    revert with 0, 50
                                mem[_15625 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_15625 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15625 + 100] = 10^18
                                mem[_15625 + 132] = 64
                                mem[_15625 + 164] = mem[_15625]
                                idx = 0
                                u = _15625 + 32
                                v = _15625 + 196
                                while idx < mem[_15625]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15625 + (32 * mem[_15625]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18723 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18741 = mem[_18723]
                                require mem[_18723] <= test266151307()
                                require _18723 + mem[_18723] + 31 < _18723 + return_data.size
                                _18757 = mem[_18723 + mem[_18723]]
                                if mem[_18723 + mem[_18723]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_18723 + mem[_18723]]) + 1 < 0 or _18723 + ceil32(return_data.size) + ceil32(32 * mem[_18723 + mem[_18723]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _18723 + ceil32(return_data.size) + ceil32(32 * mem[_18723 + mem[_18723]]) + 1
                                mem[_18723 + ceil32(return_data.size)] = _18757
                                require _18741 + (32 * _18757) + 32 <= return_data.size
                                mem[_18723 + ceil32(return_data.size) + 32 len ceil32(32 * _18757)] = mem[_18723 + _18741 + 32 len ceil32(32 * _18757)]
                                var116002 = _18723 + ceil32(return_data.size) + ceil32(32 * _18757) + 32
                                if 1 >= _18757:
                                    revert with 0, 50
                                _21206 = mem[_18723 + ceil32(return_data.size) + 64]
                                _21221 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21221]:
                                    revert with 0, 50
                                mem[_21221 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21221]:
                                    revert with 0, 50
                                mem[_21221 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21221 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21221 + 100] = _21206
                                mem[_21221 + 132] = 64
                                mem[_21221 + 164] = mem[_21221]
                                idx = 0
                                u = _21221 + 32
                                v = _21221 + 196
                                while idx < mem[_21221]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21221 + (32 * mem[_21221]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22787 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22788 = mem[_22787]
                                require mem[_22787] <= test266151307()
                                require _22787 + mem[_22787] + 31 < _22787 + return_data.size
                                _22789 = mem[_22787 + mem[_22787]]
                                if mem[_22787 + mem[_22787]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_22787 + mem[_22787]]) + 1 < 0 or _22787 + ceil32(return_data.size) + ceil32(32 * mem[_22787 + mem[_22787]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _22787 + ceil32(return_data.size) + ceil32(32 * mem[_22787 + mem[_22787]]) + 1
                                mem[_22787 + ceil32(return_data.size)] = _22789
                                require _22788 + (32 * _22789) + 32 <= return_data.size
                                mem[_22787 + ceil32(return_data.size) + 32 len ceil32(32 * _22789)] = mem[_22787 + _22788 + 32 len ceil32(32 * _22789)]
                                if 1 >= _22789:
                                    revert with 0, 50
                                _23496 = mem[_22787 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_22787 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22787 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23519 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23520 = mem[_23519]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23496) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23519]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / mem[_23519] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / mem[_23519]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23598 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23610 = mem[_23598]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23633 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23633] > !_23610:
                                            revert with 0, 17
                                        if mem[_23633] + _23610 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23633] + _23610:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23633] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6) + (_23610 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23599 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23612 = mem[_23599]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23634 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23634] > !_23612:
                                            revert with 0, 17
                                        if mem[_23634] + _23612 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23634] + _23612:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23634] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6) + (_23612 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496) / _23520 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22787 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22787 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23523 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23526 = mem[_23523]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23523]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / mem[_23523] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / mem[_23523]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23631 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23639 = mem[_23631]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23653 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23653] > !_23639:
                                                revert with 0, 17
                                            if mem[_23653] + _23639 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23653] + _23639:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23653] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6) + (_23639 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23632 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23641 = mem[_23632]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23654 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23654] > !_23641:
                                                revert with 0, 17
                                            if mem[_23654] + _23641 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23654] + _23641:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23654] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6) + (_23641 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / 10^stor259) / _23526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22787 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22787 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23699 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23700 = mem[_23699]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23699]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / mem[_23699] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / mem[_23699]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23705 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23707 = mem[_23705]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23714 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23714] > !_23707:
                                                revert with 0, 17
                                            if mem[_23714] + _23707 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23714] + _23707:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23714] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6) + (_23707 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23706 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23709 = mem[_23706]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23715 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23715] > !_23709:
                                                revert with 0, 17
                                            if mem[_23715] + _23709 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23715] + _23709:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23715] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6) + (_23709 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11866 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23496 / u * v) / _23700 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    return memory
      from mem[64]
       len 32
}



}
