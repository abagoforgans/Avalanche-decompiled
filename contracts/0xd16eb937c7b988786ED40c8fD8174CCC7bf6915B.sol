contract main {




// =====================  Runtime code  =====================


#
#  - _getNodesRewardAvailable(address arg1)
#  - _getNodesLastClaimTime(address arg1)
#  - _cashoutNodeReward(address arg1, uint256 arg2)
#  - _distributeRewards()
#  - sub_90219732(?)
#  - sub_a50c28ea(?)
#  - _getRewardAmountOf(address arg1, uint256 arg2)
#
array of uint256 stor1;
array of struct sub_2130fe23;
uint256 nodePrice;
uint256 rewardPerNode;
uint256 claimTime;
address gateKeeperAddress;
uint8 autoDistri; offset 160
uint8 distribution; offset 168
uint128 stor9; offset 160
address tokenAddress;
uint256 gasForDistribution;
uint256 lastDistributionCount;
uint256 lastIndexProcessed;
uint256 totalNodesCreated;
uint256 totalRewardStaked;
uint256 claimDuration;
uint256 sub_b137b854;
uint256 sub_af89f87c;

function sub_2130fe23(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_2130fe23[address(arg1)].field_0
}

function claimTime() payable {
    return claimTime
}

function gateKeeper() payable {
    return gateKeeperAddress
}

function distribution() payable {
    return bool(distribution)
}

function rewardPerNode() payable {
    return rewardPerNode
}

function lastIndexProcessed() payable {
    return lastIndexProcessed
}

function autoDistri() payable {
    return bool(autoDistri)
}

function totalRewardStaked() payable {
    return totalRewardStaked
}

function claimDuration() payable {
    return claimDuration
}

function sub_af89f87c(?) payable {
    return sub_af89f87c
}

function sub_b137b854(?) payable {
    return sub_b137b854
}

function totalNodesCreated() payable {
    return totalNodesCreated
}

function gasForDistribution() payable {
    return gasForDistribution
}

function nodePrice() payable {
    return nodePrice
}

function lastDistributionCount() payable {
    return lastDistributionCount
}

function token() payable {
    return tokenAddress
}

function _fallback() payable {
    revert
}

function sub_0df5c9d2(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    sub_af89f87c = arg1
}

function sub_d9b3d6db(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    sub_b137b854 = arg1
}

function sub_90b36e3a(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    claimDuration = arg1
}

function _changeNodePrice(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    nodePrice = arg1
}

function _changeClaimTime(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    claimTime = arg1
}

function _changeRewardPerNode(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    rewardPerNode = arg1
}

function _changeGasDistri(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    gasForDistribution = arg1
}

function setToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    tokenAddress = arg1
}

function _changeAutoDistri(bool arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    stor9 = Mask(96, 0, arg1)
}

function sub_2d6f594f(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if tokenAddress != msg.sender:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
    if not sub_2130fe23[address(arg1)].field_0:
        revert with 0, 50
    if sub_2130fe23[address(arg1)].field_768 > !arg2:
        revert with 0, 17
    sub_2130fe23[address(arg1)].field_768 += arg2
}

function _getNodeNumberOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(0x1561ea6232796f4e5f33e83cb3c90dffaf775b31)
    delegate 0x1561ea6232796f4e5f33e83cb3c90dffaf775b31.0x732a2ccf with:
         gas gas_remaining wei
        args 0, arg1
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return delegate.return_data[0]
}

function _isNodeOwner(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(0x1561ea6232796f4e5f33e83cb3c90dffaf775b31)
    delegate 0x1561ea6232796f4e5f33e83cb3c90dffaf775b31.0x732a2ccf with:
         gas gas_remaining wei
        args 0, arg1
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return (delegate.return_data[0] > 0)
}

function _getNodesNames(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[100] = 0
    mem[132] = arg1
    require ext_code.size(0x1561ea6232796f4e5f33e83cb3c90dffaf775b31)
    delegate 0x1561ea6232796f4e5f33e83cb3c90dffaf775b31.0x732a2ccf with:
         gas gas_remaining wei
        args 0, arg1
    mem[96] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if delegate.return_data[0] <= 0:
        revert with 0, 'GET NAMES: NO NODE OWNER'
    mem[0] = arg1
    mem[32] = 4
    mem[64] = ceil32(return_data.size) + (32 * sub_2130fe23[address(arg1)].field_0) + 128
    mem[ceil32(return_data.size) + 96] = sub_2130fe23[address(arg1)].field_0
    s = ceil32(return_data.size) + 128
    idx = 0
    while idx < sub_2130fe23[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 4)
        _57 = mem[64]
        mem[64] = mem[64] + 128
        if sub_2130fe23[address(arg1)][idx].field_0:
            if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _63 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_63] = uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                    if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                        mem[_63 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_63 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _63 + 32
                        u = sha3(mem[0])
                        while _63 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                mem[_57] = _63
                mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _57
                s = s + 32
                idx = idx + 1
                continue 
            if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                revert with 0, 34
            if not sub_2130fe23[address(arg1)][idx].field_1:
                mem[_57] = _63
                mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _57
                s = s + 32
                idx = idx + 1
                continue 
            if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                mem[_63 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                mem[_57] = _63
                mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _57
                s = s + 32
                idx = idx + 1
                continue 
            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
            mem[_63 + 32] = sub_2130fe23[address(arg1)][idx].field_0
            t = _63 + 32
            u = sha3(mem[0])
            while _63 + sub_2130fe23[address(arg1)][u].field_1 > t:
                mem[t + 32] = stor1[u]
                t = t + 32
                u = u + 1
                continue 
            mem[_57] = _63
            mem[_57 + 32] = sub_2130fe23[address(arg1)][u].field_256
            mem[_57 + 64] = sub_2130fe23[address(arg1)][u].field_512
            mem[_57 + 96] = sub_2130fe23[address(arg1)][u].field_768
            mem[t] = _57
            t = t + 32
            u = u + 1
            continue 
        if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
            revert with 0, 34
        _68 = mem[64]
        mem[64] = mem[64] + ceil32(sub_2130fe23[address(arg1)][idx].field_1) + 32
        mem[_68] = sub_2130fe23[address(arg1)][idx].field_1
        if sub_2130fe23[address(arg1)][idx].field_0:
            if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                mem[_57] = _68
                mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _57
                s = s + 32
                idx = idx + 1
                continue 
            if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                mem[_68 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                mem[_57] = _68
                mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _57
                s = s + 32
                idx = idx + 1
                continue 
            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
            mem[_68 + 32] = sub_2130fe23[address(arg1)][idx].field_0
            t = _68 + 32
            u = sha3(mem[0])
            while _68 + (uint255(sub_2130fe23[address(arg1)][u].field_0) * 0.5) > t:
                mem[t + 32] = stor1[u]
                t = t + 32
                u = u + 1
                continue 
            mem[_57] = _68
            mem[_57 + 32] = sub_2130fe23[address(arg1)][u].field_256
            mem[_57 + 64] = sub_2130fe23[address(arg1)][u].field_512
            mem[_57 + 96] = sub_2130fe23[address(arg1)][u].field_768
            mem[t] = _57
            t = t + 32
            u = u + 1
            continue 
        if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
            revert with 0, 34
        if sub_2130fe23[address(arg1)][idx].field_1:
            if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                mem[_68 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
            else:
                mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                mem[_68 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                t = _68 + 32
                u = sha3(mem[0])
                while _68 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                    mem[t + 32] = stor1[u]
                    t = t + 32
                    u = u + 1
                    continue 
        mem[_57] = _68
        mem[_57 + 32] = sub_2130fe23[address(arg1)][idx].field_256
        mem[_57 + 64] = sub_2130fe23[address(arg1)][idx].field_512
        mem[_57 + 96] = sub_2130fe23[address(arg1)][idx].field_768
        mem[s] = _57
        s = s + 32
        idx = idx + 1
        continue 
    _54 = mem[ceil32(return_data.size) + 96]
    _55 = mem[64]
    mem[64] = mem[64] + 128
    mem[_55] = 96
    mem[_55 + 32] = 0
    mem[_55 + 64] = 0
    mem[_55 + 96] = 0
    if 0 >= mem[ceil32(return_data.size) + 96]:
        revert with 0, 50
    _60 = mem[mem[ceil32(return_data.size) + 128]]
    _61 = mem[64]
    mem[64] = mem[64] + 64
    mem[_61] = 1
    mem[_61 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    s = _60
    t = _55
    while idx < _54:
        if idx >= mem[ceil32(return_data.size) + 96]:
            revert with 0, 50
        _101 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        _102 = mem[mem[(32 * idx) + ceil32(return_data.size) + 128]]
        _103 = mem[64]
        _105 = mem[s]
        t = 0
        while t < _105:
            mem[t + _103 + 32] = mem[t + s + 32]
            t = t + 32
            continue 
        if ceil32(_105) <= _105:
            _132 = mem[_61]
            s = 0
            while s < _132:
                mem[s + _103 + _105 + 32] = mem[s + _61 + 32]
                s = s + 32
                continue 
            if ceil32(_132) <= _132:
                _156 = mem[_102]
                s = 0
                while s < _156:
                    mem[s + _103 + _105 + _132 + 32] = mem[s + _102 + 32]
                    s = s + 32
                    continue 
                if ceil32(_156) <= _156:
                    _176 = mem[64]
                    mem[mem[64]] = _156 + _103 + _105 + _132 - mem[64]
                    mem[64] = _156 + _103 + _105 + _132 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _176
                    t = _101
                    continue 
                mem[_103 + _105 + _132 + _156 + 32] = 0
                _180 = mem[64]
                mem[mem[64]] = _156 + _103 + _105 + _132 - mem[64]
                mem[64] = _156 + _103 + _105 + _132 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _180
                t = _101
                continue 
            mem[_103 + _105 + _132 + 32] = 0
            _158 = mem[_102]
            s = 0
            while s < _158:
                mem[s + _103 + _105 + _132 + 32] = mem[s + _102 + 32]
                s = s + 32
                continue 
            if ceil32(_158) <= _158:
                _177 = mem[64]
                mem[mem[64]] = _158 + _103 + _105 + _132 - mem[64]
                mem[64] = _158 + _103 + _105 + _132 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _177
                t = _101
                continue 
            mem[_103 + _105 + _132 + _158 + 32] = 0
            _181 = mem[64]
            mem[mem[64]] = _158 + _103 + _105 + _132 - mem[64]
            mem[64] = _158 + _103 + _105 + _132 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _181
            t = _101
            continue 
        mem[_103 + _105 + 32] = 0
        _134 = mem[_61]
        s = 0
        while s < _134:
            mem[s + _103 + _105 + 32] = mem[s + _61 + 32]
            s = s + 32
            continue 
        if ceil32(_134) <= _134:
            _157 = mem[_102]
            s = 0
            while s < _157:
                mem[s + _103 + _105 + _134 + 32] = mem[s + _102 + 32]
                s = s + 32
                continue 
            if ceil32(_157) <= _157:
                _178 = mem[64]
                mem[mem[64]] = _157 + _103 + _105 + _134 - mem[64]
                mem[64] = _157 + _103 + _105 + _134 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _178
                t = _101
                continue 
            mem[_103 + _105 + _134 + _157 + 32] = 0
            _182 = mem[64]
            mem[mem[64]] = _157 + _103 + _105 + _134 - mem[64]
            mem[64] = _157 + _103 + _105 + _134 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _182
            t = _101
            continue 
        mem[_103 + _105 + _134 + 32] = 0
        _159 = mem[_102]
        s = 0
        while s < _159:
            mem[s + _103 + _105 + _134 + 32] = mem[s + _102 + 32]
            s = s + 32
            continue 
        if ceil32(_159) <= _159:
            _179 = mem[64]
            mem[mem[64]] = _159 + _103 + _105 + _134 - mem[64]
            mem[64] = _159 + _103 + _105 + _134 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _179
            t = _101
            continue 
        mem[_103 + _105 + _134 + _159 + 32] = 0
        _183 = mem[64]
        mem[mem[64]] = _159 + _103 + _105 + _134 - mem[64]
        mem[64] = _159 + _103 + _105 + _134 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _183
        t = _101
        continue 
    mem[mem[64]] = 32
    _104 = mem[s]
    mem[mem[64] + 32] = mem[s]
    mem[mem[64] + 64 len ceil32(_104)] = mem[s + 32 len ceil32(_104)]
    if ceil32(_104) > _104:
        mem[mem[64] + _104 + 64] = 0
    return 32, mem[mem[64] + 32 len ceil32(_104) + 32]
}

function _getNodesCreationTime(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[100] = 0
    mem[132] = arg1
    require ext_code.size(0x1561ea6232796f4e5f33e83cb3c90dffaf775b31)
    delegate 0x1561ea6232796f4e5f33e83cb3c90dffaf775b31.0x732a2ccf with:
         gas gas_remaining wei
        args 0, arg1
    mem[96] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if delegate.return_data[0] <= 0:
        revert with 0, 'GET CREATIME: NO NODE OWNER'
    mem[0] = arg1
    mem[32] = 4
    mem[64] = ceil32(return_data.size) + (32 * sub_2130fe23[address(arg1)].field_0) + 128
    mem[ceil32(return_data.size) + 96] = sub_2130fe23[address(arg1)].field_0
    s = ceil32(return_data.size) + 128
    idx = 0
    while idx < sub_2130fe23[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 4)
        _59 = mem[64]
        mem[64] = mem[64] + 128
        if sub_2130fe23[address(arg1)][idx].field_0:
            if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _64 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_64] = uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                    if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                        mem[_64 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_64 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _64 + 32
                        u = sha3(mem[0])
                        while _64 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                mem[_59] = _64
                mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _59
                s = s + 32
                idx = idx + 1
                continue 
            if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                revert with 0, 34
            if not sub_2130fe23[address(arg1)][idx].field_1:
                mem[_59] = _64
                mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _59
                s = s + 32
                idx = idx + 1
                continue 
            if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                mem[_64 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                mem[_59] = _64
                mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _59
                s = s + 32
                idx = idx + 1
                continue 
            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
            mem[_64 + 32] = sub_2130fe23[address(arg1)][idx].field_0
            t = _64 + 32
            u = sha3(mem[0])
            while _64 + sub_2130fe23[address(arg1)][u].field_1 > t:
                mem[t + 32] = stor1[u]
                t = t + 32
                u = u + 1
                continue 
            mem[_59] = _64
            mem[_59 + 32] = sub_2130fe23[address(arg1)][u].field_256
            mem[_59 + 64] = sub_2130fe23[address(arg1)][u].field_512
            mem[_59 + 96] = sub_2130fe23[address(arg1)][u].field_768
            mem[t] = _59
            t = t + 32
            u = u + 1
            continue 
        if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
            revert with 0, 34
        _66 = mem[64]
        mem[64] = mem[64] + ceil32(sub_2130fe23[address(arg1)][idx].field_1) + 32
        mem[_66] = sub_2130fe23[address(arg1)][idx].field_1
        if sub_2130fe23[address(arg1)][idx].field_0:
            if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                mem[_59] = _66
                mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _59
                s = s + 32
                idx = idx + 1
                continue 
            if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                mem[_66 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                mem[_59] = _66
                mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                mem[s] = _59
                s = s + 32
                idx = idx + 1
                continue 
            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
            mem[_66 + 32] = sub_2130fe23[address(arg1)][idx].field_0
            t = _66 + 32
            u = sha3(mem[0])
            while _66 + (uint255(sub_2130fe23[address(arg1)][u].field_0) * 0.5) > t:
                mem[t + 32] = stor1[u]
                t = t + 32
                u = u + 1
                continue 
            mem[_59] = _66
            mem[_59 + 32] = sub_2130fe23[address(arg1)][u].field_256
            mem[_59 + 64] = sub_2130fe23[address(arg1)][u].field_512
            mem[_59 + 96] = sub_2130fe23[address(arg1)][u].field_768
            mem[t] = _59
            t = t + 32
            u = u + 1
            continue 
        if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
            revert with 0, 34
        if sub_2130fe23[address(arg1)][idx].field_1:
            if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                mem[_66 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
            else:
                mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                mem[_66 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                t = _66 + 32
                u = sha3(mem[0])
                while _66 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                    mem[t + 32] = stor1[u]
                    t = t + 32
                    u = u + 1
                    continue 
        mem[_59] = _66
        mem[_59 + 32] = sub_2130fe23[address(arg1)][idx].field_256
        mem[_59 + 64] = sub_2130fe23[address(arg1)][idx].field_512
        mem[_59 + 96] = sub_2130fe23[address(arg1)][idx].field_768
        mem[s] = _59
        s = s + 32
        idx = idx + 1
        continue 
    _56 = mem[ceil32(return_data.size) + 96]
    _57 = mem[64]
    mem[64] = mem[64] + 128
    mem[_57] = 96
    mem[_57 + 32] = 0
    mem[_57 + 64] = 0
    mem[_57 + 96] = 0
    if 0 >= mem[ceil32(return_data.size) + 96]:
        revert with 0, 50
    _62 = mem[mem[ceil32(return_data.size) + 128] + 32]
    if not mem[mem[ceil32(return_data.size) + 128] + 32]:
        _63 = mem[64]
        mem[64] = mem[64] + 64
        mem[_63] = 1
        mem[_63 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _65 = mem[64]
        mem[64] = mem[64] + 64
        mem[_65] = 1
        mem[_65 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _63
        t = _57
        while idx < _56:
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _106 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            _107 = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
            if not mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]:
                _109 = mem[64]
                mem[64] = mem[64] + 64
                mem[_109] = 1
                mem[_109 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _110 = mem[64]
                _113 = mem[s]
                t = 0
                while t < _113:
                    mem[t + _110 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_113) <= _113:
                    _209 = mem[_65]
                    s = 0
                    while s < _209:
                        mem[s + _110 + _113 + 32] = mem[s + _65 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_209) <= _209:
                        _361 = mem[_109]
                        s = 0
                        while s < _361:
                            mem[s + _110 + _113 + _209 + 32] = mem[s + _109 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_361) <= _361:
                            _497 = mem[64]
                            mem[mem[64]] = _361 + _110 + _113 + _209 - mem[64]
                            mem[64] = _361 + _110 + _113 + _209 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _497
                            t = _106
                            continue 
                        mem[_110 + _113 + _209 + _361 + 32] = 0
                        _503 = mem[64]
                        mem[mem[64]] = _361 + _110 + _113 + _209 - mem[64]
                        mem[64] = _361 + _110 + _113 + _209 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _503
                        t = _106
                        continue 
                    mem[_110 + _113 + _209 + 32] = 0
                    _365 = mem[_109]
                    s = 0
                    while s < _365:
                        mem[s + _110 + _113 + _209 + 32] = mem[s + _109 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_365) <= _365:
                        _498 = mem[64]
                        mem[mem[64]] = _365 + _110 + _113 + _209 - mem[64]
                        mem[64] = _365 + _110 + _113 + _209 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _498
                        t = _106
                        continue 
                    mem[_110 + _113 + _209 + _365 + 32] = 0
                    _504 = mem[64]
                    mem[mem[64]] = _365 + _110 + _113 + _209 - mem[64]
                    mem[64] = _365 + _110 + _113 + _209 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _504
                    t = _106
                    continue 
                mem[_110 + _113 + 32] = 0
                _213 = mem[_65]
                s = 0
                while s < _213:
                    mem[s + _110 + _113 + 32] = mem[s + _65 + 32]
                    s = s + 32
                    continue 
                if ceil32(_213) <= _213:
                    _362 = mem[_109]
                    s = 0
                    while s < _362:
                        mem[s + _110 + _113 + _213 + 32] = mem[s + _109 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_362) <= _362:
                        _499 = mem[64]
                        mem[mem[64]] = _362 + _110 + _113 + _213 - mem[64]
                        mem[64] = _362 + _110 + _113 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _499
                        t = _106
                        continue 
                    mem[_110 + _113 + _213 + _362 + 32] = 0
                    _505 = mem[64]
                    mem[mem[64]] = _362 + _110 + _113 + _213 - mem[64]
                    mem[64] = _362 + _110 + _113 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _505
                    t = _106
                    continue 
                mem[_110 + _113 + _213 + 32] = 0
                _366 = mem[_109]
                s = 0
                while s < _366:
                    mem[s + _110 + _113 + _213 + 32] = mem[s + _109 + 32]
                    s = s + 32
                    continue 
                if ceil32(_366) <= _366:
                    _500 = mem[64]
                    mem[mem[64]] = _366 + _110 + _113 + _213 - mem[64]
                    mem[64] = _366 + _110 + _113 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _500
                    t = _106
                    continue 
                mem[_110 + _113 + _213 + _366 + 32] = 0
                _506 = mem[64]
                mem[mem[64]] = _366 + _110 + _113 + _213 - mem[64]
                mem[64] = _366 + _110 + _113 + _213 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _506
                t = _106
                continue 
            u = 0
            t = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _208 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _107
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_208]:
                        revert with 0, 50
                    mem[v + _208 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _355 = mem[64]
                _359 = mem[s]
                t = 0
                while t < _359:
                    mem[t + _355 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_359) <= _359:
                    _489 = mem[_65]
                    s = 0
                    while s < _489:
                        mem[s + _355 + _359 + 32] = mem[s + _65 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_489) <= _489:
                        _695 = mem[_208]
                        s = 0
                        while s < _695:
                            mem[s + _355 + _359 + _489 + 32] = mem[s + _208 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_695) <= _695:
                            _879 = mem[64]
                            mem[mem[64]] = _695 + _355 + _359 + _489 - mem[64]
                            mem[64] = _695 + _355 + _359 + _489 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _879
                            t = _106
                            continue 
                        mem[_355 + _359 + _489 + _695 + 32] = 0
                        _895 = mem[64]
                        mem[mem[64]] = _695 + _355 + _359 + _489 - mem[64]
                        mem[64] = _695 + _355 + _359 + _489 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _895
                        t = _106
                        continue 
                    mem[_355 + _359 + _489 + 32] = 0
                    _703 = mem[_208]
                    s = 0
                    while s < _703:
                        mem[s + _355 + _359 + _489 + 32] = mem[s + _208 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_703) <= _703:
                        _880 = mem[64]
                        mem[mem[64]] = _703 + _355 + _359 + _489 - mem[64]
                        mem[64] = _703 + _355 + _359 + _489 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _880
                        t = _106
                        continue 
                    mem[_355 + _359 + _489 + _703 + 32] = 0
                    _896 = mem[64]
                    mem[mem[64]] = _703 + _355 + _359 + _489 - mem[64]
                    mem[64] = _703 + _355 + _359 + _489 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _896
                    t = _106
                    continue 
                mem[_355 + _359 + 32] = 0
                _495 = mem[_65]
                s = 0
                while s < _495:
                    mem[s + _355 + _359 + 32] = mem[s + _65 + 32]
                    s = s + 32
                    continue 
                if ceil32(_495) <= _495:
                    _696 = mem[_208]
                    s = 0
                    while s < _696:
                        mem[s + _355 + _359 + _495 + 32] = mem[s + _208 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_696) <= _696:
                        _881 = mem[64]
                        mem[mem[64]] = _696 + _355 + _359 + _495 - mem[64]
                        mem[64] = _696 + _355 + _359 + _495 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _881
                        t = _106
                        continue 
                    mem[_355 + _359 + _495 + _696 + 32] = 0
                    _897 = mem[64]
                    mem[mem[64]] = _696 + _355 + _359 + _495 - mem[64]
                    mem[64] = _696 + _355 + _359 + _495 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _897
                    t = _106
                    continue 
                mem[_355 + _359 + _495 + 32] = 0
                _704 = mem[_208]
                s = 0
                while s < _704:
                    mem[s + _355 + _359 + _495 + 32] = mem[s + _208 + 32]
                    s = s + 32
                    continue 
                if ceil32(_704) <= _704:
                    _882 = mem[64]
                    mem[mem[64]] = _704 + _355 + _359 + _495 - mem[64]
                    mem[64] = _704 + _355 + _359 + _495 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _882
                    t = _106
                    continue 
                mem[_355 + _359 + _495 + _704 + 32] = 0
                _898 = mem[64]
                mem[mem[64]] = _704 + _355 + _359 + _495 - mem[64]
                mem[64] = _704 + _355 + _359 + _495 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _898
                t = _106
                continue 
            mem[_208 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _107
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_208]:
                    revert with 0, 50
                mem[v + _208 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _356 = mem[64]
            _360 = mem[s]
            t = 0
            while t < _360:
                mem[t + _356 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_360) <= _360:
                _490 = mem[_65]
                s = 0
                while s < _490:
                    mem[s + _356 + _360 + 32] = mem[s + _65 + 32]
                    s = s + 32
                    continue 
                if ceil32(_490) <= _490:
                    _697 = mem[_208]
                    s = 0
                    while s < _697:
                        mem[s + _356 + _360 + _490 + 32] = mem[s + _208 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_697) <= _697:
                        _883 = mem[64]
                        mem[mem[64]] = _697 + _356 + _360 + _490 - mem[64]
                        mem[64] = _697 + _356 + _360 + _490 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _883
                        t = _106
                        continue 
                    mem[_356 + _360 + _490 + _697 + 32] = 0
                    _899 = mem[64]
                    mem[mem[64]] = _697 + _356 + _360 + _490 - mem[64]
                    mem[64] = _697 + _356 + _360 + _490 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _899
                    t = _106
                    continue 
                mem[_356 + _360 + _490 + 32] = 0
                _705 = mem[_208]
                s = 0
                while s < _705:
                    mem[s + _356 + _360 + _490 + 32] = mem[s + _208 + 32]
                    s = s + 32
                    continue 
                if ceil32(_705) <= _705:
                    _884 = mem[64]
                    mem[mem[64]] = _705 + _356 + _360 + _490 - mem[64]
                    mem[64] = _705 + _356 + _360 + _490 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _884
                    t = _106
                    continue 
                mem[_356 + _360 + _490 + _705 + 32] = 0
                _900 = mem[64]
                mem[mem[64]] = _705 + _356 + _360 + _490 - mem[64]
                mem[64] = _705 + _356 + _360 + _490 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _900
                t = _106
                continue 
            mem[_356 + _360 + 32] = 0
            _496 = mem[_65]
            s = 0
            while s < _496:
                mem[s + _356 + _360 + 32] = mem[s + _65 + 32]
                s = s + 32
                continue 
            if ceil32(_496) <= _496:
                _698 = mem[_208]
                s = 0
                while s < _698:
                    mem[s + _356 + _360 + _496 + 32] = mem[s + _208 + 32]
                    s = s + 32
                    continue 
                if ceil32(_698) <= _698:
                    _885 = mem[64]
                    mem[mem[64]] = _698 + _356 + _360 + _496 - mem[64]
                    mem[64] = _698 + _356 + _360 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _885
                    t = _106
                    continue 
                mem[_356 + _360 + _496 + _698 + 32] = 0
                _901 = mem[64]
                mem[mem[64]] = _698 + _356 + _360 + _496 - mem[64]
                mem[64] = _698 + _356 + _360 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _901
                t = _106
                continue 
            mem[_356 + _360 + _496 + 32] = 0
            _706 = mem[_208]
            s = 0
            while s < _706:
                mem[s + _356 + _360 + _496 + 32] = mem[s + _208 + 32]
                s = s + 32
                continue 
            if ceil32(_706) <= _706:
                _886 = mem[64]
                mem[mem[64]] = _706 + _356 + _360 + _496 - mem[64]
                mem[64] = _706 + _356 + _360 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _886
                t = _106
                continue 
            mem[_356 + _360 + _496 + _706 + 32] = 0
            _902 = mem[64]
            mem[mem[64]] = _706 + _356 + _360 + _496 - mem[64]
            mem[64] = _706 + _356 + _360 + _496 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _902
            t = _106
            continue 
        mem[mem[64]] = 32
        _108 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_108)] = mem[s + 32 len ceil32(_108)]
        if ceil32(_108) > _108:
            mem[mem[64] + _108 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_108) + 32]
    u = 0
    t = mem[mem[ceil32(return_data.size) + 128] + 32]
    while t:
        if u == -1:
            revert with 0, 17
        u = u + 1
        t = t / 10
        continue 
    if u > test266151307():
        revert with 0, 65
    _104 = mem[64]
    mem[mem[64]] = u
    mem[64] = mem[64] + ceil32(u) + 32
    if not u:
        s = u
        idx = _62
        while idx:
            if s < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if s - 1 >= mem[_104]:
                revert with 0, 50
            mem[s + _104 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            s = s - 1
            idx = idx / 10
            continue 
        _206 = mem[64]
        mem[64] = mem[64] + 64
        mem[_206] = 1
        mem[_206 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        t = _104
        u = _57
        while idx < _56:
            if idx >= mem[ceil32(return_data.size) + 96]:
                revert with 0, 50
            _350 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            _351 = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
            if not mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]:
                _363 = mem[64]
                mem[64] = mem[64] + 64
                mem[_363] = 1
                mem[_363 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _367 = mem[64]
                _370 = mem[t]
                u = 0
                while u < _370:
                    mem[u + _367 + 32] = mem[u + t + 32]
                    u = u + 32
                    continue 
                if ceil32(_370) <= _370:
                    _487 = mem[_206]
                    t = 0
                    while t < _487:
                        mem[t + _367 + _370 + 32] = mem[t + _206 + 32]
                        t = t + 32
                        continue 
                    if ceil32(_487) <= _487:
                        _689 = mem[_363]
                        s = 0
                        while s < _689:
                            mem[s + _367 + _370 + _487 + 32] = mem[s + _363 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_689) <= _689:
                            _869 = mem[64]
                            mem[mem[64]] = _689 + _367 + _370 + _487 - mem[64]
                            mem[64] = _689 + _367 + _370 + _487 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _869
                            u = _350
                            continue 
                        mem[_367 + _370 + _487 + _689 + 32] = 0
                        _887 = mem[64]
                        mem[mem[64]] = _689 + _367 + _370 + _487 - mem[64]
                        mem[64] = _689 + _367 + _370 + _487 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _887
                        u = _350
                        continue 
                    mem[_367 + _370 + _487 + 32] = 0
                    _699 = mem[_363]
                    s = 0
                    while s < _699:
                        mem[s + _367 + _370 + _487 + 32] = mem[s + _363 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_699) <= _699:
                        _870 = mem[64]
                        mem[mem[64]] = _699 + _367 + _370 + _487 - mem[64]
                        mem[64] = _699 + _367 + _370 + _487 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _870
                        u = _350
                        continue 
                    mem[_367 + _370 + _487 + _699 + 32] = 0
                    _888 = mem[64]
                    mem[mem[64]] = _699 + _367 + _370 + _487 - mem[64]
                    mem[64] = _699 + _367 + _370 + _487 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _888
                    u = _350
                    continue 
                mem[_367 + _370 + 32] = 0
                _492 = mem[_206]
                s = 0
                while s < _492:
                    mem[s + _367 + _370 + 32] = mem[s + _206 + 32]
                    s = s + 32
                    continue 
                if ceil32(_492) <= _492:
                    _690 = mem[_363]
                    s = 0
                    while s < _690:
                        mem[s + _367 + _370 + _492 + 32] = mem[s + _363 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_690) <= _690:
                        _871 = mem[64]
                        mem[mem[64]] = _690 + _367 + _370 + _492 - mem[64]
                        mem[64] = _690 + _367 + _370 + _492 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _871
                        u = _350
                        continue 
                    mem[_367 + _370 + _492 + _690 + 32] = 0
                    _889 = mem[64]
                    mem[mem[64]] = _690 + _367 + _370 + _492 - mem[64]
                    mem[64] = _690 + _367 + _370 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _889
                    u = _350
                    continue 
                mem[_367 + _370 + _492 + 32] = 0
                _700 = mem[_363]
                s = 0
                while s < _700:
                    mem[s + _367 + _370 + _492 + 32] = mem[s + _363 + 32]
                    s = s + 32
                    continue 
                if ceil32(_700) <= _700:
                    _872 = mem[64]
                    mem[mem[64]] = _700 + _367 + _370 + _492 - mem[64]
                    mem[64] = _700 + _367 + _370 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _872
                    u = _350
                    continue 
                mem[_367 + _370 + _492 + _700 + 32] = 0
                _890 = mem[64]
                mem[mem[64]] = _700 + _367 + _370 + _492 - mem[64]
                mem[64] = _700 + _367 + _370 + _492 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _890
                u = _350
                continue 
            u = 0
            s = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
            while s:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                s = s / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _485 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                s = _351
                while s:
                    if v < 1:
                        revert with 0, 17
                    if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if s < 10 * s / 10:
                        revert with 0, 17
                    if 48 > -uint8(s - (10 * s / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_485]:
                        revert with 0, 50
                    mem[v + _485 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                    v = v - 1
                    s = s / 10
                    continue 
                _683 = mem[64]
                _687 = mem[t]
                s = 0
                while s < _687:
                    mem[s + _683 + 32] = mem[s + t + 32]
                    s = s + 32
                    continue 
                if ceil32(_687) <= _687:
                    _863 = mem[_206]
                    s = 0
                    while s < _863:
                        mem[s + _683 + _687 + 32] = mem[s + _206 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_863) <= _863:
                        _983 = mem[_485]
                        s = 0
                        while s < _983:
                            mem[s + _683 + _687 + _863 + 32] = mem[s + _485 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_983) <= _983:
                            _1063 = mem[64]
                            mem[mem[64]] = _983 + _683 + _687 + _863 - mem[64]
                            mem[64] = _983 + _683 + _687 + _863 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _1063
                            u = _350
                            continue 
                        mem[_683 + _687 + _863 + _983 + 32] = 0
                        _1079 = mem[64]
                        mem[mem[64]] = _983 + _683 + _687 + _863 - mem[64]
                        mem[64] = _983 + _683 + _687 + _863 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1079
                        u = _350
                        continue 
                    mem[_683 + _687 + _863 + 32] = 0
                    _991 = mem[_485]
                    s = 0
                    while s < _991:
                        mem[s + _683 + _687 + _863 + 32] = mem[s + _485 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_991) <= _991:
                        _1064 = mem[64]
                        mem[mem[64]] = _991 + _683 + _687 + _863 - mem[64]
                        mem[64] = _991 + _683 + _687 + _863 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1064
                        u = _350
                        continue 
                    mem[_683 + _687 + _863 + _991 + 32] = 0
                    _1080 = mem[64]
                    mem[mem[64]] = _991 + _683 + _687 + _863 - mem[64]
                    mem[64] = _991 + _683 + _687 + _863 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1080
                    u = _350
                    continue 
                mem[_683 + _687 + 32] = 0
                _867 = mem[_206]
                s = 0
                while s < _867:
                    mem[s + _683 + _687 + 32] = mem[s + _206 + 32]
                    s = s + 32
                    continue 
                if ceil32(_867) <= _867:
                    _984 = mem[_485]
                    s = 0
                    while s < _984:
                        mem[s + _683 + _687 + _867 + 32] = mem[s + _485 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_984) <= _984:
                        _1065 = mem[64]
                        mem[mem[64]] = _984 + _683 + _687 + _867 - mem[64]
                        mem[64] = _984 + _683 + _687 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1065
                        u = _350
                        continue 
                    mem[_683 + _687 + _867 + _984 + 32] = 0
                    _1081 = mem[64]
                    mem[mem[64]] = _984 + _683 + _687 + _867 - mem[64]
                    mem[64] = _984 + _683 + _687 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1081
                    u = _350
                    continue 
                mem[_683 + _687 + _867 + 32] = 0
                _992 = mem[_485]
                s = 0
                while s < _992:
                    mem[s + _683 + _687 + _867 + 32] = mem[s + _485 + 32]
                    s = s + 32
                    continue 
                if ceil32(_992) <= _992:
                    _1066 = mem[64]
                    mem[mem[64]] = _992 + _683 + _687 + _867 - mem[64]
                    mem[64] = _992 + _683 + _687 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1066
                    u = _350
                    continue 
                mem[_683 + _687 + _867 + _992 + 32] = 0
                _1082 = mem[64]
                mem[mem[64]] = _992 + _683 + _687 + _867 - mem[64]
                mem[64] = _992 + _683 + _687 + _867 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1082
                u = _350
                continue 
            mem[_485 + 32 len u] = call.data[calldata.size len u]
            v = u
            s = _351
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_485]:
                    revert with 0, 50
                mem[v + _485 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _684 = mem[64]
            _688 = mem[t]
            s = 0
            while s < _688:
                mem[s + _684 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_688) <= _688:
                _864 = mem[_206]
                s = 0
                while s < _864:
                    mem[s + _684 + _688 + 32] = mem[s + _206 + 32]
                    s = s + 32
                    continue 
                if ceil32(_864) <= _864:
                    _985 = mem[_485]
                    s = 0
                    while s < _985:
                        mem[s + _684 + _688 + _864 + 32] = mem[s + _485 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_985) <= _985:
                        _1067 = mem[64]
                        mem[mem[64]] = _985 + _684 + _688 + _864 - mem[64]
                        mem[64] = _985 + _684 + _688 + _864 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1067
                        u = _350
                        continue 
                    mem[_684 + _688 + _864 + _985 + 32] = 0
                    _1083 = mem[64]
                    mem[mem[64]] = _985 + _684 + _688 + _864 - mem[64]
                    mem[64] = _985 + _684 + _688 + _864 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1083
                    u = _350
                    continue 
                mem[_684 + _688 + _864 + 32] = 0
                _993 = mem[_485]
                s = 0
                while s < _993:
                    mem[s + _684 + _688 + _864 + 32] = mem[s + _485 + 32]
                    s = s + 32
                    continue 
                if ceil32(_993) <= _993:
                    _1068 = mem[64]
                    mem[mem[64]] = _993 + _684 + _688 + _864 - mem[64]
                    mem[64] = _993 + _684 + _688 + _864 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1068
                    u = _350
                    continue 
                mem[_684 + _688 + _864 + _993 + 32] = 0
                _1084 = mem[64]
                mem[mem[64]] = _993 + _684 + _688 + _864 - mem[64]
                mem[64] = _993 + _684 + _688 + _864 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1084
                u = _350
                continue 
            mem[_684 + _688 + 32] = 0
            _868 = mem[_206]
            s = 0
            while s < _868:
                mem[s + _684 + _688 + 32] = mem[s + _206 + 32]
                s = s + 32
                continue 
            if ceil32(_868) <= _868:
                _986 = mem[_485]
                s = 0
                while s < _986:
                    mem[s + _684 + _688 + _868 + 32] = mem[s + _485 + 32]
                    s = s + 32
                    continue 
                if ceil32(_986) <= _986:
                    _1069 = mem[64]
                    mem[mem[64]] = _986 + _684 + _688 + _868 - mem[64]
                    mem[64] = _986 + _684 + _688 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1069
                    u = _350
                    continue 
                mem[_684 + _688 + _868 + _986 + 32] = 0
                _1085 = mem[64]
                mem[mem[64]] = _986 + _684 + _688 + _868 - mem[64]
                mem[64] = _986 + _684 + _688 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1085
                u = _350
                continue 
            mem[_684 + _688 + _868 + 32] = 0
            _994 = mem[_485]
            s = 0
            while s < _994:
                mem[s + _684 + _688 + _868 + 32] = mem[s + _485 + 32]
                s = s + 32
                continue 
            if ceil32(_994) <= _994:
                _1070 = mem[64]
                mem[mem[64]] = _994 + _684 + _688 + _868 - mem[64]
                mem[64] = _994 + _684 + _688 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1070
                u = _350
                continue 
            mem[_684 + _688 + _868 + _994 + 32] = 0
            _1086 = mem[64]
            mem[mem[64]] = _994 + _684 + _688 + _868 - mem[64]
            mem[64] = _994 + _684 + _688 + _868 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1086
            u = _350
            continue 
        mem[mem[64]] = 32
        _357 = mem[t]
        mem[mem[64] + 32] = mem[t]
        mem[mem[64] + 64 len ceil32(_357)] = mem[t + 32 len ceil32(_357)]
        if ceil32(_357) > _357:
            mem[mem[64] + _357 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_357) + 32]
    mem[_104 + 32 len u] = call.data[calldata.size len u]
    s = u
    idx = _62
    while idx:
        if s < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if s - 1 >= mem[_104]:
            revert with 0, 50
        mem[s + _104 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        s = s - 1
        idx = idx / 10
        continue 
    _207 = mem[64]
    mem[64] = mem[64] + 64
    mem[_207] = 1
    mem[_207 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    t = _104
    u = _57
    while idx < _56:
        if idx >= mem[ceil32(return_data.size) + 96]:
            revert with 0, 50
        _353 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        _354 = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
        if not mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]:
            _364 = mem[64]
            mem[64] = mem[64] + 64
            mem[_364] = 1
            mem[_364 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _368 = mem[64]
            _372 = mem[t]
            u = 0
            while u < _372:
                mem[u + _368 + 32] = mem[u + t + 32]
                u = u + 32
                continue 
            if ceil32(_372) <= _372:
                _488 = mem[_207]
                t = 0
                while t < _488:
                    mem[t + _368 + _372 + 32] = mem[t + _207 + 32]
                    t = t + 32
                    continue 
                if ceil32(_488) <= _488:
                    _693 = mem[_364]
                    s = 0
                    while s < _693:
                        mem[s + _368 + _372 + _488 + 32] = mem[s + _364 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_693) <= _693:
                        _875 = mem[64]
                        mem[mem[64]] = _693 + _368 + _372 + _488 - mem[64]
                        mem[64] = _693 + _368 + _372 + _488 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _875
                        u = _353
                        continue 
                    mem[_368 + _372 + _488 + _693 + 32] = 0
                    _891 = mem[64]
                    mem[mem[64]] = _693 + _368 + _372 + _488 - mem[64]
                    mem[64] = _693 + _368 + _372 + _488 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _891
                    u = _353
                    continue 
                mem[_368 + _372 + _488 + 32] = 0
                _701 = mem[_364]
                s = 0
                while s < _701:
                    mem[s + _368 + _372 + _488 + 32] = mem[s + _364 + 32]
                    s = s + 32
                    continue 
                if ceil32(_701) <= _701:
                    _876 = mem[64]
                    mem[mem[64]] = _701 + _368 + _372 + _488 - mem[64]
                    mem[64] = _701 + _368 + _372 + _488 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _876
                    u = _353
                    continue 
                mem[_368 + _372 + _488 + _701 + 32] = 0
                _892 = mem[64]
                mem[mem[64]] = _701 + _368 + _372 + _488 - mem[64]
                mem[64] = _701 + _368 + _372 + _488 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _892
                u = _353
                continue 
            mem[_368 + _372 + 32] = 0
            _494 = mem[_207]
            s = 0
            while s < _494:
                mem[s + _368 + _372 + 32] = mem[s + _207 + 32]
                s = s + 32
                continue 
            if ceil32(_494) <= _494:
                _694 = mem[_364]
                s = 0
                while s < _694:
                    mem[s + _368 + _372 + _494 + 32] = mem[s + _364 + 32]
                    s = s + 32
                    continue 
                if ceil32(_694) <= _694:
                    _877 = mem[64]
                    mem[mem[64]] = _694 + _368 + _372 + _494 - mem[64]
                    mem[64] = _694 + _368 + _372 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _877
                    u = _353
                    continue 
                mem[_368 + _372 + _494 + _694 + 32] = 0
                _893 = mem[64]
                mem[mem[64]] = _694 + _368 + _372 + _494 - mem[64]
                mem[64] = _694 + _368 + _372 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _893
                u = _353
                continue 
            mem[_368 + _372 + _494 + 32] = 0
            _702 = mem[_364]
            s = 0
            while s < _702:
                mem[s + _368 + _372 + _494 + 32] = mem[s + _364 + 32]
                s = s + 32
                continue 
            if ceil32(_702) <= _702:
                _878 = mem[64]
                mem[mem[64]] = _702 + _368 + _372 + _494 - mem[64]
                mem[64] = _702 + _368 + _372 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _878
                u = _353
                continue 
            mem[_368 + _372 + _494 + _702 + 32] = 0
            _894 = mem[64]
            mem[mem[64]] = _702 + _368 + _372 + _494 - mem[64]
            mem[64] = _702 + _368 + _372 + _494 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _894
            u = _353
            continue 
        u = 0
        s = mem[mem[(32 * idx) + ceil32(return_data.size) + 128] + 32]
        while s:
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = s / 10
            continue 
        if u > test266151307():
            revert with 0, 65
        _486 = mem[64]
        mem[mem[64]] = u
        mem[64] = mem[64] + ceil32(u) + 32
        if not u:
            v = u
            s = _354
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_486]:
                    revert with 0, 50
                mem[v + _486 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _685 = mem[64]
            _691 = mem[t]
            s = 0
            while s < _691:
                mem[s + _685 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_691) <= _691:
                _865 = mem[_207]
                s = 0
                while s < _865:
                    mem[s + _685 + _691 + 32] = mem[s + _207 + 32]
                    s = s + 32
                    continue 
                if ceil32(_865) <= _865:
                    _987 = mem[_486]
                    s = 0
                    while s < _987:
                        mem[s + _685 + _691 + _865 + 32] = mem[s + _486 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_987) <= _987:
                        _1071 = mem[64]
                        mem[mem[64]] = _987 + _685 + _691 + _865 - mem[64]
                        mem[64] = _987 + _685 + _691 + _865 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1071
                        u = _353
                        continue 
                    mem[_685 + _691 + _865 + _987 + 32] = 0
                    _1087 = mem[64]
                    mem[mem[64]] = _987 + _685 + _691 + _865 - mem[64]
                    mem[64] = _987 + _685 + _691 + _865 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1087
                    u = _353
                    continue 
                mem[_685 + _691 + _865 + 32] = 0
                _995 = mem[_486]
                s = 0
                while s < _995:
                    mem[s + _685 + _691 + _865 + 32] = mem[s + _486 + 32]
                    s = s + 32
                    continue 
                if ceil32(_995) <= _995:
                    _1072 = mem[64]
                    mem[mem[64]] = _995 + _685 + _691 + _865 - mem[64]
                    mem[64] = _995 + _685 + _691 + _865 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1072
                    u = _353
                    continue 
                mem[_685 + _691 + _865 + _995 + 32] = 0
                _1088 = mem[64]
                mem[mem[64]] = _995 + _685 + _691 + _865 - mem[64]
                mem[64] = _995 + _685 + _691 + _865 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1088
                u = _353
                continue 
            mem[_685 + _691 + 32] = 0
            _873 = mem[_207]
            s = 0
            while s < _873:
                mem[s + _685 + _691 + 32] = mem[s + _207 + 32]
                s = s + 32
                continue 
            if ceil32(_873) <= _873:
                _988 = mem[_486]
                s = 0
                while s < _988:
                    mem[s + _685 + _691 + _873 + 32] = mem[s + _486 + 32]
                    s = s + 32
                    continue 
                if ceil32(_988) <= _988:
                    _1073 = mem[64]
                    mem[mem[64]] = _988 + _685 + _691 + _873 - mem[64]
                    mem[64] = _988 + _685 + _691 + _873 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1073
                    u = _353
                    continue 
                mem[_685 + _691 + _873 + _988 + 32] = 0
                _1089 = mem[64]
                mem[mem[64]] = _988 + _685 + _691 + _873 - mem[64]
                mem[64] = _988 + _685 + _691 + _873 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1089
                u = _353
                continue 
            mem[_685 + _691 + _873 + 32] = 0
            _996 = mem[_486]
            s = 0
            while s < _996:
                mem[s + _685 + _691 + _873 + 32] = mem[s + _486 + 32]
                s = s + 32
                continue 
            if ceil32(_996) <= _996:
                _1074 = mem[64]
                mem[mem[64]] = _996 + _685 + _691 + _873 - mem[64]
                mem[64] = _996 + _685 + _691 + _873 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1074
                u = _353
                continue 
            mem[_685 + _691 + _873 + _996 + 32] = 0
            _1090 = mem[64]
            mem[mem[64]] = _996 + _685 + _691 + _873 - mem[64]
            mem[64] = _996 + _685 + _691 + _873 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1090
            u = _353
            continue 
        mem[_486 + 32 len u] = call.data[calldata.size len u]
        v = u
        s = _354
        while s:
            if v < 1:
                revert with 0, 17
            if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if s < 10 * s / 10:
                revert with 0, 17
            if 48 > -uint8(s - (10 * s / 10)) + 255:
                revert with 0, 17
            if v - 1 >= mem[_486]:
                revert with 0, 50
            mem[v + _486 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
            v = v - 1
            s = s / 10
            continue 
        _686 = mem[64]
        _692 = mem[t]
        s = 0
        while s < _692:
            mem[s + _686 + 32] = mem[s + t + 32]
            s = s + 32
            continue 
        if ceil32(_692) <= _692:
            _866 = mem[_207]
            s = 0
            while s < _866:
                mem[s + _686 + _692 + 32] = mem[s + _207 + 32]
                s = s + 32
                continue 
            if ceil32(_866) <= _866:
                _989 = mem[_486]
                s = 0
                while s < _989:
                    mem[s + _686 + _692 + _866 + 32] = mem[s + _486 + 32]
                    s = s + 32
                    continue 
                if ceil32(_989) <= _989:
                    _1075 = mem[64]
                    mem[mem[64]] = _989 + _686 + _692 + _866 - mem[64]
                    mem[64] = _989 + _686 + _692 + _866 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1075
                    u = _353
                    continue 
                mem[_686 + _692 + _866 + _989 + 32] = 0
                _1091 = mem[64]
                mem[mem[64]] = _989 + _686 + _692 + _866 - mem[64]
                mem[64] = _989 + _686 + _692 + _866 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1091
                u = _353
                continue 
            mem[_686 + _692 + _866 + 32] = 0
            _997 = mem[_486]
            s = 0
            while s < _997:
                mem[s + _686 + _692 + _866 + 32] = mem[s + _486 + 32]
                s = s + 32
                continue 
            if ceil32(_997) <= _997:
                _1076 = mem[64]
                mem[mem[64]] = _997 + _686 + _692 + _866 - mem[64]
                mem[64] = _997 + _686 + _692 + _866 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1076
                u = _353
                continue 
            mem[_686 + _692 + _866 + _997 + 32] = 0
            _1092 = mem[64]
            mem[mem[64]] = _997 + _686 + _692 + _866 - mem[64]
            mem[64] = _997 + _686 + _692 + _866 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1092
            u = _353
            continue 
        mem[_686 + _692 + 32] = 0
        _874 = mem[_207]
        s = 0
        while s < _874:
            mem[s + _686 + _692 + 32] = mem[s + _207 + 32]
            s = s + 32
            continue 
        if ceil32(_874) <= _874:
            _990 = mem[_486]
            s = 0
            while s < _990:
                mem[s + _686 + _692 + _874 + 32] = mem[s + _486 + 32]
                s = s + 32
                continue 
            if ceil32(_990) <= _990:
                _1077 = mem[64]
                mem[mem[64]] = _990 + _686 + _692 + _874 - mem[64]
                mem[64] = _990 + _686 + _692 + _874 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1077
                u = _353
                continue 
            mem[_686 + _692 + _874 + _990 + 32] = 0
            _1093 = mem[64]
            mem[mem[64]] = _990 + _686 + _692 + _874 - mem[64]
            mem[64] = _990 + _686 + _692 + _874 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1093
            u = _353
            continue 
        mem[_686 + _692 + _874 + 32] = 0
        _998 = mem[_486]
        s = 0
        while s < _998:
            mem[s + _686 + _692 + _874 + 32] = mem[s + _486 + 32]
            s = s + 32
            continue 
        if ceil32(_998) <= _998:
            _1078 = mem[64]
            mem[mem[64]] = _998 + _686 + _692 + _874 - mem[64]
            mem[64] = _998 + _686 + _692 + _874 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1078
            u = _353
            continue 
        mem[_686 + _692 + _874 + _998 + 32] = 0
        _1094 = mem[64]
        mem[mem[64]] = _998 + _686 + _692 + _874 - mem[64]
        mem[64] = _998 + _686 + _692 + _874 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        t = _1094
        u = _353
        continue 
    _352 = mem[64]
    mem[mem[64]] = 32
    _358 = mem[t]
    mem[mem[64] + 32] = mem[t]
    mem[mem[64] + 64 len ceil32(_358)] = mem[t + 32 len ceil32(_358)]
    if ceil32(_358) <= _358:
        return 32, mem[mem[64] + 32 len ceil32(_358) + 32]
    mem[mem[64] + _358 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_358) + _352 + -mem[64] + 64
}

function _getRewardAmountOf(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[0] = arg1
    mem[32] = 4
    idx = 0
    s = 0
    while idx < sub_2130fe23[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 4)
        _521 = mem[64]
        mem[64] = mem[64] + 128
        if sub_2130fe23[address(arg1)][idx].field_0:
            if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _522 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_522] = uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                    mem[_521] = _522
                    mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                    mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                    mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                    if sub_2130fe23[address(arg1)][idx].field_512:
                        _530 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_530] = 30
                        mem[_530 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                            _538 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _538 + 68] = mem[idx + _530 + 32]
                                idx = idx + 32
                                continue 
                            mem[_538 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _538 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                            revert with 0, 17
                        _581 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_581] = 26
                        mem[_581 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _602 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _602 + 68] = mem[idx + _581 + 32]
                                idx = idx + 32
                                continue 
                            mem[_602 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _602 + -mem[64] + 100
                        if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                            revert with 0, 17
                        if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                        continue 
                    _572 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_572] = 30
                    mem[_572 + 32] = 'SafeMath: subtraction overflow'
                    if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                        _592 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _592 + 68] = mem[idx + _572 + 32]
                            idx = idx + 32
                            continue 
                        mem[_592 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _592 + -mem[64] + 100
                    if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                        revert with 0, 17
                    _684 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_684] = 26
                    mem[_684 + 32] = 'SafeMath: division by zero'
                    if not claimTime:
                        _712 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _712 + 68] = mem[idx + _684 + 32]
                            idx = idx + 32
                            continue 
                        mem[_712 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _712 + -mem[64] + 100
                else:
                    if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                        mem[_522 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                        mem[_521] = _522
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _540 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_540] = 30
                            mem[_540 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _551 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _551 + 68] = mem[idx + _540 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_551 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _551 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _606 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_606] = 26
                            mem[_606 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _636 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _636 + 68] = mem[idx + _606 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_636 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _636 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _594 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_594] = 30
                        mem[_594 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _620 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _620 + 68] = mem[idx + _594 + 32]
                                idx = idx + 32
                                continue 
                            mem[_620 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _620 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _715 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_715] = 26
                        mem[_715 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _741 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _741 + 68] = mem[idx + _715 + 32]
                                idx = idx + 32
                                continue 
                            mem[_741 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _741 + -mem[64] + 100
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_522 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _522 + 32
                        u = sha3(mem[0])
                        while _522 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                        mem[_521] = _522
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _1104 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1104] = 30
                            mem[_1104 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _1136 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1136 + 68] = mem[idx + _1104 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1136 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1136 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _1156 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1156] = 26
                            mem[_1156 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _1168 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _1168 + 68] = mem[idx + _1156 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1168 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _1168 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _1152 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1152] = 30
                        mem[_1152 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _1161 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1161 + 68] = mem[idx + _1152 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1161 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1161 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _1192 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1192] = 26
                        mem[_1192 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _1201 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _1201 + 68] = mem[idx + _1192 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1201 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _1201 + -mem[64] + 100
            else:
                if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                    revert with 0, 34
                if not sub_2130fe23[address(arg1)][idx].field_1:
                    mem[_521] = _522
                    mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                    mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                    mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                    if sub_2130fe23[address(arg1)][idx].field_512:
                        _534 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_534] = 30
                        mem[_534 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                            _544 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _544 + 68] = mem[idx + _534 + 32]
                                idx = idx + 32
                                continue 
                            mem[_544 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _544 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                            revert with 0, 17
                        _595 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_595] = 26
                        mem[_595 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _621 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _621 + 68] = mem[idx + _595 + 32]
                                idx = idx + 32
                                continue 
                            mem[_621 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _621 + -mem[64] + 100
                        if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                            revert with 0, 17
                        if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                        continue 
                    _583 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_583] = 30
                    mem[_583 + 32] = 'SafeMath: subtraction overflow'
                    if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                        _608 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _608 + 68] = mem[idx + _583 + 32]
                            idx = idx + 32
                            continue 
                        mem[_608 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _608 + -mem[64] + 100
                    if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                        revert with 0, 17
                    _701 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_701] = 26
                    mem[_701 + 32] = 'SafeMath: division by zero'
                    if not claimTime:
                        _728 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _728 + 68] = mem[idx + _701 + 32]
                            idx = idx + 32
                            continue 
                        mem[_728 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _728 + -mem[64] + 100
                else:
                    if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_522 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                        mem[_521] = _522
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _546 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_546] = 30
                            mem[_546 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _560 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _560 + 68] = mem[idx + _546 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_560 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _560 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _625 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_625] = 26
                            mem[_625 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _657 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _657 + 68] = mem[idx + _625 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_657 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _657 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _610 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_610] = 30
                        mem[_610 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _642 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _642 + 68] = mem[idx + _610 + 32]
                                idx = idx + 32
                                continue 
                            mem[_642 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _642 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _731 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_731] = 26
                        mem[_731 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _762 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _762 + 68] = mem[idx + _731 + 32]
                                idx = idx + 32
                                continue 
                            mem[_762 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _762 + -mem[64] + 100
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_522 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _522 + 32
                        u = sha3(mem[0])
                        while _522 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                        mem[_521] = _522
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _1113 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1113] = 30
                            mem[_1113 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _1137 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1137 + 68] = mem[idx + _1113 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1137 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1137 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _1157 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1157] = 26
                            mem[_1157 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _1171 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _1171 + 68] = mem[idx + _1157 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1171 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _1171 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _1153 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1153] = 30
                        mem[_1153 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _1163 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1163 + 68] = mem[idx + _1153 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1163 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1163 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _1193 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1193] = 26
                        mem[_1193 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _1204 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _1204 + 68] = mem[idx + _1193 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1204 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _1204 + -mem[64] + 100
        else:
            if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                revert with 0, 34
            _523 = mem[64]
            mem[64] = mem[64] + ceil32(sub_2130fe23[address(arg1)][idx].field_1) + 32
            mem[_523] = sub_2130fe23[address(arg1)][idx].field_1
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                    mem[_521] = _523
                    mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                    mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                    mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                    if sub_2130fe23[address(arg1)][idx].field_512:
                        _536 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_536] = 30
                        mem[_536 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                            _547 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _547 + 68] = mem[idx + _536 + 32]
                                idx = idx + 32
                                continue 
                            mem[_547 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _547 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                            revert with 0, 17
                        _597 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_597] = 26
                        mem[_597 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _626 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _626 + 68] = mem[idx + _597 + 32]
                                idx = idx + 32
                                continue 
                            mem[_626 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _626 + -mem[64] + 100
                        if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                            revert with 0, 17
                        if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                        continue 
                    _586 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_586] = 30
                    mem[_586 + 32] = 'SafeMath: subtraction overflow'
                    if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                        _612 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _612 + 68] = mem[idx + _586 + 32]
                            idx = idx + 32
                            continue 
                        mem[_612 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _612 + -mem[64] + 100
                    if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                        revert with 0, 17
                    _704 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_704] = 26
                    mem[_704 + 32] = 'SafeMath: division by zero'
                    if not claimTime:
                        _733 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _733 + 68] = mem[idx + _704 + 32]
                            idx = idx + 32
                            continue 
                        mem[_733 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _733 + -mem[64] + 100
                else:
                    if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                        mem[_523 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                        mem[_521] = _523
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _549 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_549] = 30
                            mem[_549 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _562 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _562 + 68] = mem[idx + _549 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_562 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _562 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _630 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_630] = 26
                            mem[_630 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _661 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _661 + 68] = mem[idx + _630 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_661 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _661 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _614 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_614] = 30
                        mem[_614 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _646 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _646 + 68] = mem[idx + _614 + 32]
                                idx = idx + 32
                                continue 
                            mem[_646 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _646 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _736 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_736] = 26
                        mem[_736 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _766 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _766 + 68] = mem[idx + _736 + 32]
                                idx = idx + 32
                                continue 
                            mem[_766 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _766 + -mem[64] + 100
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_523 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _523 + 32
                        u = sha3(mem[0])
                        while _523 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                        mem[_521] = _523
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _1122 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1122] = 30
                            mem[_1122 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _1138 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1138 + 68] = mem[idx + _1122 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1138 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1138 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _1158 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1158] = 26
                            mem[_1158 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _1174 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _1174 + 68] = mem[idx + _1158 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1174 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _1174 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _1154 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1154] = 30
                        mem[_1154 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _1165 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1165 + 68] = mem[idx + _1154 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1165 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1165 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _1194 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1194] = 26
                        mem[_1194 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _1207 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _1207 + 68] = mem[idx + _1194 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1207 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _1207 + -mem[64] + 100
            else:
                if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                    revert with 0, 34
                if not sub_2130fe23[address(arg1)][idx].field_1:
                    mem[_521] = _523
                    mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                    mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                    mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                    if sub_2130fe23[address(arg1)][idx].field_512:
                        _541 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_541] = 30
                        mem[_541 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                            _554 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _554 + 68] = mem[idx + _541 + 32]
                                idx = idx + 32
                                continue 
                            mem[_554 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _554 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                            revert with 0, 17
                        _615 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_615] = 26
                        mem[_615 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _647 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _647 + 68] = mem[idx + _615 + 32]
                                idx = idx + 32
                                continue 
                            mem[_647 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _647 + -mem[64] + 100
                        if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                            revert with 0, 17
                        if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                        continue 
                    _599 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_599] = 30
                    mem[_599 + 32] = 'SafeMath: subtraction overflow'
                    if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                        _632 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _632 + 68] = mem[idx + _599 + 32]
                            idx = idx + 32
                            continue 
                        mem[_632 + 98] = 0
                        revert with memory
                          from mem[64]
                           len _632 + -mem[64] + 100
                    if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                        revert with 0, 17
                    _720 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_720] = 26
                    mem[_720 + 32] = 'SafeMath: division by zero'
                    if not claimTime:
                        _752 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _752 + 68] = mem[idx + _720 + 32]
                            idx = idx + 32
                            continue 
                        mem[_752 + 94] = 0
                        revert with memory
                          from mem[64]
                           len _752 + -mem[64] + 100
                else:
                    if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_523 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                        mem[_521] = _523
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _556 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_556] = 30
                            mem[_556 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _571 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _571 + 68] = mem[idx + _556 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_571 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _571 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _651 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_651] = 26
                            mem[_651 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _681 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _681 + 68] = mem[idx + _651 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_681 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _681 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _634 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_634] = 30
                        mem[_634 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _667 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _667 + 68] = mem[idx + _634 + 32]
                                idx = idx + 32
                                continue 
                            mem[_667 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _667 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _755 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_755] = 26
                        mem[_755 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _787 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _787 + 68] = mem[idx + _755 + 32]
                                idx = idx + 32
                                continue 
                            mem[_787 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _787 + -mem[64] + 100
                    else:
                        mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                        mem[_523 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                        t = _523 + 32
                        u = sha3(mem[0])
                        while _523 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                            mem[t + 32] = stor1[u]
                            t = t + 32
                            u = u + 1
                            continue 
                        mem[_521] = _523
                        mem[_521 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_521 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_521 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _1131 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1131] = 30
                            mem[_1131 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _1139 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _1139 + 68] = mem[idx + _1131 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1139 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _1139 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _1159 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_1159] = 26
                            mem[_1159 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _1177 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _1177 + 68] = mem[idx + _1159 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_1177 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _1177 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        _1155 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1155] = 30
                        mem[_1155 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _1167 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _1167 + 68] = mem[idx + _1155 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1167 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _1167 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _1195 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1195] = 26
                        mem[_1195 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _1210 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _1210 + 68] = mem[idx + _1195 + 32]
                                idx = idx + 32
                                continue 
                            mem[_1210 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _1210 + -mem[64] + 100
        ('stor', ('name', 'claimTime', 7))
        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
            revert with 0, 17
        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
            revert with 0, 'SafeMath: addition overflow'
        if not rewardPerNode:
            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                revert with 0, 17
            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + sub_2130fe23[address(arg1)][idx].field_768
            continue 
        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
            revert with 0, 17
        if not rewardPerNode:
            revert with 0, 18
        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
            revert with 0, 17
        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
        continue 
    return s
}

function _cashoutAllNodesReward(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if msg.sender == tokenAddress:
        mem[0] = arg1
        mem[32] = 4
        idx = 0
        s = 0
        while idx < sub_2130fe23[address(arg1)].field_0:
            mem[0] = sha3(address(arg1), 4)
            _2673 = mem[64]
            mem[64] = mem[64] + 128
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                _2677 = mem[64]
                mem[64] = mem[64] + ceil32(uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) + 32
                mem[_2677] = uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5
                if sub_2130fe23[address(arg1)][idx].field_0:
                    if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                        mem[_2673] = _2677
                        mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2693 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2693] = 30
                            mem[_2693 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2709 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2709 + 68] = mem[idx + _2693 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2709 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2709 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2795 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2795] = 26
                            mem[_2795 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2837 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2837 + 68] = mem[idx + _2795 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2837 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2837 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3689] = 26
                                        mem[_3689 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3835 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3835] = 26
                                    mem[_3835 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3690 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3690] = 26
                                    mem[_3690 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3836 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3836] = 26
                                mem[_3836 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3833 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3833] = 26
                                    mem[_3833 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4081 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4081] = 26
                                mem[_4081 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3834 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3834] = 26
                                mem[_3834 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4082 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4082] = 26
                            mem[_4082 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2777 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2777] = 30
                        mem[_2777 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2816 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2816 + 68] = mem[idx + _2777 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2816 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2816 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3001 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3001] = 26
                        mem[_3001 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3056 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3056 + 68] = mem[idx + _3001 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3056 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3056 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3867 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3867] = 26
                                    mem[_3867 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4131 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4131] = 26
                                mem[_4131 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3868 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3868] = 26
                                mem[_3868 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4132 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4132] = 26
                            mem[_4132 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4129 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4129] = 26
                                mem[_4129 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4473 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4473] = 26
                            mem[_4473 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4130 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4130] = 26
                            mem[_4130 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4474 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4474] = 26
                        mem[_4474 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                            mem[_2677 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2673] = _2677
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2711 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2711] = 30
                                mem[_2711 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2734 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2734 + 68] = mem[idx + _2711 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2734 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2734 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2841 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2841] = 26
                                mem[_2841 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2904 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2904 + 68] = mem[idx + _2841 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2904 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2904 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3734 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3734] = 26
                                            mem[_3734 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3912 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3912] = 26
                                        mem[_3912 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3735 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3735] = 26
                                        mem[_3735 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3913 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3913] = 26
                                    mem[_3913 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3910 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3910] = 26
                                        mem[_3910 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4183 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4183] = 26
                                    mem[_4183 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3911 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3911] = 26
                                    mem[_3911 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4184 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4184] = 26
                                mem[_4184 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2818 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2818] = 30
                            mem[_2818 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2870 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2870 + 68] = mem[idx + _2818 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2870 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2870 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3059 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3059] = 26
                            mem[_3059 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3113 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3113 + 68] = mem[idx + _3059 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3113 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3113 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3953 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3953] = 26
                                        mem[_3953 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4245 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4245] = 26
                                    mem[_4245 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3954 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3954] = 26
                                    mem[_3954 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4246 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4246] = 26
                                mem[_4246 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4243 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4243] = 26
                                    mem[_4243 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4563 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4563] = 26
                                mem[_4563 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4244 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4244] = 26
                                mem[_4244 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4564 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4564] = 26
                            mem[_4564 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2677 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2677 + 32
                            u = sha3(mem[0])
                            while _2677 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2673] = _2677
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5469 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5469] = 30
                                mem[_5469 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5537 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5537 + 68] = mem[idx + _5469 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5537 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5537 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5577 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5577] = 26
                                mem[_5577 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5601 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5601 + 68] = mem[idx + _5577 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5601 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5601 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5873 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5873] = 26
                                            mem[_5873 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5939 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5939] = 26
                                        mem[_5939 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5874 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5874] = 26
                                        mem[_5874 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5940 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5940] = 26
                                    mem[_5940 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5937 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5937] = 26
                                        mem[_5937 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6033 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6033] = 26
                                    mem[_6033 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5938 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5938] = 26
                                    mem[_5938 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6034 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6034] = 26
                                mem[_6034 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5569 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5569] = 30
                            mem[_5569 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5586 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5586 + 68] = mem[idx + _5569 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5586 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5586 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5649 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5649] = 26
                            mem[_5649 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5666 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5666 + 68] = mem[idx + _5649 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5666 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5666 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5969 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5969] = 26
                                        mem[_5969 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6067 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6067] = 26
                                    mem[_6067 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5970 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5970] = 26
                                    mem[_5970 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6068 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6068] = 26
                                mem[_6068 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6065 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6065] = 26
                                    mem[_6065 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6161 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6161] = 26
                                mem[_6161 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6066 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6066] = 26
                                mem[_6066 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6162 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6162] = 26
                            mem[_6162 + 32] = 'SafeMath: division by zero'
                else:
                    if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                        revert with 0, 34
                    if not sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_2673] = _2677
                        mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2701 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2701] = 30
                            mem[_2701 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2720 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2720 + 68] = mem[idx + _2701 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2720 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2720 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2819 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2819] = 26
                            mem[_2819 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2871 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2871 + 68] = mem[idx + _2819 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2871 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2871 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3711 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3711] = 26
                                        mem[_3711 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3873 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3873] = 26
                                    mem[_3873 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3712 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3712] = 26
                                    mem[_3712 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3874 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3874] = 26
                                mem[_3874 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3871 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3871] = 26
                                    mem[_3871 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4137 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4137] = 26
                                mem[_4137 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3872 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3872] = 26
                                mem[_3872 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4138 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4138] = 26
                            mem[_4138 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2797 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2797] = 30
                        mem[_2797 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2843 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2843 + 68] = mem[idx + _2797 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2843 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2843 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3033 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3033] = 26
                        mem[_3033 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3084 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3084 + 68] = mem[idx + _3033 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3084 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3084 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3914 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3914] = 26
                                    mem[_3914 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4189 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4189] = 26
                                mem[_4189 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3915 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3915] = 26
                                mem[_3915 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4190 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4190] = 26
                            mem[_4190 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4187 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4187] = 26
                                mem[_4187 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4521 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4521] = 26
                            mem[_4521 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4188 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4188] = 26
                            mem[_4188 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4522 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4522] = 26
                        mem[_4522 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                            mem[_2677 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2673] = _2677
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2722 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2722] = 30
                                mem[_2722 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2750 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2750 + 68] = mem[idx + _2722 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2750 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2750 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2875 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2875] = 26
                                mem[_2875 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2942 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2942 + 68] = mem[idx + _2875 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2942 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2942 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3759 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3759] = 26
                                            mem[_3759 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3960 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3960] = 26
                                        mem[_3960 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3760 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3760] = 26
                                        mem[_3760 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3961 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3961] = 26
                                    mem[_3961 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3958 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3958] = 26
                                        mem[_3958 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4249 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4249] = 26
                                    mem[_4249 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3959 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3959] = 26
                                    mem[_3959 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4250 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4250] = 26
                                mem[_4250 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2845 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2845] = 30
                            mem[_2845 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2910 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2910 + 68] = mem[idx + _2845 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2910 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2910 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3087 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3087] = 26
                            mem[_3087 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3151 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3151 + 68] = mem[idx + _3087 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3151 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3151 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4003 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4003] = 26
                                        mem[_4003 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4311 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4311] = 26
                                    mem[_4311 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4004 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4004] = 26
                                    mem[_4004 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4312 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4312] = 26
                                mem[_4312 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4309 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4309] = 26
                                    mem[_4309 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4615 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4615] = 26
                                mem[_4615 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4310 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4310] = 26
                                mem[_4310 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4616 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4616] = 26
                            mem[_4616 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2677 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2677 + 32
                            u = sha3(mem[0])
                            while _2677 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2673] = _2677
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5478 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5478] = 30
                                mem[_5478 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5538 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5538 + 68] = mem[idx + _5478 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5538 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5538 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5578 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5578] = 26
                                mem[_5578 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5604 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5604 + 68] = mem[idx + _5578 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5604 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5604 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5876 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5876] = 26
                                            mem[_5876 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5943 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5943] = 26
                                        mem[_5943 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5877 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5877] = 26
                                        mem[_5877 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5944 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5944] = 26
                                    mem[_5944 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5941 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5941] = 26
                                        mem[_5941 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6037 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6037] = 26
                                    mem[_6037 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5942 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5942] = 26
                                    mem[_5942 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6038 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6038] = 26
                                mem[_6038 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5570 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5570] = 30
                            mem[_5570 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5588 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5588 + 68] = mem[idx + _5570 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5588 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5588 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5650 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5650] = 26
                            mem[_5650 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5669 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5669 + 68] = mem[idx + _5650 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5669 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5669 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5971 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5971] = 26
                                        mem[_5971 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6071 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6071] = 26
                                    mem[_6071 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5972 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5972] = 26
                                    mem[_5972 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6072 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6072] = 26
                                mem[_6072 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6069 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6069] = 26
                                    mem[_6069 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6163 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6163] = 26
                                mem[_6163 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6070 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6070] = 26
                                mem[_6070 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6164 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6164] = 26
                            mem[_6164 + 32] = 'SafeMath: division by zero'
            else:
                if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                    revert with 0, 34
                _2679 = mem[64]
                mem[64] = mem[64] + ceil32(sub_2130fe23[address(arg1)][idx].field_1) + 32
                mem[_2679] = sub_2130fe23[address(arg1)][idx].field_1
                if sub_2130fe23[address(arg1)][idx].field_0:
                    if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                        mem[_2673] = _2679
                        mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2703 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2703] = 30
                            mem[_2703 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2723 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2723 + 68] = mem[idx + _2703 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2723 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2723 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2821 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2821] = 26
                            mem[_2821 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2876 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2876 + 68] = mem[idx + _2821 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2876 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2876 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3715 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3715] = 26
                                        mem[_3715 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3880] = 26
                                    mem[_3880 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3716 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3716] = 26
                                    mem[_3716 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3881 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3881] = 26
                                mem[_3881 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3878 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3878] = 26
                                    mem[_3878 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4143 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4143] = 26
                                mem[_4143 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3879 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3879] = 26
                                mem[_3879 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4144 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4144] = 26
                            mem[_4144 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2800 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2800] = 30
                        mem[_2800 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2847 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2847 + 68] = mem[idx + _2800 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2847 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2847 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3036 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3036] = 26
                        mem[_3036 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3089 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3089 + 68] = mem[idx + _3036 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3089 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3089 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3918 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3918] = 26
                                    mem[_3918 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4197 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4197] = 26
                                mem[_4197 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3919 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3919] = 26
                                mem[_3919 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4198 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4198] = 26
                            mem[_4198 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4195 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4195] = 26
                                mem[_4195 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4527 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4527] = 26
                            mem[_4527 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4196 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4196] = 26
                            mem[_4196 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4528 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4528] = 26
                        mem[_4528 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                            mem[_2679 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2673] = _2679
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2725 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2725] = 30
                                mem[_2725 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2752 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2752 + 68] = mem[idx + _2725 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2752 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2752 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2880 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2880] = 26
                                mem[_2880 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2946 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2946 + 68] = mem[idx + _2880 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2946 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2946 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3763 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3763] = 26
                                            mem[_3763 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3967 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3967] = 26
                                        mem[_3967 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3764 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3764] = 26
                                        mem[_3764 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3968 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3968] = 26
                                    mem[_3968 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3965 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3965] = 26
                                        mem[_3965 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4255 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4255] = 26
                                    mem[_4255 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3966 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3966] = 26
                                    mem[_3966 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4256 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4256] = 26
                                mem[_4256 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2849 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2849] = 30
                            mem[_2849 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2914 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2914 + 68] = mem[idx + _2849 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2914 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2914 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3092 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3092] = 26
                            mem[_3092 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3155 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3155 + 68] = mem[idx + _3092 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3155 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3155 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4007 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4007] = 26
                                        mem[_4007 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4321 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4321] = 26
                                    mem[_4321 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4008 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4008] = 26
                                    mem[_4008 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4322 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4322] = 26
                                mem[_4322 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4319] = 26
                                    mem[_4319 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4623 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4623] = 26
                                mem[_4623 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4320 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4320] = 26
                                mem[_4320 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4624 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4624] = 26
                            mem[_4624 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2679 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2679 + 32
                            u = sha3(mem[0])
                            while _2679 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2673] = _2679
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5487 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5487] = 30
                                mem[_5487 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5539 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5539 + 68] = mem[idx + _5487 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5539 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5539 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5579 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5579] = 26
                                mem[_5579 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5607 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5607 + 68] = mem[idx + _5579 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5607 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5607 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5879 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5879] = 26
                                            mem[_5879 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5947 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5947] = 26
                                        mem[_5947 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5880 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5880] = 26
                                        mem[_5880 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5948 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5948] = 26
                                    mem[_5948 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5945] = 26
                                        mem[_5945 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6041 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6041] = 26
                                    mem[_6041 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5946 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5946] = 26
                                    mem[_5946 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6042 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6042] = 26
                                mem[_6042 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5571 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5571] = 30
                            mem[_5571 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5590 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5590 + 68] = mem[idx + _5571 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5590 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5590 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5651 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5651] = 26
                            mem[_5651 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5672 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5672 + 68] = mem[idx + _5651 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5672 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5672 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5973 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5973] = 26
                                        mem[_5973 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6075 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6075] = 26
                                    mem[_6075 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5974 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5974] = 26
                                    mem[_5974 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6076 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6076] = 26
                                mem[_6076 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6073 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6073] = 26
                                    mem[_6073 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6165 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6165] = 26
                                mem[_6165 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6074 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6074] = 26
                                mem[_6074 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6166 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6166] = 26
                            mem[_6166 + 32] = 'SafeMath: division by zero'
                else:
                    if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                        revert with 0, 34
                    if not sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_2673] = _2679
                        mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2712 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2712] = 30
                            mem[_2712 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2737 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2737 + 68] = mem[idx + _2712 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2737 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2737 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2850 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2850] = 26
                            mem[_2850 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2915 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2915 + 68] = mem[idx + _2850 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2915 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2915 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3741 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3741] = 26
                                        mem[_3741 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3924 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3924] = 26
                                    mem[_3924 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3742 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3742] = 26
                                    mem[_3742 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3925 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3925] = 26
                                mem[_3925 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3922 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3922] = 26
                                    mem[_3922 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4203 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4203] = 26
                                mem[_4203 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3923 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3923] = 26
                                mem[_3923 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4204 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4204] = 26
                            mem[_4204 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2823 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2823] = 30
                        mem[_2823 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2882 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2882 + 68] = mem[idx + _2823 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2882 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2882 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3064 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3064] = 26
                        mem[_3064 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3124 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3124 + 68] = mem[idx + _3064 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3124 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3124 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3969 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3969] = 26
                                    mem[_3969 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4261 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4261] = 26
                                mem[_4261 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3970 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3970] = 26
                                mem[_3970 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4262 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4262] = 26
                            mem[_4262 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4259 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4259] = 26
                                mem[_4259 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4573 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4573] = 26
                            mem[_4573 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4260 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4260] = 26
                            mem[_4260 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4574 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4574] = 26
                        mem[_4574 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                            mem[_2679 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2673] = _2679
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2739 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2739] = 30
                                mem[_2739 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2768 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2768 + 68] = mem[idx + _2739 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2768 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2768 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2919 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2919] = 26
                                mem[_2919 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2982 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2982 + 68] = mem[idx + _2919 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2982 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2982 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3788 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3788] = 26
                                            mem[_3788 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _4014 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4014] = 26
                                        mem[_4014 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3789 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3789] = 26
                                        mem[_3789 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4015 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4015] = 26
                                    mem[_4015 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4012 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4012] = 26
                                        mem[_4012 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4325 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4325] = 26
                                    mem[_4325 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4013 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4013] = 26
                                    mem[_4013 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4326 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4326] = 26
                                mem[_4326 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2884 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2884] = 30
                            mem[_2884 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2952 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2952 + 68] = mem[idx + _2884 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2952 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2952 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3127 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3127] = 26
                            mem[_3127 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3192 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3192 + 68] = mem[idx + _3127 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3192 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3192 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4057 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4057] = 26
                                        mem[_4057 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4389] = 26
                                    mem[_4389 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4058 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4058] = 26
                                    mem[_4058 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4390 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4390] = 26
                                mem[_4390 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4387 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4387] = 26
                                    mem[_4387 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4687 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4687] = 26
                                mem[_4687 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4388 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4388] = 26
                                mem[_4388 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4688 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4688] = 26
                            mem[_4688 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2679 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2679 + 32
                            u = sha3(mem[0])
                            while _2679 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2673] = _2679
                            mem[_2673 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2673 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2673 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5496 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5496] = 30
                                mem[_5496 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5540 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5540 + 68] = mem[idx + _5496 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5540 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5540 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5580 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5580] = 26
                                mem[_5580 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5610 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5610 + 68] = mem[idx + _5580 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5610 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5610 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5882 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5882] = 26
                                            mem[_5882 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5951 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5951] = 26
                                        mem[_5951 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5883 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5883] = 26
                                        mem[_5883 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5952 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5952] = 26
                                    mem[_5952 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5949 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5949] = 26
                                        mem[_5949 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6045 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6045] = 26
                                    mem[_6045 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5950 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5950] = 26
                                    mem[_5950 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6046 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6046] = 26
                                mem[_6046 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5572 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5572] = 30
                            mem[_5572 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5592 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5592 + 68] = mem[idx + _5572 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5592 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5592 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5652 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5652] = 26
                            mem[_5652 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5675 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5675 + 68] = mem[idx + _5652 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5675 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5675 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5975 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5975] = 26
                                        mem[_5975 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6079 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6079] = 26
                                    mem[_6079 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5976 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5976] = 26
                                    mem[_5976 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6080 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6080] = 26
                                mem[_6080 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6077 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6077] = 26
                                    mem[_6077 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6167 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6167] = 26
                                mem[_6167 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6078 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6078] = 26
                                mem[_6078 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6168 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6168] = 26
                            mem[_6168 + 32] = 'SafeMath: division by zero'
            if 0 > !((s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                revert with 0, 17
            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                revert with 0, 17
            if idx >= sub_2130fe23[address(arg1)].field_0:
                revert with 0, 50
            sub_2130fe23[address(arg1)][idx].field_768 = 0
            mem[0] = sha3(address(arg1), 4)
            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
            continue 
    else:
        if gateKeeperAddress != msg.sender:
            revert with 0, 'Fuck off'
        mem[0] = arg1
        mem[32] = 4
        idx = 0
        s = 0
        while idx < sub_2130fe23[address(arg1)].field_0:
            mem[0] = sha3(address(arg1), 4)
            _2676 = mem[64]
            mem[64] = mem[64] + 128
            if sub_2130fe23[address(arg1)][idx].field_0:
                if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                _2678 = mem[64]
                mem[64] = mem[64] + ceil32(uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) + 32
                mem[_2678] = uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5
                if sub_2130fe23[address(arg1)][idx].field_0:
                    if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                        mem[_2676] = _2678
                        mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2697 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2697] = 30
                            mem[_2697 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2714 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2714 + 68] = mem[idx + _2697 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2714 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2714 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2805 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2805] = 26
                            mem[_2805 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2852 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2852 + 68] = mem[idx + _2805 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2852 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2852 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3699 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3699] = 26
                                        mem[_3699 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3852 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3852] = 26
                                    mem[_3852 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3700 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3700] = 26
                                    mem[_3700 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3853 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3853] = 26
                                mem[_3853 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3850 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3850] = 26
                                    mem[_3850 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4105 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4105] = 26
                                mem[_4105 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3851 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3851] = 26
                                mem[_3851 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4106 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4106] = 26
                            mem[_4106 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2786 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2786] = 30
                        mem[_2786 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2827 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2827 + 68] = mem[idx + _2786 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2827 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2827 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3016 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3016] = 26
                        mem[_3016 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3068 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3068 + 68] = mem[idx + _3016 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3068 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3068 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3887 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3887] = 26
                                    mem[_3887 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4157 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4157] = 26
                                mem[_4157 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3888 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3888] = 26
                                mem[_3888 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4158 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4158] = 26
                            mem[_4158 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4155 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4155] = 26
                                mem[_4155 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4495 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4495] = 26
                            mem[_4495 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4156 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4156] = 26
                            mem[_4156 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4496 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4496] = 26
                        mem[_4496 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                            mem[_2678 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2676] = _2678
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2716 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2716] = 30
                                mem[_2716 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2741 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2741 + 68] = mem[idx + _2716 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2741 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2741 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2856 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2856] = 26
                                mem[_2856 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2921 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2921 + 68] = mem[idx + _2856 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2921 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2921 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3746 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3746] = 26
                                            mem[_3746 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3934 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3934] = 26
                                        mem[_3934 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3747 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3747] = 26
                                        mem[_3747 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3935 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3935] = 26
                                    mem[_3935 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3932 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3932] = 26
                                        mem[_3932 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4211 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4211] = 26
                                    mem[_4211 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3933 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3933] = 26
                                    mem[_3933 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4212 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4212] = 26
                                mem[_4212 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2829 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2829] = 30
                            mem[_2829 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2888 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2888 + 68] = mem[idx + _2829 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2888 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2888 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3071 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3071] = 26
                            mem[_3071 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3130 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3130 + 68] = mem[idx + _3071 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3130 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3130 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3975 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3975] = 26
                                        mem[_3975 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4275 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4275] = 26
                                    mem[_4275 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3976 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3976] = 26
                                    mem[_3976 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4276 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4276] = 26
                                mem[_4276 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4273 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4273] = 26
                                    mem[_4273 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4585 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4585] = 26
                                mem[_4585 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4274 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4274] = 26
                                mem[_4274 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4586 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4586] = 26
                            mem[_4586 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2678 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2678 + 32
                            u = sha3(mem[0])
                            while _2678 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2676] = _2678
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5505 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5505] = 30
                                mem[_5505 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5541 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5541 + 68] = mem[idx + _5505 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5541 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5541 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5581 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5581] = 26
                                mem[_5581 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5613 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5613 + 68] = mem[idx + _5581 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5613 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5613 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5885 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5885] = 26
                                            mem[_5885 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5955 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5955] = 26
                                        mem[_5955 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5886 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5886] = 26
                                        mem[_5886 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5956 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5956] = 26
                                    mem[_5956 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5953 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5953] = 26
                                        mem[_5953 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6049 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6049] = 26
                                    mem[_6049 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5954 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5954] = 26
                                    mem[_5954 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6050 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6050] = 26
                                mem[_6050 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5573 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5573] = 30
                            mem[_5573 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5594 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5594 + 68] = mem[idx + _5573 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5594 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5594 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5653 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5653] = 26
                            mem[_5653 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5678 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5678 + 68] = mem[idx + _5653 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5678 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5678 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5977 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5977] = 26
                                        mem[_5977 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6083 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6083] = 26
                                    mem[_6083 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5978 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5978] = 26
                                    mem[_5978 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6084 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6084] = 26
                                mem[_6084 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6081 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6081] = 26
                                    mem[_6081 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6169 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6169] = 26
                                mem[_6169 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6082 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6082] = 26
                                mem[_6082 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6170 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6170] = 26
                            mem[_6170 + 32] = 'SafeMath: division by zero'
                else:
                    if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                        revert with 0, 34
                    if not sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_2676] = _2678
                        mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2705 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2705] = 30
                            mem[_2705 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2727 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2727 + 68] = mem[idx + _2705 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2727 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2727 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2830 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2830] = 26
                            mem[_2830 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2889 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2889 + 68] = mem[idx + _2830 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2889 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2889 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3723 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3723] = 26
                                        mem[_3723 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3893 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3893] = 26
                                    mem[_3893 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3724 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3724] = 26
                                    mem[_3724 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3894 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3894] = 26
                                mem[_3894 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3891 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3891] = 26
                                    mem[_3891 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4163 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4163] = 26
                                mem[_4163 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3892 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3892] = 26
                                mem[_3892 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4164 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4164] = 26
                            mem[_4164 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2807 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2807] = 30
                        mem[_2807 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2858 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2858 + 68] = mem[idx + _2807 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2858 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2858 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3045 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3045] = 26
                        mem[_3045 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3100 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3100 + 68] = mem[idx + _3045 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3100 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3100 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3936 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3936] = 26
                                    mem[_3936 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4217 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4217] = 26
                                mem[_4217 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3937 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3937] = 26
                                mem[_3937 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4218 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4218] = 26
                            mem[_4218 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4215 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4215] = 26
                                mem[_4215 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4541 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4541] = 26
                            mem[_4541 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4216 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4216] = 26
                            mem[_4216 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4542 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4542] = 26
                        mem[_4542 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                            mem[_2678 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2676] = _2678
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2729 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2729] = 30
                                mem[_2729 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2757 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2757 + 68] = mem[idx + _2729 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2757 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2757 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2893 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2893] = 26
                                mem[_2893 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2958 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2958 + 68] = mem[idx + _2893 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2958 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2958 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3770 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3770] = 26
                                            mem[_3770 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3982] = 26
                                        mem[_3982 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3771 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3771] = 26
                                        mem[_3771 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3983 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3983] = 26
                                    mem[_3983 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3980 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3980] = 26
                                        mem[_3980 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4279 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4279] = 26
                                    mem[_4279 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3981 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3981] = 26
                                    mem[_3981 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4280] = 26
                                mem[_4280 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2860 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2860] = 30
                            mem[_2860 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2927 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2927 + 68] = mem[idx + _2860 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2927 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2927 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3103 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3103] = 26
                            mem[_3103 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3167 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3167 + 68] = mem[idx + _3103 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3167 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3167 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4024 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4024] = 26
                                        mem[_4024 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4343] = 26
                                    mem[_4343 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4025 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4025] = 26
                                    mem[_4025 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4344 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4344] = 26
                                mem[_4344 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4341 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4341] = 26
                                    mem[_4341 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4643 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4643] = 26
                                mem[_4643 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4342 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4342] = 26
                                mem[_4342 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4644 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4644] = 26
                            mem[_4644 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2678 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2678 + 32
                            u = sha3(mem[0])
                            while _2678 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2676] = _2678
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5514 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5514] = 30
                                mem[_5514 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5542 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5542 + 68] = mem[idx + _5514 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5542 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5542 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5582 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5582] = 26
                                mem[_5582 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5616 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5616 + 68] = mem[idx + _5582 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5616 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5616 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5888 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5888] = 26
                                            mem[_5888 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5959 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5959] = 26
                                        mem[_5959 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5889 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5889] = 26
                                        mem[_5889 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5960 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5960] = 26
                                    mem[_5960 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5957 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5957] = 26
                                        mem[_5957 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6053 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6053] = 26
                                    mem[_6053 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5958 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5958] = 26
                                    mem[_5958 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6054 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6054] = 26
                                mem[_6054 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5574 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5574] = 30
                            mem[_5574 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5596 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5596 + 68] = mem[idx + _5574 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5596 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5596 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5654 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5654] = 26
                            mem[_5654 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5681 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5681 + 68] = mem[idx + _5654 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5681 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5681 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5979 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5979] = 26
                                        mem[_5979 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6087 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6087] = 26
                                    mem[_6087 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5980 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5980] = 26
                                    mem[_5980 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6088 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6088] = 26
                                mem[_6088 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6085 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6085] = 26
                                    mem[_6085 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6171 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6171] = 26
                                mem[_6171 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6086 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6086] = 26
                                mem[_6086 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6172 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6172] = 26
                            mem[_6172 + 32] = 'SafeMath: division by zero'
            else:
                if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                    revert with 0, 34
                _2680 = mem[64]
                mem[64] = mem[64] + ceil32(sub_2130fe23[address(arg1)][idx].field_1) + 32
                mem[_2680] = sub_2130fe23[address(arg1)][idx].field_1
                if sub_2130fe23[address(arg1)][idx].field_0:
                    if sub_2130fe23[address(arg1)][idx].field_0 == uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if not Mask(256, -1, sub_2130fe23[address(arg1)][idx].field_0):
                        mem[_2676] = _2680
                        mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2707 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2707] = 30
                            mem[_2707 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2730 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2730 + 68] = mem[idx + _2707 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2730 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2730 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2832 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2832] = 26
                            mem[_2832 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2894 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2894 + 68] = mem[idx + _2832 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2894 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2894 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3727 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3727] = 26
                                        mem[_3727 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3900 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3900] = 26
                                    mem[_3900 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3728 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3728] = 26
                                    mem[_3728 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3901 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3901] = 26
                                mem[_3901 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3898 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3898] = 26
                                    mem[_3898 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4169 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4169] = 26
                                mem[_4169 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3899 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3899] = 26
                                mem[_3899 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4170 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4170] = 26
                            mem[_4170 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2810 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2810] = 30
                        mem[_2810 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2862 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2862 + 68] = mem[idx + _2810 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2862 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2862 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3048 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3048] = 26
                        mem[_3048 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3105 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3105 + 68] = mem[idx + _3048 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3105 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3105 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3940 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3940] = 26
                                    mem[_3940 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4225 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4225] = 26
                                mem[_4225 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3941 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3941] = 26
                                mem[_3941 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4226 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4226] = 26
                            mem[_4226 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4223 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4223] = 26
                                mem[_4223 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4547 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4547] = 26
                            mem[_4547 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4224 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4224] = 26
                            mem[_4224 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4548 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4548] = 26
                        mem[_4548 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5:
                            mem[_2680 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2676] = _2680
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2732 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2732] = 30
                                mem[_2732 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2759 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2759 + 68] = mem[idx + _2732 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2759 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2759 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2898 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2898] = 26
                                mem[_2898 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2962 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2962 + 68] = mem[idx + _2898 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2962 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2962 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3774 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3774] = 26
                                            mem[_3774 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _3989 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3989] = 26
                                        mem[_3989 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3775 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3775] = 26
                                        mem[_3775 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3990 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3990] = 26
                                    mem[_3990 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3987 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3987] = 26
                                        mem[_3987 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4285 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4285] = 26
                                    mem[_4285 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3988 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3988] = 26
                                    mem[_3988 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4286 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4286] = 26
                                mem[_4286 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2864 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2864] = 30
                            mem[_2864 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2931 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2931 + 68] = mem[idx + _2864 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2931 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2931 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3108 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3108] = 26
                            mem[_3108 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3171 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3171 + 68] = mem[idx + _3108 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3171 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3171 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4028 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4028] = 26
                                        mem[_4028 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4353 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4353] = 26
                                    mem[_4353 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4029 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4029] = 26
                                    mem[_4029 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4354 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4354] = 26
                                mem[_4354 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4351 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4351] = 26
                                    mem[_4351 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4651 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4651] = 26
                                mem[_4651 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4352 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4352] = 26
                                mem[_4352 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4652 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4652] = 26
                            mem[_4652 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2680 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2680 + 32
                            u = sha3(mem[0])
                            while _2680 + (uint255(sub_2130fe23[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2676] = _2680
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5523 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5523] = 30
                                mem[_5523 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5543 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5543 + 68] = mem[idx + _5523 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5543 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5543 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5583 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5583] = 26
                                mem[_5583 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5619 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5619 + 68] = mem[idx + _5583 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5619 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5619 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5891 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5891] = 26
                                            mem[_5891 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5963 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5963] = 26
                                        mem[_5963 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5892] = 26
                                        mem[_5892 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5964 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5964] = 26
                                    mem[_5964 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5961 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5961] = 26
                                        mem[_5961 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6057 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6057] = 26
                                    mem[_6057 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5962 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5962] = 26
                                    mem[_5962 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6058 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6058] = 26
                                mem[_6058 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5575 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5575] = 30
                            mem[_5575 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5598 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5598 + 68] = mem[idx + _5575 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5598 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5598 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5655 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5655] = 26
                            mem[_5655 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5684 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5684 + 68] = mem[idx + _5655 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5684 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5684 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5981 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5981] = 26
                                        mem[_5981 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6091 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6091] = 26
                                    mem[_6091 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5982 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5982] = 26
                                    mem[_5982 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6092 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6092] = 26
                                mem[_6092 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6089 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6089] = 26
                                    mem[_6089 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6173 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6173] = 26
                                mem[_6173 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6090 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6090] = 26
                                mem[_6090 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6174 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6174] = 26
                            mem[_6174 + 32] = 'SafeMath: division by zero'
                else:
                    if sub_2130fe23[address(arg1)][idx].field_0 == sub_2130fe23[address(arg1)][idx].field_1 < 32:
                        revert with 0, 34
                    if not sub_2130fe23[address(arg1)][idx].field_1:
                        mem[_2676] = _2680
                        mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                        mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                        mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                        if sub_2130fe23[address(arg1)][idx].field_512:
                            _2717 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2717] = 30
                            mem[_2717 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                _2744 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2744 + 68] = mem[idx + _2717 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2744 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2744 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                revert with 0, 17
                            _2865 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2865] = 26
                            mem[_2865 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _2932 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _2932 + 68] = mem[idx + _2865 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2932 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _2932 + -mem[64] + 100
                            if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                revert with 0, 17
                            if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3753 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3753] = 26
                                        mem[_3753 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _3946 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3946] = 26
                                    mem[_3946 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3754 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3754] = 26
                                    mem[_3754 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _3947 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3947] = 26
                                mem[_3947 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3944 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3944] = 26
                                    mem[_3944 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4231 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4231] = 26
                                mem[_4231 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                _3945 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3945] = 26
                                mem[_3945 + 32] = 'SafeMath: division by zero'
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4232 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4232] = 26
                            mem[_4232 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        _2834 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2834] = 30
                        mem[_2834 + 32] = 'SafeMath: subtraction overflow'
                        if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                            _2900 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _2900 + 68] = mem[idx + _2834 + 32]
                                idx = idx + 32
                                continue 
                            mem[_2900 + 98] = 0
                            revert with memory
                              from mem[64]
                               len _2900 + -mem[64] + 100
                        if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                            revert with 0, 17
                        _3076 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3076] = 26
                        mem[_3076 + 32] = 'SafeMath: division by zero'
                        if not claimTime:
                            _3141 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _3141 + 68] = mem[idx + _3076 + 32]
                                idx = idx + 32
                                continue 
                            mem[_3141 + 94] = 0
                            revert with memory
                              from mem[64]
                               len _3141 + -mem[64] + 100
                        if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                            revert with 0, 17
                        if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                            revert with 0, 'SafeMath: addition overflow'
                        if not rewardPerNode:
                            if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _3991 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_3991] = 26
                                    mem[_3991 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4291 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4291] = 26
                                mem[_4291 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                _3992 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_3992] = 26
                                mem[_3992 + 32] = 'SafeMath: division by zero'
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4292 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4292] = 26
                            mem[_4292 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                revert with 0, 17
                            if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                            continue 
                        if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                            revert with 0, 17
                        if not rewardPerNode:
                            revert with 0, 18
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                            revert with 0, 17
                        if idx >= sub_2130fe23[address(arg1)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(address(arg1), 4)
                        if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                            revert with 0, 17
                        if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4289 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4289] = 26
                                mem[_4289 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4595 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4595] = 26
                            mem[_4595 + 32] = 'SafeMath: division by zero'
                            if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                revert with 0, 17
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                            continue 
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            _4290 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4290] = 26
                            mem[_4290 + 32] = 'SafeMath: division by zero'
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                            mem[0] = sha3(address(arg1), 4)
                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                            continue 
                        if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 17
                        if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                            revert with 0, 18
                        if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _4596 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_4596] = 26
                        mem[_4596 + 32] = 'SafeMath: division by zero'
                    else:
                        if 31 >= sub_2130fe23[address(arg1)][idx].field_1:
                            mem[_2680 + 32] = 256 * sub_2130fe23[address(arg1)][idx].field_8
                            mem[_2676] = _2680
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _2746 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2746] = 30
                                mem[_2746 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _2776 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _2776 + 68] = mem[idx + _2746 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2776 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2776 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _2936 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_2936] = 26
                                mem[_2936 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _2998 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _2998 + 68] = mem[idx + _2936 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_2998 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _2998 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _3800 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_3800] = 26
                                            mem[_3800 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _4035 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4035] = 26
                                        mem[_4035 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _3801 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_3801] = 26
                                        mem[_3801 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4036 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4036] = 26
                                    mem[_4036 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4033 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4033] = 26
                                        mem[_4033 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4357 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4357] = 26
                                    mem[_4357 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4034 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4034] = 26
                                    mem[_4034 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4358 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4358] = 26
                                mem[_4358 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _2902 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2902] = 30
                            mem[_2902 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _2968 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _2968 + 68] = mem[idx + _2902 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_2968 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _2968 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _3144 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3144] = 26
                            mem[_3144 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _3209 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _3209 + 68] = mem[idx + _3144 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_3209 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _3209 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _4079 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_4079] = 26
                                        mem[_4079 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _4419 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4419] = 26
                                    mem[_4419 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4080 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4080] = 26
                                    mem[_4080 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4420 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4420] = 26
                                mem[_4420 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _4417 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_4417] = 26
                                    mem[_4417 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _4719 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4719] = 26
                                mem[_4719 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _4418 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_4418] = 26
                                mem[_4418 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _4720 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_4720] = 26
                            mem[_4720 + 32] = 'SafeMath: division by zero'
                        else:
                            mem[0] = (4 * idx) + sha3(sha3(address(arg1), 4))
                            mem[_2680 + 32] = sub_2130fe23[address(arg1)][idx].field_0
                            t = _2680 + 32
                            u = sha3(mem[0])
                            while _2680 + sub_2130fe23[address(arg1)][idx].field_1 > t:
                                mem[t + 32] = stor1[u]
                                t = t + 32
                                u = u + 1
                                continue 
                            mem[_2676] = _2680
                            mem[_2676 + 32] = sub_2130fe23[address(arg1)][idx].field_256
                            mem[_2676 + 64] = sub_2130fe23[address(arg1)][idx].field_512
                            mem[_2676 + 96] = sub_2130fe23[address(arg1)][idx].field_768
                            if sub_2130fe23[address(arg1)][idx].field_512:
                                _5532 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5532] = 30
                                mem[_5532 + 32] = 'SafeMath: subtraction overflow'
                                if sub_2130fe23[address(arg1)][idx].field_512 > block.timestamp:
                                    _5544 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _5544 + 68] = mem[idx + _5532 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5544 + 98] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5544 + -mem[64] + 100
                                if block.timestamp < sub_2130fe23[address(arg1)][idx].field_512:
                                    revert with 0, 17
                                _5584 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5584] = 26
                                mem[_5584 + 32] = 'SafeMath: division by zero'
                                if not claimTime:
                                    _5622 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _5622 + 68] = mem[idx + _5584 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_5622 + 94] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5622 + -mem[64] + 100
                                if 0 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime):
                                    revert with 0, 17
                                if block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not rewardPerNode:
                                    if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    mem[0] = sha3(address(arg1), 4)
                                    if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                        revert with 0, 17
                                    if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            _5894 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_5894] = 26
                                            mem[_5894 + 32] = 'SafeMath: division by zero'
                                            if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                                revert with 0, 17
                                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                                revert with 0, 50
                                            sub_2130fe23[address(arg1)][idx].field_768 = 0
                                            mem[0] = sha3(address(arg1), 4)
                                            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            s = s + sub_2130fe23[address(arg1)][idx].field_768
                                            continue 
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 17
                                        if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                            revert with 0, 18
                                        if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        _5967 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5967] = 26
                                        mem[_5967 + 32] = 'SafeMath: division by zero'
                                        if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                            revert with 0, 17
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                        continue 
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5895 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5895] = 26
                                        mem[_5895 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5968 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5968] = 26
                                    mem[_5968 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                    continue 
                                if rewardPerNode and block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > -1 / rewardPerNode:
                                    revert with 0, 17
                                if not rewardPerNode:
                                    revert with 0, 18
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime / rewardPerNode != block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !((rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768):
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5965 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5965] = 26
                                        mem[_5965 + 32] = 'SafeMath: division by zero'
                                        if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6061 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6061] = 26
                                    mem[_6061 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5966 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5966] = 26
                                    mem[_5966 + 32] = 'SafeMath: division by zero'
                                    if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6062 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6062] = 26
                                mem[_6062 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * block.timestamp - sub_2130fe23[address(arg1)][idx].field_512 / claimTime * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            _5576 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5576] = 30
                            mem[_5576 + 32] = 'SafeMath: subtraction overflow'
                            if sub_2130fe23[address(arg1)][idx].field_256 > block.timestamp:
                                _5600 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _5600 + 68] = mem[idx + _5576 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5600 + 98] = 0
                                revert with memory
                                  from mem[64]
                                   len _5600 + -mem[64] + 100
                            if block.timestamp < sub_2130fe23[address(arg1)][idx].field_256:
                                revert with 0, 17
                            _5656 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5656] = 26
                            mem[_5656 + 32] = 'SafeMath: division by zero'
                            if not claimTime:
                                _5687 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _5687 + 68] = mem[idx + _5656 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_5687 + 94] = 0
                                revert with memory
                                  from mem[64]
                                   len _5687 + -mem[64] + 100
                            if 1 > !(block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime):
                                revert with 0, 17
                            if (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 < 1:
                                revert with 0, 'SafeMath: addition overflow'
                            if not rewardPerNode:
                                if 0 > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if s > !sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                mem[0] = sha3(address(arg1), 4)
                                if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                    revert with 0, 17
                                if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        _5983 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5983] = 26
                                        mem[_5983 + 32] = 'SafeMath: division by zero'
                                        if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                            revert with 0, 17
                                        if idx >= sub_2130fe23[address(arg1)].field_0:
                                            revert with 0, 50
                                        sub_2130fe23[address(arg1)][idx].field_768 = 0
                                        mem[0] = sha3(address(arg1), 4)
                                        sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s + sub_2130fe23[address(arg1)][idx].field_768
                                        continue 
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 17
                                    if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                        revert with 0, 18
                                    if (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _6095 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6095] = 26
                                    mem[_6095 + 32] = 'SafeMath: division by zero'
                                    if 0 > !((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                        revert with 0, 17
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                    continue 
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    _5984 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5984] = 26
                                    mem[_5984 + 32] = 'SafeMath: division by zero'
                                    if s + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6096 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6096] = 26
                                mem[_6096 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                                    revert with 0, 17
                                if s + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
                                continue 
                            if rewardPerNode and (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1 > -1 / rewardPerNode:
                                revert with 0, 17
                            if not rewardPerNode:
                                revert with 0, 18
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) / rewardPerNode != (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime) + 1:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) > !sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if s > !(rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768):
                                revert with 0, 17
                            if idx >= sub_2130fe23[address(arg1)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(address(arg1), 4)
                            if sub_2130fe23[address(arg1)][idx].field_512 > !claimDuration:
                                revert with 0, 17
                            if sub_2130fe23[address(arg1)][idx].field_512 + claimDuration > block.timestamp:
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    _6093 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6093] = 26
                                    mem[_6093 + 32] = 'SafeMath: division by zero'
                                    if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                        revert with 0, 17
                                    if idx >= sub_2130fe23[address(arg1)].field_0:
                                        revert with 0, 50
                                    sub_2130fe23[address(arg1)][idx].field_768 = 0
                                    mem[0] = sha3(address(arg1), 4)
                                    sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                    continue 
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_af89f87c > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 17
                                if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                    revert with 0, 18
                                if (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_af89f87c:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                _6175 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6175] = 26
                                mem[_6175 + 32] = 'SafeMath: division by zero'
                                if 0 > !((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100):
                                    revert with 0, 17
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_af89f87c) + (rewardPerNode * sub_af89f87c) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_af89f87c) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_af89f87c) / 100)
                                continue 
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                _6094 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6094] = 26
                                mem[_6094 + 32] = 'SafeMath: division by zero'
                                if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < 0:
                                    revert with 0, 17
                                if idx >= sub_2130fe23[address(arg1)].field_0:
                                    revert with 0, 50
                                sub_2130fe23[address(arg1)][idx].field_768 = 0
                                mem[0] = sha3(address(arg1), 4)
                                sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768
                                continue 
                            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 and sub_b137b854 > -1 / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 17
                            if not s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768:
                                revert with 0, 18
                            if (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 != sub_b137b854:
                                revert with 0, 'SafeMath: multiplication overflow'
                            _6176 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6176] = 26
                            mem[_6176 + 32] = 'SafeMath: division by zero'
            if 0 > !((s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100):
                revert with 0, 17
            if s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 < (s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100:
                revert with 0, 17
            if idx >= sub_2130fe23[address(arg1)].field_0:
                revert with 0, 50
            sub_2130fe23[address(arg1)][idx].field_768 = 0
            mem[0] = sha3(address(arg1), 4)
            sub_2130fe23[address(arg1)][idx].field_512 = block.timestamp
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + rewardPerNode + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode) + sub_2130fe23[address(arg1)][idx].field_768 - ((s * sub_b137b854) + (rewardPerNode * sub_b137b854) + (block.timestamp - sub_2130fe23[address(arg1)][idx].field_256 / claimTime * rewardPerNode * sub_b137b854) + (sub_2130fe23[address(arg1)][idx].field_768 * sub_b137b854) / 100)
            continue 
    return s, 0
}



}
