contract main {




// =====================  Runtime code  =====================


address factoryAddress;
address sushiSwapRouterAddress;

function factory() payable {
    return factoryAddress
}

function sushiSwapRouter() payable {
    return sushiSwapRouterAddress
}

function _fallback() payable {
    revert
}

function sub_382f2a55(?) payable {
    require calldata.size - 4 >= 192
    factoryAddress = arg1
    sushiSwapRouterAddress = arg2
    require ext_code.size(arg1)
    staticcall arg1.getPair(address rg1, address rg2) with:
            gas gas_remaining wei
           args address(arg3), arg4
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[12 len 20]:
        revert with 0, 'Could not find pool on uniswap'
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).swap(uint256 rg1, uint256 rg2, address rg3, bytes rg4) with:
         gas gas_remaining wei
        args arg5, arg6, this.address, 'flashloan'
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function uniswapV2Call(address arg1, uint256 arg2, uint256 arg3, bytes arg4) payable {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    mem[96] = 2
    require ext_code.size(msg.sender)
    staticcall msg.sender.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(msg.sender)
    staticcall msg.sender.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if address(ext_call.return_data[0]) == ext_call.return_data[12 len 20]:
        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[297 len 27]
    if not arg2:
        if address(ext_call.return_data[0]) < ext_call.return_data[12 len 20]:
            if not address(ext_call.return_data[0]):
                revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
            mem[224] = address(ext_call.return_data[0])
            mem[244] = address(ext_call.return_data[0])
            mem[192] = 40
            mem[296] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[297] = Mask(160, 96, factoryAddress)
            mem[317] = sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0]))
            mem[349] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
            mem[264] = 85
            if address(sha3(0, factoryAddress, sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0])), 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)) != msg.sender:
                revert with 0, 'Invalid Request'
            if not arg2:
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg3
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg3
                if not arg2:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30447 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34018 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30447)
                                    _34019 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34021 = sha3(mem[_34019 + 32 len mem[_34019]])
                                    mem[_34018 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34018 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34018 + 125] = _34021
                                    mem[_34018 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34018 + 72] = 85
                                    mem[64] = _34018 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34021, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34021, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34018 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34018 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34018 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34018 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34018 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34018 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34025 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34026 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34028 = sha3(mem[_34026 + 32 len mem[_34026]])
                                    mem[_34025 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34025 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34025 + 125] = _34028
                                    mem[_34025 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34025 + 72] = 85
                                    mem[64] = _34025 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34028, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34028, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34025 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34025 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34025 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34025 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34025 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34025 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34032 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30447)
                                    _34033 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34035 = sha3(mem[_34033 + 32 len mem[_34033]])
                                    mem[_34032 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34032 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34032 + 125] = _34035
                                    mem[_34032 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34032 + 72] = 85
                                    mem[64] = _34032 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34035, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34035, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34032 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34032 + 301 len 20]
                                    if address(_30447) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34032 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34032 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34032 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34032 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34039 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34040 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34042 = sha3(mem[_34040 + 32 len mem[_34040]])
                                    mem[_34039 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34039 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34039 + 125] = _34042
                                    mem[_34039 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34039 + 72] = 85
                                    mem[64] = _34039 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34042, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34042, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34039 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34039 + 301 len 20]
                                    if address(_30447) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34039 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34039 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34039 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34039 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30443 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30443
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30443, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59527 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59624 = mem[_59527]
                        require mem[_59527] <= 4294967296
                        require mem[_59527] + 32 <= return_data.size
                        require mem[_59527 + mem[_59527]] <= 4294967296 and mem[_59527] + (32 * mem[_59527 + mem[_59527]]) + 32 <= return_data.size
                        mem[_59527 + ceil32(return_data.size)] = mem[_59527 + mem[_59527]]
                        _59911 = mem[_59527 + _59624]
                        mem[_59527 + ceil32(return_data.size) + 32 len floor32(mem[_59527 + _59624])] = mem[_59527 + _59624 + 32 len floor32(mem[_59527 + _59624])]
                        mem[64] = (32 * _59911) + _59527 + ceil32(return_data.size) + 32
                        require 1 < mem[_59527 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30443
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59527 + ceil32(return_data.size) + 64] - _30443
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30457 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34074 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30457)
                                    _34075 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34077 = sha3(mem[_34075 + 32 len mem[_34075]])
                                    mem[_34074 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34074 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34074 + 125] = _34077
                                    mem[_34074 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34074 + 72] = 85
                                    mem[64] = _34074 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34077, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34077, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34074 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34074 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34074 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34074 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34074 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34074 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34081 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34082 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34084 = sha3(mem[_34082 + 32 len mem[_34082]])
                                    mem[_34081 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34081 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34081 + 125] = _34084
                                    mem[_34081 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34081 + 72] = 85
                                    mem[64] = _34081 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34084, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34084, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34081 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34081 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34081 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34081 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34081 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34081 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34088 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30457)
                                    _34089 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34091 = sha3(mem[_34089 + 32 len mem[_34089]])
                                    mem[_34088 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34088 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34088 + 125] = _34091
                                    mem[_34088 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34088 + 72] = 85
                                    mem[64] = _34088 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34091, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34091, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34088 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34088 + 301 len 20]
                                    if address(_30457) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34088 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34088 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34088 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34088 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34095 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34096 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34098 = sha3(mem[_34096 + 32 len mem[_34096]])
                                    mem[_34095 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34095 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34095 + 125] = _34098
                                    mem[_34095 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34095 + 72] = 85
                                    mem[64] = _34095 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34098, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34098, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34095 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34095 + 301 len 20]
                                    if address(_30457) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34095 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34095 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34095 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34095 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30453 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30453
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30453, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59529 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59628 = mem[_59529]
                        require mem[_59529] <= 4294967296
                        require mem[_59529] + 32 <= return_data.size
                        require mem[_59529 + mem[_59529]] <= 4294967296 and mem[_59529] + (32 * mem[_59529 + mem[_59529]]) + 32 <= return_data.size
                        mem[_59529 + ceil32(return_data.size)] = mem[_59529 + mem[_59529]]
                        _59913 = mem[_59529 + _59628]
                        mem[_59529 + ceil32(return_data.size) + 32 len floor32(mem[_59529 + _59628])] = mem[_59529 + _59628 + 32 len floor32(mem[_59529 + _59628])]
                        mem[64] = (32 * _59913) + _59529 + ceil32(return_data.size) + 32
                        require 1 < mem[_59529 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30453
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59529 + ceil32(return_data.size) + 64] - _30453
                else:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30467 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34130 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30467)
                                    _34131 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34133 = sha3(mem[_34131 + 32 len mem[_34131]])
                                    mem[_34130 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34130 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34130 + 125] = _34133
                                    mem[_34130 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34130 + 72] = 85
                                    mem[64] = _34130 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34133, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34133, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34130 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34130 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34130 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34130 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34130 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34130 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34137 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34138 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34140 = sha3(mem[_34138 + 32 len mem[_34138]])
                                    mem[_34137 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34137 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34137 + 125] = _34140
                                    mem[_34137 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34137 + 72] = 85
                                    mem[64] = _34137 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34140, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34140, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34137 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34137 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34137 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34137 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34137 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34137 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34144 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30467)
                                    _34145 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34147 = sha3(mem[_34145 + 32 len mem[_34145]])
                                    mem[_34144 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34144 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34144 + 125] = _34147
                                    mem[_34144 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34144 + 72] = 85
                                    mem[64] = _34144 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34147, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34147, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34144 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34144 + 301 len 20]
                                    if address(_30467) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34144 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34144 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34144 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34144 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34151 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34152 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34154 = sha3(mem[_34152 + 32 len mem[_34152]])
                                    mem[_34151 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34151 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34151 + 125] = _34154
                                    mem[_34151 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34151 + 72] = 85
                                    mem[64] = _34151 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34154, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34154, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34151 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34151 + 301 len 20]
                                    if address(_30467) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34151 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34151 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34151 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34151 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30463 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30463
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30463, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59531 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59632 = mem[_59531]
                        require mem[_59531] <= 4294967296
                        require mem[_59531] + 32 <= return_data.size
                        require mem[_59531 + mem[_59531]] <= 4294967296 and mem[_59531] + (32 * mem[_59531 + mem[_59531]]) + 32 <= return_data.size
                        mem[_59531 + ceil32(return_data.size)] = mem[_59531 + mem[_59531]]
                        _59915 = mem[_59531 + _59632]
                        mem[_59531 + ceil32(return_data.size) + 32 len floor32(mem[_59531 + _59632])] = mem[_59531 + _59632 + 32 len floor32(mem[_59531 + _59632])]
                        mem[64] = (32 * _59915) + _59531 + ceil32(return_data.size) + 32
                        require 1 < mem[_59531 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30463
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59531 + ceil32(return_data.size) + 64] - _30463
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30477 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34186 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30477)
                                    _34187 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34189 = sha3(mem[_34187 + 32 len mem[_34187]])
                                    mem[_34186 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34186 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34186 + 125] = _34189
                                    mem[_34186 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34186 + 72] = 85
                                    mem[64] = _34186 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34189, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34189, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34186 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34186 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34186 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34186 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34186 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34186 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34193 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34194 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34196 = sha3(mem[_34194 + 32 len mem[_34194]])
                                    mem[_34193 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34193 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34193 + 125] = _34196
                                    mem[_34193 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34193 + 72] = 85
                                    mem[64] = _34193 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34196, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34196, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34193 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34193 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34193 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34193 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34193 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34193 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34200 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30477)
                                    _34201 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34203 = sha3(mem[_34201 + 32 len mem[_34201]])
                                    mem[_34200 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34200 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34200 + 125] = _34203
                                    mem[_34200 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34200 + 72] = 85
                                    mem[64] = _34200 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34203, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34203, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34200 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34200 + 301 len 20]
                                    if address(_30477) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34200 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34200 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34200 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34200 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34207 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34208 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34210 = sha3(mem[_34208 + 32 len mem[_34208]])
                                    mem[_34207 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34207 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34207 + 125] = _34210
                                    mem[_34207 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34207 + 72] = 85
                                    mem[64] = _34207 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34210, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34210, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34207 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34207 + 301 len 20]
                                    if address(_30477) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34207 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34207 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34207 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34207 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30473 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30473
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30473, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59533 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59636 = mem[_59533]
                        require mem[_59533] <= 4294967296
                        require mem[_59533] + 32 <= return_data.size
                        require mem[_59533 + mem[_59533]] <= 4294967296 and mem[_59533] + (32 * mem[_59533 + mem[_59533]]) + 32 <= return_data.size
                        mem[_59533 + ceil32(return_data.size)] = mem[_59533 + mem[_59533]]
                        _59917 = mem[_59533 + _59636]
                        mem[_59533 + ceil32(return_data.size) + 32 len floor32(mem[_59533 + _59636])] = mem[_59533 + _59636 + 32 len floor32(mem[_59533 + _59636])]
                        mem[64] = (32 * _59917) + _59533 + ceil32(return_data.size) + 32
                        require 1 < mem[_59533 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30473
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59533 + ceil32(return_data.size) + 64] - _30473
            else:
                require not arg3
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg3
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg3
                if not arg2:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30487 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34242 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30487)
                                        _34243 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34245 = sha3(mem[_34243 + 32 len mem[_34243]])
                                        mem[_34242 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34242 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34242 + 125] = _34245
                                        mem[_34242 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34242 + 72] = 85
                                        mem[64] = _34242 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34245, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34245, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34242 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34242 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34242 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34242 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34242 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34242 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34249 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34250 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34252 = sha3(mem[_34250 + 32 len mem[_34250]])
                                        mem[_34249 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34249 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34249 + 125] = _34252
                                        mem[_34249 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34249 + 72] = 85
                                        mem[64] = _34249 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34252, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34252, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34249 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34249 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34249 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34249 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34249 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34249 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34256 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30487)
                                        _34257 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34259 = sha3(mem[_34257 + 32 len mem[_34257]])
                                        mem[_34256 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34256 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34256 + 125] = _34259
                                        mem[_34256 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34256 + 72] = 85
                                        mem[64] = _34256 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34259, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34259, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34256 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34256 + 301 len 20]
                                        if address(_30487) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34256 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34256 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34256 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34256 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34263 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34264 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34266 = sha3(mem[_34264 + 32 len mem[_34264]])
                                        mem[_34263 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34263 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34263 + 125] = _34266
                                        mem[_34263 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34263 + 72] = 85
                                        mem[64] = _34263 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34266, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34266, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34263 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34263 + 301 len 20]
                                        if address(_30487) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34263 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34263 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34263 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34263 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30483 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30483
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30483, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59535 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59640 = mem[_59535]
                            require mem[_59535] <= 4294967296
                            require mem[_59535] + 32 <= return_data.size
                            require mem[_59535 + mem[_59535]] <= 4294967296 and mem[_59535] + (32 * mem[_59535 + mem[_59535]]) + 32 <= return_data.size
                            mem[_59535 + ceil32(return_data.size)] = mem[_59535 + mem[_59535]]
                            _59919 = mem[_59535 + _59640]
                            mem[_59535 + ceil32(return_data.size) + 32 len floor32(mem[_59535 + _59640])] = mem[_59535 + _59640 + 32 len floor32(mem[_59535 + _59640])]
                            mem[64] = (32 * _59919) + _59535 + ceil32(return_data.size) + 32
                            require 1 < mem[_59535 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30483
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59535 + ceil32(return_data.size) + 64] - _30483
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30497 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34298 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30497)
                                        _34299 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34301 = sha3(mem[_34299 + 32 len mem[_34299]])
                                        mem[_34298 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34298 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34298 + 125] = _34301
                                        mem[_34298 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34298 + 72] = 85
                                        mem[64] = _34298 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34301, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34301, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34298 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34298 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34298 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34298 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34298 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34298 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34305 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34306 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34308 = sha3(mem[_34306 + 32 len mem[_34306]])
                                        mem[_34305 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34305 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34305 + 125] = _34308
                                        mem[_34305 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34305 + 72] = 85
                                        mem[64] = _34305 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34308, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34308, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34305 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34305 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34305 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34305 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34305 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34305 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34312 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30497)
                                        _34313 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34315 = sha3(mem[_34313 + 32 len mem[_34313]])
                                        mem[_34312 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34312 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34312 + 125] = _34315
                                        mem[_34312 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34312 + 72] = 85
                                        mem[64] = _34312 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34315, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34315, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34312 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34312 + 301 len 20]
                                        if address(_30497) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34312 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34312 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34312 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34312 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34319 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34320 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34322 = sha3(mem[_34320 + 32 len mem[_34320]])
                                        mem[_34319 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34319 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34319 + 125] = _34322
                                        mem[_34319 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34319 + 72] = 85
                                        mem[64] = _34319 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34322, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34322, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34319 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34319 + 301 len 20]
                                        if address(_30497) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34319 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34319 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34319 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34319 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30493 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30493
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30493, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59537 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59644 = mem[_59537]
                            require mem[_59537] <= 4294967296
                            require mem[_59537] + 32 <= return_data.size
                            require mem[_59537 + mem[_59537]] <= 4294967296 and mem[_59537] + (32 * mem[_59537 + mem[_59537]]) + 32 <= return_data.size
                            mem[_59537 + ceil32(return_data.size)] = mem[_59537 + mem[_59537]]
                            _59921 = mem[_59537 + _59644]
                            mem[_59537 + ceil32(return_data.size) + 32 len floor32(mem[_59537 + _59644])] = mem[_59537 + _59644 + 32 len floor32(mem[_59537 + _59644])]
                            mem[64] = (32 * _59921) + _59537 + ceil32(return_data.size) + 32
                            require 1 < mem[_59537 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30493
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59537 + ceil32(return_data.size) + 64] - _30493
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30507 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34354 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30507)
                                        _34355 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34357 = sha3(mem[_34355 + 32 len mem[_34355]])
                                        mem[_34354 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34354 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34354 + 125] = _34357
                                        mem[_34354 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34354 + 72] = 85
                                        mem[64] = _34354 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34357, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34357, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34354 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34354 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34354 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34354 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34354 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34354 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34361 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34362 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34364 = sha3(mem[_34362 + 32 len mem[_34362]])
                                        mem[_34361 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34361 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34361 + 125] = _34364
                                        mem[_34361 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34361 + 72] = 85
                                        mem[64] = _34361 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34364, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34364, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34361 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34361 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34361 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34361 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34361 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34361 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34368 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30507)
                                        _34369 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34371 = sha3(mem[_34369 + 32 len mem[_34369]])
                                        mem[_34368 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34368 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34368 + 125] = _34371
                                        mem[_34368 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34368 + 72] = 85
                                        mem[64] = _34368 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34371, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34371, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34368 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34368 + 301 len 20]
                                        if address(_30507) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34368 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34368 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34368 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34368 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34375 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34376 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34378 = sha3(mem[_34376 + 32 len mem[_34376]])
                                        mem[_34375 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34375 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34375 + 125] = _34378
                                        mem[_34375 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34375 + 72] = 85
                                        mem[64] = _34375 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34378, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34378, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34375 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34375 + 301 len 20]
                                        if address(_30507) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34375 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34375 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34375 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34375 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30503 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30503
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30503, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59539 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59648 = mem[_59539]
                            require mem[_59539] <= 4294967296
                            require mem[_59539] + 32 <= return_data.size
                            require mem[_59539 + mem[_59539]] <= 4294967296 and mem[_59539] + (32 * mem[_59539 + mem[_59539]]) + 32 <= return_data.size
                            mem[_59539 + ceil32(return_data.size)] = mem[_59539 + mem[_59539]]
                            _59923 = mem[_59539 + _59648]
                            mem[_59539 + ceil32(return_data.size) + 32 len floor32(mem[_59539 + _59648])] = mem[_59539 + _59648 + 32 len floor32(mem[_59539 + _59648])]
                            mem[64] = (32 * _59923) + _59539 + ceil32(return_data.size) + 32
                            require 1 < mem[_59539 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30503
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59539 + ceil32(return_data.size) + 64] - _30503
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30517 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34410 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30517)
                                        _34411 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34413 = sha3(mem[_34411 + 32 len mem[_34411]])
                                        mem[_34410 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34410 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34410 + 125] = _34413
                                        mem[_34410 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34410 + 72] = 85
                                        mem[64] = _34410 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34413, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34413, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34410 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34410 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34410 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34410 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34410 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34410 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34417 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34418 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34420 = sha3(mem[_34418 + 32 len mem[_34418]])
                                        mem[_34417 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34417 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34417 + 125] = _34420
                                        mem[_34417 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34417 + 72] = 85
                                        mem[64] = _34417 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34420, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34420, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34417 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34417 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34417 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34417 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34417 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34417 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34424 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30517)
                                        _34425 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34427 = sha3(mem[_34425 + 32 len mem[_34425]])
                                        mem[_34424 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34424 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34424 + 125] = _34427
                                        mem[_34424 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34424 + 72] = 85
                                        mem[64] = _34424 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34427, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34427, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34424 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34424 + 301 len 20]
                                        if address(_30517) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34424 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34424 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34424 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34424 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34431 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34432 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34434 = sha3(mem[_34432 + 32 len mem[_34432]])
                                        mem[_34431 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34431 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34431 + 125] = _34434
                                        mem[_34431 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34431 + 72] = 85
                                        mem[64] = _34431 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34434, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34434, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34431 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34431 + 301 len 20]
                                        if address(_30517) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34431 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34431 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34431 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34431 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30513 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30513
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30513, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59541 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59652 = mem[_59541]
                            require mem[_59541] <= 4294967296
                            require mem[_59541] + 32 <= return_data.size
                            require mem[_59541 + mem[_59541]] <= 4294967296 and mem[_59541] + (32 * mem[_59541 + mem[_59541]]) + 32 <= return_data.size
                            mem[_59541 + ceil32(return_data.size)] = mem[_59541 + mem[_59541]]
                            _59925 = mem[_59541 + _59652]
                            mem[_59541 + ceil32(return_data.size) + 32 len floor32(mem[_59541 + _59652])] = mem[_59541 + _59652 + 32 len floor32(mem[_59541 + _59652])]
                            mem[64] = (32 * _59925) + _59541 + ceil32(return_data.size) + 32
                            require 1 < mem[_59541 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30513
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59541 + ceil32(return_data.size) + 64] - _30513
                else:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30527 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34466 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30527)
                                        _34467 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34469 = sha3(mem[_34467 + 32 len mem[_34467]])
                                        mem[_34466 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34466 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34466 + 125] = _34469
                                        mem[_34466 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34466 + 72] = 85
                                        mem[64] = _34466 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34469, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34469, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34466 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34466 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34466 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34466 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34466 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34466 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34473 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34474 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34476 = sha3(mem[_34474 + 32 len mem[_34474]])
                                        mem[_34473 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34473 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34473 + 125] = _34476
                                        mem[_34473 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34473 + 72] = 85
                                        mem[64] = _34473 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34476, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34476, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34473 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34473 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34473 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34473 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34473 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34473 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34480 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30527)
                                        _34481 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34483 = sha3(mem[_34481 + 32 len mem[_34481]])
                                        mem[_34480 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34480 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34480 + 125] = _34483
                                        mem[_34480 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34480 + 72] = 85
                                        mem[64] = _34480 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34483, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34483, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34480 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34480 + 301 len 20]
                                        if address(_30527) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34480 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34480 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34480 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34480 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34487 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34488 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34490 = sha3(mem[_34488 + 32 len mem[_34488]])
                                        mem[_34487 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34487 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34487 + 125] = _34490
                                        mem[_34487 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34487 + 72] = 85
                                        mem[64] = _34487 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34490, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34490, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34487 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34487 + 301 len 20]
                                        if address(_30527) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34487 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34487 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34487 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34487 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30523 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30523
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30523, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59543 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59656 = mem[_59543]
                            require mem[_59543] <= 4294967296
                            require mem[_59543] + 32 <= return_data.size
                            require mem[_59543 + mem[_59543]] <= 4294967296 and mem[_59543] + (32 * mem[_59543 + mem[_59543]]) + 32 <= return_data.size
                            mem[_59543 + ceil32(return_data.size)] = mem[_59543 + mem[_59543]]
                            _59927 = mem[_59543 + _59656]
                            mem[_59543 + ceil32(return_data.size) + 32 len floor32(mem[_59543 + _59656])] = mem[_59543 + _59656 + 32 len floor32(mem[_59543 + _59656])]
                            mem[64] = (32 * _59927) + _59543 + ceil32(return_data.size) + 32
                            require 1 < mem[_59543 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30523
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59543 + ceil32(return_data.size) + 64] - _30523
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30537 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34522 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30537)
                                        _34523 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34525 = sha3(mem[_34523 + 32 len mem[_34523]])
                                        mem[_34522 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34522 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34522 + 125] = _34525
                                        mem[_34522 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34522 + 72] = 85
                                        mem[64] = _34522 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34525, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34525, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34522 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34522 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34522 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34522 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34522 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34522 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34529 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34530 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34532 = sha3(mem[_34530 + 32 len mem[_34530]])
                                        mem[_34529 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34529 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34529 + 125] = _34532
                                        mem[_34529 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34529 + 72] = 85
                                        mem[64] = _34529 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34532, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34532, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34529 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34529 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34529 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34529 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34529 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34529 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34536 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30537)
                                        _34537 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34539 = sha3(mem[_34537 + 32 len mem[_34537]])
                                        mem[_34536 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34536 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34536 + 125] = _34539
                                        mem[_34536 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34536 + 72] = 85
                                        mem[64] = _34536 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34539, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34539, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34536 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34536 + 301 len 20]
                                        if address(_30537) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34536 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34536 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34536 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34536 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34543 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34544 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34546 = sha3(mem[_34544 + 32 len mem[_34544]])
                                        mem[_34543 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34543 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34543 + 125] = _34546
                                        mem[_34543 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34543 + 72] = 85
                                        mem[64] = _34543 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34546, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34546, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34543 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34543 + 301 len 20]
                                        if address(_30537) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34543 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34543 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34543 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34543 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30533 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30533
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30533, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59545 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59660 = mem[_59545]
                            require mem[_59545] <= 4294967296
                            require mem[_59545] + 32 <= return_data.size
                            require mem[_59545 + mem[_59545]] <= 4294967296 and mem[_59545] + (32 * mem[_59545 + mem[_59545]]) + 32 <= return_data.size
                            mem[_59545 + ceil32(return_data.size)] = mem[_59545 + mem[_59545]]
                            _59929 = mem[_59545 + _59660]
                            mem[_59545 + ceil32(return_data.size) + 32 len floor32(mem[_59545 + _59660])] = mem[_59545 + _59660 + 32 len floor32(mem[_59545 + _59660])]
                            mem[64] = (32 * _59929) + _59545 + ceil32(return_data.size) + 32
                            require 1 < mem[_59545 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30533
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59545 + ceil32(return_data.size) + 64] - _30533
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30547 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34578 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30547)
                                        _34579 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34581 = sha3(mem[_34579 + 32 len mem[_34579]])
                                        mem[_34578 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34578 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34578 + 125] = _34581
                                        mem[_34578 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34578 + 72] = 85
                                        mem[64] = _34578 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34581, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34581, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34578 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34578 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34578 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34578 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34578 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34578 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34585 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34586 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34588 = sha3(mem[_34586 + 32 len mem[_34586]])
                                        mem[_34585 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34585 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34585 + 125] = _34588
                                        mem[_34585 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34585 + 72] = 85
                                        mem[64] = _34585 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34588, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34588, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34585 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34585 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34585 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34585 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34585 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34585 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34592 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30547)
                                        _34593 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34595 = sha3(mem[_34593 + 32 len mem[_34593]])
                                        mem[_34592 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34592 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34592 + 125] = _34595
                                        mem[_34592 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34592 + 72] = 85
                                        mem[64] = _34592 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34595, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34595, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34592 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34592 + 301 len 20]
                                        if address(_30547) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34592 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34592 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34592 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34592 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34599 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34600 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34602 = sha3(mem[_34600 + 32 len mem[_34600]])
                                        mem[_34599 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34599 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34599 + 125] = _34602
                                        mem[_34599 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34599 + 72] = 85
                                        mem[64] = _34599 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34602, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34602, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34599 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34599 + 301 len 20]
                                        if address(_30547) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34599 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34599 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34599 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34599 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30543 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30543
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30543, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59547 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59664 = mem[_59547]
                            require mem[_59547] <= 4294967296
                            require mem[_59547] + 32 <= return_data.size
                            require mem[_59547 + mem[_59547]] <= 4294967296 and mem[_59547] + (32 * mem[_59547 + mem[_59547]]) + 32 <= return_data.size
                            mem[_59547 + ceil32(return_data.size)] = mem[_59547 + mem[_59547]]
                            _59931 = mem[_59547 + _59664]
                            mem[_59547 + ceil32(return_data.size) + 32 len floor32(mem[_59547 + _59664])] = mem[_59547 + _59664 + 32 len floor32(mem[_59547 + _59664])]
                            mem[64] = (32 * _59931) + _59547 + ceil32(return_data.size) + 32
                            require 1 < mem[_59547 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30543
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59547 + ceil32(return_data.size) + 64] - _30543
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30557 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34634 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30557)
                                        _34635 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34637 = sha3(mem[_34635 + 32 len mem[_34635]])
                                        mem[_34634 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34634 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34634 + 125] = _34637
                                        mem[_34634 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34634 + 72] = 85
                                        mem[64] = _34634 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34637, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34637, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34634 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34634 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34634 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34634 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34634 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34634 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34641 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34642 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34644 = sha3(mem[_34642 + 32 len mem[_34642]])
                                        mem[_34641 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34641 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34641 + 125] = _34644
                                        mem[_34641 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34641 + 72] = 85
                                        mem[64] = _34641 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34644, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34644, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34641 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34641 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34641 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34641 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34641 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34641 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34648 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30557)
                                        _34649 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34651 = sha3(mem[_34649 + 32 len mem[_34649]])
                                        mem[_34648 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34648 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34648 + 125] = _34651
                                        mem[_34648 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34648 + 72] = 85
                                        mem[64] = _34648 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34651, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34651, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34648 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34648 + 301 len 20]
                                        if address(_30557) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34648 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34648 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34648 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34648 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34655 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34656 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34658 = sha3(mem[_34656 + 32 len mem[_34656]])
                                        mem[_34655 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34655 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34655 + 125] = _34658
                                        mem[_34655 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34655 + 72] = 85
                                        mem[64] = _34655 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34658, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34658, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34655 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34655 + 301 len 20]
                                        if address(_30557) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34655 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34655 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34655 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34655 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30553 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30553
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30553, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59549 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59668 = mem[_59549]
                            require mem[_59549] <= 4294967296
                            require mem[_59549] + 32 <= return_data.size
                            require mem[_59549 + mem[_59549]] <= 4294967296 and mem[_59549] + (32 * mem[_59549 + mem[_59549]]) + 32 <= return_data.size
                            mem[_59549 + ceil32(return_data.size)] = mem[_59549 + mem[_59549]]
                            _59933 = mem[_59549 + _59668]
                            mem[_59549 + ceil32(return_data.size) + 32 len floor32(mem[_59549 + _59668])] = mem[_59549 + _59668 + 32 len floor32(mem[_59549 + _59668])]
                            mem[64] = (32 * _59933) + _59549 + ceil32(return_data.size) + 32
                            require 1 < mem[_59549 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30553
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59549 + ceil32(return_data.size) + 64] - _30553
        else:
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
            mem[224] = address(ext_call.return_data[0])
            mem[244] = address(ext_call.return_data[0])
            mem[192] = 40
            mem[296] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[297] = Mask(160, 96, factoryAddress)
            mem[317] = sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0]))
            mem[349] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
            mem[264] = 85
            if address(sha3(0, factoryAddress, sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0])), 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)) != msg.sender:
                revert with 0, 'Invalid Request'
            if not arg2:
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg3
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg3
                if not arg2:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30567 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34690 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30567)
                                    _34691 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34693 = sha3(mem[_34691 + 32 len mem[_34691]])
                                    mem[_34690 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34690 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34690 + 125] = _34693
                                    mem[_34690 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34690 + 72] = 85
                                    mem[64] = _34690 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34693, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34693, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34690 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34690 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34690 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34690 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34690 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34690 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34697 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34698 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34700 = sha3(mem[_34698 + 32 len mem[_34698]])
                                    mem[_34697 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34697 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34697 + 125] = _34700
                                    mem[_34697 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34697 + 72] = 85
                                    mem[64] = _34697 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34700, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34700, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34697 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34697 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34697 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34697 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34697 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34697 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34704 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30567)
                                    _34705 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34707 = sha3(mem[_34705 + 32 len mem[_34705]])
                                    mem[_34704 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34704 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34704 + 125] = _34707
                                    mem[_34704 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34704 + 72] = 85
                                    mem[64] = _34704 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34707, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34707, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34704 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34704 + 301 len 20]
                                    if address(_30567) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34704 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34704 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34704 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34704 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34711 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34712 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34714 = sha3(mem[_34712 + 32 len mem[_34712]])
                                    mem[_34711 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34711 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34711 + 125] = _34714
                                    mem[_34711 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34711 + 72] = 85
                                    mem[64] = _34711 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34714, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34714, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34711 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34711 + 301 len 20]
                                    if address(_30567) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34711 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34711 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34711 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34711 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30563 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30563
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30563, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59551 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59672 = mem[_59551]
                        require mem[_59551] <= 4294967296
                        require mem[_59551] + 32 <= return_data.size
                        require mem[_59551 + mem[_59551]] <= 4294967296 and mem[_59551] + (32 * mem[_59551 + mem[_59551]]) + 32 <= return_data.size
                        mem[_59551 + ceil32(return_data.size)] = mem[_59551 + mem[_59551]]
                        _59935 = mem[_59551 + _59672]
                        mem[_59551 + ceil32(return_data.size) + 32 len floor32(mem[_59551 + _59672])] = mem[_59551 + _59672 + 32 len floor32(mem[_59551 + _59672])]
                        mem[64] = (32 * _59935) + _59551 + ceil32(return_data.size) + 32
                        require 1 < mem[_59551 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30563
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59551 + ceil32(return_data.size) + 64] - _30563
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30577 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34746 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30577)
                                    _34747 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34749 = sha3(mem[_34747 + 32 len mem[_34747]])
                                    mem[_34746 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34746 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34746 + 125] = _34749
                                    mem[_34746 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34746 + 72] = 85
                                    mem[64] = _34746 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34749, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34749, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34746 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34746 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34746 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34746 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34746 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34746 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34753 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34754 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34756 = sha3(mem[_34754 + 32 len mem[_34754]])
                                    mem[_34753 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34753 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34753 + 125] = _34756
                                    mem[_34753 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34753 + 72] = 85
                                    mem[64] = _34753 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34756, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34756, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34753 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34753 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34753 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34753 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34753 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34753 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34760 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30577)
                                    _34761 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34763 = sha3(mem[_34761 + 32 len mem[_34761]])
                                    mem[_34760 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34760 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34760 + 125] = _34763
                                    mem[_34760 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34760 + 72] = 85
                                    mem[64] = _34760 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34763, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34763, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34760 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34760 + 301 len 20]
                                    if address(_30577) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34760 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34760 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34760 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34760 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34767 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34768 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34770 = sha3(mem[_34768 + 32 len mem[_34768]])
                                    mem[_34767 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34767 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34767 + 125] = _34770
                                    mem[_34767 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34767 + 72] = 85
                                    mem[64] = _34767 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34770, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34770, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34767 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34767 + 301 len 20]
                                    if address(_30577) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34767 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34767 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34767 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34767 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30573 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30573
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30573, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59553 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59676 = mem[_59553]
                        require mem[_59553] <= 4294967296
                        require mem[_59553] + 32 <= return_data.size
                        require mem[_59553 + mem[_59553]] <= 4294967296 and mem[_59553] + (32 * mem[_59553 + mem[_59553]]) + 32 <= return_data.size
                        mem[_59553 + ceil32(return_data.size)] = mem[_59553 + mem[_59553]]
                        _59937 = mem[_59553 + _59676]
                        mem[_59553 + ceil32(return_data.size) + 32 len floor32(mem[_59553 + _59676])] = mem[_59553 + _59676 + 32 len floor32(mem[_59553 + _59676])]
                        mem[64] = (32 * _59937) + _59553 + ceil32(return_data.size) + 32
                        require 1 < mem[_59553 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30573
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59553 + ceil32(return_data.size) + 64] - _30573
                else:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30587 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34802 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30587)
                                    _34803 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34805 = sha3(mem[_34803 + 32 len mem[_34803]])
                                    mem[_34802 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34802 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34802 + 125] = _34805
                                    mem[_34802 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34802 + 72] = 85
                                    mem[64] = _34802 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34805, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34805, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34802 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34802 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34802 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34802 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34802 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34802 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34809 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34810 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34812 = sha3(mem[_34810 + 32 len mem[_34810]])
                                    mem[_34809 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34809 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34809 + 125] = _34812
                                    mem[_34809 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34809 + 72] = 85
                                    mem[64] = _34809 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34812, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34812, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34809 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34809 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34809 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34809 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34809 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34809 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34816 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30587)
                                    _34817 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34819 = sha3(mem[_34817 + 32 len mem[_34817]])
                                    mem[_34816 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34816 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34816 + 125] = _34819
                                    mem[_34816 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34816 + 72] = 85
                                    mem[64] = _34816 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34819, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34819, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34816 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34816 + 301 len 20]
                                    if address(_30587) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34816 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34816 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34816 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34816 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34823 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34824 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34826 = sha3(mem[_34824 + 32 len mem[_34824]])
                                    mem[_34823 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34823 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34823 + 125] = _34826
                                    mem[_34823 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34823 + 72] = 85
                                    mem[64] = _34823 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34826, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34826, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34823 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34823 + 301 len 20]
                                    if address(_30587) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34823 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34823 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34823 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34823 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30583 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30583
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30583, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59555 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59680 = mem[_59555]
                        require mem[_59555] <= 4294967296
                        require mem[_59555] + 32 <= return_data.size
                        require mem[_59555 + mem[_59555]] <= 4294967296 and mem[_59555] + (32 * mem[_59555 + mem[_59555]]) + 32 <= return_data.size
                        mem[_59555 + ceil32(return_data.size)] = mem[_59555 + mem[_59555]]
                        _59939 = mem[_59555 + _59680]
                        mem[_59555 + ceil32(return_data.size) + 32 len floor32(mem[_59555 + _59680])] = mem[_59555 + _59680 + 32 len floor32(mem[_59555 + _59680])]
                        mem[64] = (32 * _59939) + _59555 + ceil32(return_data.size) + 32
                        require 1 < mem[_59555 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30583
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59555 + ceil32(return_data.size) + 64] - _30583
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30597 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34858 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30597)
                                    _34859 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34861 = sha3(mem[_34859 + 32 len mem[_34859]])
                                    mem[_34858 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34858 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34858 + 125] = _34861
                                    mem[_34858 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34858 + 72] = 85
                                    mem[64] = _34858 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34861, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34861, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34858 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34858 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34858 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34858 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34858 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34858 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34865 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34866 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34868 = sha3(mem[_34866 + 32 len mem[_34866]])
                                    mem[_34865 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34865 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34865 + 125] = _34868
                                    mem[_34865 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34865 + 72] = 85
                                    mem[64] = _34865 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34868, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34868, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34865 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34865 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34865 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34865 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34865 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34865 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34872 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30597)
                                    _34873 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34875 = sha3(mem[_34873 + 32 len mem[_34873]])
                                    mem[_34872 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34872 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34872 + 125] = _34875
                                    mem[_34872 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34872 + 72] = 85
                                    mem[64] = _34872 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34875, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34875, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34872 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34872 + 301 len 20]
                                    if address(_30597) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34872 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34872 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34872 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34872 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _34879 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _34880 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _34882 = sha3(mem[_34880 + 32 len mem[_34880]])
                                    mem[_34879 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_34879 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_34879 + 125] = _34882
                                    mem[_34879 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_34879 + 72] = 85
                                    mem[64] = _34879 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _34882, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _34882, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_34879 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_34879 + 301 len 20]
                                    if address(_30597) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34879 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34879 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34879 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34879 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30593 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg3
                        mem[mem[64] + 36] = _30593
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg3, _30593, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59557 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59684 = mem[_59557]
                        require mem[_59557] <= 4294967296
                        require mem[_59557] + 32 <= return_data.size
                        require mem[_59557 + mem[_59557]] <= 4294967296 and mem[_59557] + (32 * mem[_59557 + mem[_59557]]) + 32 <= return_data.size
                        mem[_59557 + ceil32(return_data.size)] = mem[_59557 + mem[_59557]]
                        _59941 = mem[_59557 + _59684]
                        mem[_59557 + ceil32(return_data.size) + 32 len floor32(mem[_59557 + _59684])] = mem[_59557 + _59684 + 32 len floor32(mem[_59557 + _59684])]
                        mem[64] = (32 * _59941) + _59557 + ceil32(return_data.size) + 32
                        require 1 < mem[_59557 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30593
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59557 + ceil32(return_data.size) + 64] - _30593
            else:
                require not arg3
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg3
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg3
                if not arg2:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30607 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34914 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30607)
                                        _34915 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34917 = sha3(mem[_34915 + 32 len mem[_34915]])
                                        mem[_34914 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34914 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34914 + 125] = _34917
                                        mem[_34914 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34914 + 72] = 85
                                        mem[64] = _34914 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34917, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34917, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34914 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34914 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34914 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34914 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34914 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34914 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34921 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34922 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34924 = sha3(mem[_34922 + 32 len mem[_34922]])
                                        mem[_34921 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34921 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34921 + 125] = _34924
                                        mem[_34921 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34921 + 72] = 85
                                        mem[64] = _34921 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34924, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34924, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34921 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34921 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34921 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34921 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34921 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34921 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34928 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30607)
                                        _34929 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34931 = sha3(mem[_34929 + 32 len mem[_34929]])
                                        mem[_34928 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34928 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34928 + 125] = _34931
                                        mem[_34928 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34928 + 72] = 85
                                        mem[64] = _34928 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34931, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34931, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34928 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34928 + 301 len 20]
                                        if address(_30607) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34928 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34928 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34928 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34928 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34935 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34936 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34938 = sha3(mem[_34936 + 32 len mem[_34936]])
                                        mem[_34935 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34935 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34935 + 125] = _34938
                                        mem[_34935 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34935 + 72] = 85
                                        mem[64] = _34935 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34938, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34938, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34935 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34935 + 301 len 20]
                                        if address(_30607) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34935 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34935 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34935 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34935 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30603 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30603
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30603, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59559 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59688 = mem[_59559]
                            require mem[_59559] <= 4294967296
                            require mem[_59559] + 32 <= return_data.size
                            require mem[_59559 + mem[_59559]] <= 4294967296 and mem[_59559] + (32 * mem[_59559 + mem[_59559]]) + 32 <= return_data.size
                            mem[_59559 + ceil32(return_data.size)] = mem[_59559 + mem[_59559]]
                            _59943 = mem[_59559 + _59688]
                            mem[_59559 + ceil32(return_data.size) + 32 len floor32(mem[_59559 + _59688])] = mem[_59559 + _59688 + 32 len floor32(mem[_59559 + _59688])]
                            mem[64] = (32 * _59943) + _59559 + ceil32(return_data.size) + 32
                            require 1 < mem[_59559 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30603
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59559 + ceil32(return_data.size) + 64] - _30603
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30617 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34970 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30617)
                                        _34971 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34973 = sha3(mem[_34971 + 32 len mem[_34971]])
                                        mem[_34970 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34970 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34970 + 125] = _34973
                                        mem[_34970 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34970 + 72] = 85
                                        mem[64] = _34970 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34973, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34973, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34970 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34970 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34970 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34970 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34970 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34970 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34977 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34978 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34980 = sha3(mem[_34978 + 32 len mem[_34978]])
                                        mem[_34977 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34977 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34977 + 125] = _34980
                                        mem[_34977 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34977 + 72] = 85
                                        mem[64] = _34977 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34980, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34980, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34977 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34977 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34977 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34977 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34977 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34977 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34984 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30617)
                                        _34985 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34987 = sha3(mem[_34985 + 32 len mem[_34985]])
                                        mem[_34984 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34984 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34984 + 125] = _34987
                                        mem[_34984 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34984 + 72] = 85
                                        mem[64] = _34984 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34987, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34987, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34984 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34984 + 301 len 20]
                                        if address(_30617) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34984 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34984 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34984 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34984 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _34991 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _34992 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _34994 = sha3(mem[_34992 + 32 len mem[_34992]])
                                        mem[_34991 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_34991 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_34991 + 125] = _34994
                                        mem[_34991 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_34991 + 72] = 85
                                        mem[64] = _34991 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _34994, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _34994, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_34991 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_34991 + 301 len 20]
                                        if address(_30617) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34991 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34991 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34991 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_34991 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30613 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30613
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30613, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59561 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59692 = mem[_59561]
                            require mem[_59561] <= 4294967296
                            require mem[_59561] + 32 <= return_data.size
                            require mem[_59561 + mem[_59561]] <= 4294967296 and mem[_59561] + (32 * mem[_59561 + mem[_59561]]) + 32 <= return_data.size
                            mem[_59561 + ceil32(return_data.size)] = mem[_59561 + mem[_59561]]
                            _59945 = mem[_59561 + _59692]
                            mem[_59561 + ceil32(return_data.size) + 32 len floor32(mem[_59561 + _59692])] = mem[_59561 + _59692 + 32 len floor32(mem[_59561 + _59692])]
                            mem[64] = (32 * _59945) + _59561 + ceil32(return_data.size) + 32
                            require 1 < mem[_59561 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30613
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59561 + ceil32(return_data.size) + 64] - _30613
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30627 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35026 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30627)
                                        _35027 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35029 = sha3(mem[_35027 + 32 len mem[_35027]])
                                        mem[_35026 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35026 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35026 + 125] = _35029
                                        mem[_35026 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35026 + 72] = 85
                                        mem[64] = _35026 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35029, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35029, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35026 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35026 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35026 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35026 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35026 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35026 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35033 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35034 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35036 = sha3(mem[_35034 + 32 len mem[_35034]])
                                        mem[_35033 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35033 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35033 + 125] = _35036
                                        mem[_35033 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35033 + 72] = 85
                                        mem[64] = _35033 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35036, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35036, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35033 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35033 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35033 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35033 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35033 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35033 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35040 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30627)
                                        _35041 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35043 = sha3(mem[_35041 + 32 len mem[_35041]])
                                        mem[_35040 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35040 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35040 + 125] = _35043
                                        mem[_35040 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35040 + 72] = 85
                                        mem[64] = _35040 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35043, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35043, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35040 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35040 + 301 len 20]
                                        if address(_30627) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35040 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35040 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35040 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35040 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35047 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35048 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35050 = sha3(mem[_35048 + 32 len mem[_35048]])
                                        mem[_35047 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35047 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35047 + 125] = _35050
                                        mem[_35047 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35047 + 72] = 85
                                        mem[64] = _35047 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35050, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35050, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35047 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35047 + 301 len 20]
                                        if address(_30627) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35047 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35047 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35047 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35047 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30623 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30623
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30623, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59563 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59696 = mem[_59563]
                            require mem[_59563] <= 4294967296
                            require mem[_59563] + 32 <= return_data.size
                            require mem[_59563 + mem[_59563]] <= 4294967296 and mem[_59563] + (32 * mem[_59563 + mem[_59563]]) + 32 <= return_data.size
                            mem[_59563 + ceil32(return_data.size)] = mem[_59563 + mem[_59563]]
                            _59947 = mem[_59563 + _59696]
                            mem[_59563 + ceil32(return_data.size) + 32 len floor32(mem[_59563 + _59696])] = mem[_59563 + _59696 + 32 len floor32(mem[_59563 + _59696])]
                            mem[64] = (32 * _59947) + _59563 + ceil32(return_data.size) + 32
                            require 1 < mem[_59563 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30623
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59563 + ceil32(return_data.size) + 64] - _30623
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30637 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35082 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30637)
                                        _35083 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35085 = sha3(mem[_35083 + 32 len mem[_35083]])
                                        mem[_35082 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35082 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35082 + 125] = _35085
                                        mem[_35082 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35082 + 72] = 85
                                        mem[64] = _35082 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35085, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35085, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35082 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35082 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35082 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35082 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35082 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35082 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35089 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35090 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35092 = sha3(mem[_35090 + 32 len mem[_35090]])
                                        mem[_35089 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35089 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35089 + 125] = _35092
                                        mem[_35089 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35089 + 72] = 85
                                        mem[64] = _35089 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35092, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35092, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35089 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35089 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35089 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35089 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35089 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35089 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35096 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30637)
                                        _35097 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35099 = sha3(mem[_35097 + 32 len mem[_35097]])
                                        mem[_35096 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35096 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35096 + 125] = _35099
                                        mem[_35096 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35096 + 72] = 85
                                        mem[64] = _35096 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35099, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35099, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35096 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35096 + 301 len 20]
                                        if address(_30637) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35096 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35096 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35096 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35096 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35103 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35104 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35106 = sha3(mem[_35104 + 32 len mem[_35104]])
                                        mem[_35103 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35103 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35103 + 125] = _35106
                                        mem[_35103 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35103 + 72] = 85
                                        mem[64] = _35103 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35106, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35106, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35103 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35103 + 301 len 20]
                                        if address(_30637) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35103 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35103 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35103 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35103 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30633 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30633
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30633, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59565 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59700 = mem[_59565]
                            require mem[_59565] <= 4294967296
                            require mem[_59565] + 32 <= return_data.size
                            require mem[_59565 + mem[_59565]] <= 4294967296 and mem[_59565] + (32 * mem[_59565 + mem[_59565]]) + 32 <= return_data.size
                            mem[_59565 + ceil32(return_data.size)] = mem[_59565 + mem[_59565]]
                            _59949 = mem[_59565 + _59700]
                            mem[_59565 + ceil32(return_data.size) + 32 len floor32(mem[_59565 + _59700])] = mem[_59565 + _59700 + 32 len floor32(mem[_59565 + _59700])]
                            mem[64] = (32 * _59949) + _59565 + ceil32(return_data.size) + 32
                            require 1 < mem[_59565 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30633
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59565 + ceil32(return_data.size) + 64] - _30633
                else:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30647 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35138 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30647)
                                        _35139 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35141 = sha3(mem[_35139 + 32 len mem[_35139]])
                                        mem[_35138 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35138 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35138 + 125] = _35141
                                        mem[_35138 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35138 + 72] = 85
                                        mem[64] = _35138 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35141, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35141, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35138 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35138 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35138 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35138 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35138 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35138 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35145 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35146 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35148 = sha3(mem[_35146 + 32 len mem[_35146]])
                                        mem[_35145 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35145 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35145 + 125] = _35148
                                        mem[_35145 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35145 + 72] = 85
                                        mem[64] = _35145 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35148, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35148, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35145 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35145 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35145 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35145 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35145 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35145 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35152 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30647)
                                        _35153 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35155 = sha3(mem[_35153 + 32 len mem[_35153]])
                                        mem[_35152 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35152 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35152 + 125] = _35155
                                        mem[_35152 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35152 + 72] = 85
                                        mem[64] = _35152 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35155, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35155, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35152 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35152 + 301 len 20]
                                        if address(_30647) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35152 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35152 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35152 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35152 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35159 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35160 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35162 = sha3(mem[_35160 + 32 len mem[_35160]])
                                        mem[_35159 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35159 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35159 + 125] = _35162
                                        mem[_35159 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35159 + 72] = 85
                                        mem[64] = _35159 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35162, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35162, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35159 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35159 + 301 len 20]
                                        if address(_30647) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35159 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35159 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35159 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35159 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30643 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30643
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30643, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59567 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59704 = mem[_59567]
                            require mem[_59567] <= 4294967296
                            require mem[_59567] + 32 <= return_data.size
                            require mem[_59567 + mem[_59567]] <= 4294967296 and mem[_59567] + (32 * mem[_59567 + mem[_59567]]) + 32 <= return_data.size
                            mem[_59567 + ceil32(return_data.size)] = mem[_59567 + mem[_59567]]
                            _59951 = mem[_59567 + _59704]
                            mem[_59567 + ceil32(return_data.size) + 32 len floor32(mem[_59567 + _59704])] = mem[_59567 + _59704 + 32 len floor32(mem[_59567 + _59704])]
                            mem[64] = (32 * _59951) + _59567 + ceil32(return_data.size) + 32
                            require 1 < mem[_59567 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30643
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59567 + ceil32(return_data.size) + 64] - _30643
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30657 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35194 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30657)
                                        _35195 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35197 = sha3(mem[_35195 + 32 len mem[_35195]])
                                        mem[_35194 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35194 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35194 + 125] = _35197
                                        mem[_35194 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35194 + 72] = 85
                                        mem[64] = _35194 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35197, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35197, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35194 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35194 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35194 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35194 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35194 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35194 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35201 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35202 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35204 = sha3(mem[_35202 + 32 len mem[_35202]])
                                        mem[_35201 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35201 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35201 + 125] = _35204
                                        mem[_35201 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35201 + 72] = 85
                                        mem[64] = _35201 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35204, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35204, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35201 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35201 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35201 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35201 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35201 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35201 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35208 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30657)
                                        _35209 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35211 = sha3(mem[_35209 + 32 len mem[_35209]])
                                        mem[_35208 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35208 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35208 + 125] = _35211
                                        mem[_35208 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35208 + 72] = 85
                                        mem[64] = _35208 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35211, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35211, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35208 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35208 + 301 len 20]
                                        if address(_30657) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35208 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35208 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35208 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35208 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35215 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35216 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35218 = sha3(mem[_35216 + 32 len mem[_35216]])
                                        mem[_35215 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35215 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35215 + 125] = _35218
                                        mem[_35215 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35215 + 72] = 85
                                        mem[64] = _35215 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35218, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35218, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35215 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35215 + 301 len 20]
                                        if address(_30657) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35215 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35215 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35215 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35215 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30653 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30653
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30653, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59569 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59708 = mem[_59569]
                            require mem[_59569] <= 4294967296
                            require mem[_59569] + 32 <= return_data.size
                            require mem[_59569 + mem[_59569]] <= 4294967296 and mem[_59569] + (32 * mem[_59569 + mem[_59569]]) + 32 <= return_data.size
                            mem[_59569 + ceil32(return_data.size)] = mem[_59569 + mem[_59569]]
                            _59953 = mem[_59569 + _59708]
                            mem[_59569 + ceil32(return_data.size) + 32 len floor32(mem[_59569 + _59708])] = mem[_59569 + _59708 + 32 len floor32(mem[_59569 + _59708])]
                            mem[64] = (32 * _59953) + _59569 + ceil32(return_data.size) + 32
                            require 1 < mem[_59569 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30653
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59569 + ceil32(return_data.size) + 64] - _30653
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30667 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35250 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30667)
                                        _35251 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35253 = sha3(mem[_35251 + 32 len mem[_35251]])
                                        mem[_35250 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35250 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35250 + 125] = _35253
                                        mem[_35250 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35250 + 72] = 85
                                        mem[64] = _35250 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35253, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35253, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35250 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35250 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35250 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35250 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35250 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35250 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35257 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35258 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35260 = sha3(mem[_35258 + 32 len mem[_35258]])
                                        mem[_35257 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35257 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35257 + 125] = _35260
                                        mem[_35257 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35257 + 72] = 85
                                        mem[64] = _35257 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35260, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35260, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35257 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35257 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35257 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35257 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35257 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35257 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35264 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30667)
                                        _35265 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35267 = sha3(mem[_35265 + 32 len mem[_35265]])
                                        mem[_35264 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35264 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35264 + 125] = _35267
                                        mem[_35264 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35264 + 72] = 85
                                        mem[64] = _35264 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35267, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35267, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35264 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35264 + 301 len 20]
                                        if address(_30667) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35264 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35264 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35264 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35264 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35271 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35272 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35274 = sha3(mem[_35272 + 32 len mem[_35272]])
                                        mem[_35271 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35271 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35271 + 125] = _35274
                                        mem[_35271 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35271 + 72] = 85
                                        mem[64] = _35271 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35274, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35274, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35271 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35271 + 301 len 20]
                                        if address(_30667) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35271 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35271 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35271 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35271 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30663 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30663
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30663, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59571 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59712 = mem[_59571]
                            require mem[_59571] <= 4294967296
                            require mem[_59571] + 32 <= return_data.size
                            require mem[_59571 + mem[_59571]] <= 4294967296 and mem[_59571] + (32 * mem[_59571 + mem[_59571]]) + 32 <= return_data.size
                            mem[_59571 + ceil32(return_data.size)] = mem[_59571 + mem[_59571]]
                            _59955 = mem[_59571 + _59712]
                            mem[_59571 + ceil32(return_data.size) + 32 len floor32(mem[_59571 + _59712])] = mem[_59571 + _59712 + 32 len floor32(mem[_59571 + _59712])]
                            mem[64] = (32 * _59955) + _59571 + ceil32(return_data.size) + 32
                            require 1 < mem[_59571 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30663
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59571 + ceil32(return_data.size) + 64] - _30663
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30677 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35306 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30677)
                                        _35307 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35309 = sha3(mem[_35307 + 32 len mem[_35307]])
                                        mem[_35306 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35306 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35306 + 125] = _35309
                                        mem[_35306 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35306 + 72] = 85
                                        mem[64] = _35306 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35309, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35309, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35306 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35306 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35306 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35306 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35306 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35306 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35313 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35314 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35316 = sha3(mem[_35314 + 32 len mem[_35314]])
                                        mem[_35313 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35313 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35313 + 125] = _35316
                                        mem[_35313 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35313 + 72] = 85
                                        mem[64] = _35313 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35316, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35316, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35313 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35313 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35313 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35313 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35313 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35313 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35320 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30677)
                                        _35321 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35323 = sha3(mem[_35321 + 32 len mem[_35321]])
                                        mem[_35320 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35320 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35320 + 125] = _35323
                                        mem[_35320 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35320 + 72] = 85
                                        mem[64] = _35320 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35323, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35323, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35320 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35320 + 301 len 20]
                                        if address(_30677) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35320 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35320 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35320 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35320 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35327 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35328 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35330 = sha3(mem[_35328 + 32 len mem[_35328]])
                                        mem[_35327 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35327 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35327 + 125] = _35330
                                        mem[_35327 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35327 + 72] = 85
                                        mem[64] = _35327 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35330, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35330, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35327 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35327 + 301 len 20]
                                        if address(_30677) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35327 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35327 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35327 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35327 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30673 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg3
                            mem[mem[64] + 36] = _30673
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg3, _30673, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59573 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59716 = mem[_59573]
                            require mem[_59573] <= 4294967296
                            require mem[_59573] + 32 <= return_data.size
                            require mem[_59573 + mem[_59573]] <= 4294967296 and mem[_59573] + (32 * mem[_59573 + mem[_59573]]) + 32 <= return_data.size
                            mem[_59573 + ceil32(return_data.size)] = mem[_59573 + mem[_59573]]
                            _59957 = mem[_59573 + _59716]
                            mem[_59573 + ceil32(return_data.size) + 32 len floor32(mem[_59573 + _59716])] = mem[_59573 + _59716 + 32 len floor32(mem[_59573 + _59716])]
                            mem[64] = (32 * _59957) + _59573 + ceil32(return_data.size) + 32
                            require 1 < mem[_59573 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30673
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59573 + ceil32(return_data.size) + 64] - _30673
    else:
        if address(ext_call.return_data[0]) < ext_call.return_data[12 len 20]:
            if not address(ext_call.return_data[0]):
                revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
            mem[224] = address(ext_call.return_data[0])
            mem[244] = address(ext_call.return_data[0])
            mem[192] = 40
            mem[296] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[297] = Mask(160, 96, factoryAddress)
            mem[317] = sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0]))
            mem[349] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
            mem[264] = 85
            if address(sha3(0, factoryAddress, sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0])), 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)) != msg.sender:
                revert with 0, 'Invalid Request'
            if not arg2:
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg2
                if not arg2:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30687 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35362 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30687)
                                    _35363 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35365 = sha3(mem[_35363 + 32 len mem[_35363]])
                                    mem[_35362 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35362 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35362 + 125] = _35365
                                    mem[_35362 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35362 + 72] = 85
                                    mem[64] = _35362 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35365, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35365, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35362 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35362 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35362 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35362 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35362 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35362 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35369 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35370 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35372 = sha3(mem[_35370 + 32 len mem[_35370]])
                                    mem[_35369 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35369 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35369 + 125] = _35372
                                    mem[_35369 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35369 + 72] = 85
                                    mem[64] = _35369 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35372, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35372, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35369 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35369 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35369 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35369 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35369 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35369 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35376 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30687)
                                    _35377 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35379 = sha3(mem[_35377 + 32 len mem[_35377]])
                                    mem[_35376 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35376 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35376 + 125] = _35379
                                    mem[_35376 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35376 + 72] = 85
                                    mem[64] = _35376 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35379, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35379, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35376 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35376 + 301 len 20]
                                    if address(_30687) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35376 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35376 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35376 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35376 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35383 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35384 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35386 = sha3(mem[_35384 + 32 len mem[_35384]])
                                    mem[_35383 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35383 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35383 + 125] = _35386
                                    mem[_35383 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35383 + 72] = 85
                                    mem[64] = _35383 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35386, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35386, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35383 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35383 + 301 len 20]
                                    if address(_30687) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35383 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35383 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35383 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35383 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30683 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30683
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30683, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59575 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59720 = mem[_59575]
                        require mem[_59575] <= 4294967296
                        require mem[_59575] + 32 <= return_data.size
                        require mem[_59575 + mem[_59575]] <= 4294967296 and mem[_59575] + (32 * mem[_59575 + mem[_59575]]) + 32 <= return_data.size
                        mem[_59575 + ceil32(return_data.size)] = mem[_59575 + mem[_59575]]
                        _59959 = mem[_59575 + _59720]
                        mem[_59575 + ceil32(return_data.size) + 32 len floor32(mem[_59575 + _59720])] = mem[_59575 + _59720 + 32 len floor32(mem[_59575 + _59720])]
                        mem[64] = (32 * _59959) + _59575 + ceil32(return_data.size) + 32
                        require 1 < mem[_59575 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30683
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59575 + ceil32(return_data.size) + 64] - _30683
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30697 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35418 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30697)
                                    _35419 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35421 = sha3(mem[_35419 + 32 len mem[_35419]])
                                    mem[_35418 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35418 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35418 + 125] = _35421
                                    mem[_35418 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35418 + 72] = 85
                                    mem[64] = _35418 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35421, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35421, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35418 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35418 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35418 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35418 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35418 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35418 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35425 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35426 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35428 = sha3(mem[_35426 + 32 len mem[_35426]])
                                    mem[_35425 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35425 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35425 + 125] = _35428
                                    mem[_35425 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35425 + 72] = 85
                                    mem[64] = _35425 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35428, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35428, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35425 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35425 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35425 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35425 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35425 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35425 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35432 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30697)
                                    _35433 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35435 = sha3(mem[_35433 + 32 len mem[_35433]])
                                    mem[_35432 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35432 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35432 + 125] = _35435
                                    mem[_35432 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35432 + 72] = 85
                                    mem[64] = _35432 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35435, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35435, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35432 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35432 + 301 len 20]
                                    if address(_30697) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35432 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35432 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35432 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35432 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35439 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35440 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35442 = sha3(mem[_35440 + 32 len mem[_35440]])
                                    mem[_35439 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35439 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35439 + 125] = _35442
                                    mem[_35439 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35439 + 72] = 85
                                    mem[64] = _35439 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35442, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35442, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35439 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35439 + 301 len 20]
                                    if address(_30697) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35439 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35439 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35439 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35439 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30693 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30693
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30693, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59577 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59724 = mem[_59577]
                        require mem[_59577] <= 4294967296
                        require mem[_59577] + 32 <= return_data.size
                        require mem[_59577 + mem[_59577]] <= 4294967296 and mem[_59577] + (32 * mem[_59577 + mem[_59577]]) + 32 <= return_data.size
                        mem[_59577 + ceil32(return_data.size)] = mem[_59577 + mem[_59577]]
                        _59961 = mem[_59577 + _59724]
                        mem[_59577 + ceil32(return_data.size) + 32 len floor32(mem[_59577 + _59724])] = mem[_59577 + _59724 + 32 len floor32(mem[_59577 + _59724])]
                        mem[64] = (32 * _59961) + _59577 + ceil32(return_data.size) + 32
                        require 1 < mem[_59577 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30693
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59577 + ceil32(return_data.size) + 64] - _30693
                else:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30707 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35474 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30707)
                                    _35475 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35477 = sha3(mem[_35475 + 32 len mem[_35475]])
                                    mem[_35474 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35474 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35474 + 125] = _35477
                                    mem[_35474 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35474 + 72] = 85
                                    mem[64] = _35474 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35477, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35477, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35474 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35474 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35474 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35474 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35474 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35474 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35481 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35482 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35484 = sha3(mem[_35482 + 32 len mem[_35482]])
                                    mem[_35481 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35481 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35481 + 125] = _35484
                                    mem[_35481 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35481 + 72] = 85
                                    mem[64] = _35481 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35484, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35484, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35481 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35481 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35481 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35481 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35481 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35481 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35488 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30707)
                                    _35489 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35491 = sha3(mem[_35489 + 32 len mem[_35489]])
                                    mem[_35488 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35488 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35488 + 125] = _35491
                                    mem[_35488 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35488 + 72] = 85
                                    mem[64] = _35488 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35491, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35491, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35488 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35488 + 301 len 20]
                                    if address(_30707) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35488 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35488 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35488 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35488 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35495 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35496 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35498 = sha3(mem[_35496 + 32 len mem[_35496]])
                                    mem[_35495 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35495 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35495 + 125] = _35498
                                    mem[_35495 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35495 + 72] = 85
                                    mem[64] = _35495 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35498, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35498, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35495 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35495 + 301 len 20]
                                    if address(_30707) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35495 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35495 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35495 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35495 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30703 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30703
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30703, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59579 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59728 = mem[_59579]
                        require mem[_59579] <= 4294967296
                        require mem[_59579] + 32 <= return_data.size
                        require mem[_59579 + mem[_59579]] <= 4294967296 and mem[_59579] + (32 * mem[_59579 + mem[_59579]]) + 32 <= return_data.size
                        mem[_59579 + ceil32(return_data.size)] = mem[_59579 + mem[_59579]]
                        _59963 = mem[_59579 + _59728]
                        mem[_59579 + ceil32(return_data.size) + 32 len floor32(mem[_59579 + _59728])] = mem[_59579 + _59728 + 32 len floor32(mem[_59579 + _59728])]
                        mem[64] = (32 * _59963) + _59579 + ceil32(return_data.size) + 32
                        require 1 < mem[_59579 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30703
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59579 + ceil32(return_data.size) + 64] - _30703
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30717 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35530 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30717)
                                    _35531 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35533 = sha3(mem[_35531 + 32 len mem[_35531]])
                                    mem[_35530 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35530 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35530 + 125] = _35533
                                    mem[_35530 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35530 + 72] = 85
                                    mem[64] = _35530 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35533, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35533, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35530 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35530 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35530 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35530 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35530 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35530 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35537 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35538 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35540 = sha3(mem[_35538 + 32 len mem[_35538]])
                                    mem[_35537 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35537 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35537 + 125] = _35540
                                    mem[_35537 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35537 + 72] = 85
                                    mem[64] = _35537 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35540, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35540, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35537 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35537 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35537 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35537 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35537 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35537 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35544 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30717)
                                    _35545 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35547 = sha3(mem[_35545 + 32 len mem[_35545]])
                                    mem[_35544 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35544 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35544 + 125] = _35547
                                    mem[_35544 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35544 + 72] = 85
                                    mem[64] = _35544 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35547, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35547, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35544 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35544 + 301 len 20]
                                    if address(_30717) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35544 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35544 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35544 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35544 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _35551 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _35552 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _35554 = sha3(mem[_35552 + 32 len mem[_35552]])
                                    mem[_35551 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_35551 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_35551 + 125] = _35554
                                    mem[_35551 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_35551 + 72] = 85
                                    mem[64] = _35551 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _35554, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _35554, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_35551 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_35551 + 301 len 20]
                                    if address(_30717) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35551 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35551 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35551 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35551 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30713 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30713
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30713, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59581 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59732 = mem[_59581]
                        require mem[_59581] <= 4294967296
                        require mem[_59581] + 32 <= return_data.size
                        require mem[_59581 + mem[_59581]] <= 4294967296 and mem[_59581] + (32 * mem[_59581 + mem[_59581]]) + 32 <= return_data.size
                        mem[_59581 + ceil32(return_data.size)] = mem[_59581 + mem[_59581]]
                        _59965 = mem[_59581 + _59732]
                        mem[_59581 + ceil32(return_data.size) + 32 len floor32(mem[_59581 + _59732])] = mem[_59581 + _59732 + 32 len floor32(mem[_59581 + _59732])]
                        mem[64] = (32 * _59965) + _59581 + ceil32(return_data.size) + 32
                        require 1 < mem[_59581 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30713
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59581 + ceil32(return_data.size) + 64] - _30713
            else:
                require not arg3
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg2
                if not arg2:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30727 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35586 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30727)
                                        _35587 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35589 = sha3(mem[_35587 + 32 len mem[_35587]])
                                        mem[_35586 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35586 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35586 + 125] = _35589
                                        mem[_35586 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35586 + 72] = 85
                                        mem[64] = _35586 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35589, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35589, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35586 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35586 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35586 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35586 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35586 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35586 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35593 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35594 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35596 = sha3(mem[_35594 + 32 len mem[_35594]])
                                        mem[_35593 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35593 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35593 + 125] = _35596
                                        mem[_35593 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35593 + 72] = 85
                                        mem[64] = _35593 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35596, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35596, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35593 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35593 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35593 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35593 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35593 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35593 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35600 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30727)
                                        _35601 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35603 = sha3(mem[_35601 + 32 len mem[_35601]])
                                        mem[_35600 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35600 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35600 + 125] = _35603
                                        mem[_35600 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35600 + 72] = 85
                                        mem[64] = _35600 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35603, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35603, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35600 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35600 + 301 len 20]
                                        if address(_30727) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35600 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35600 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35600 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35600 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35607 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35608 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35610 = sha3(mem[_35608 + 32 len mem[_35608]])
                                        mem[_35607 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35607 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35607 + 125] = _35610
                                        mem[_35607 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35607 + 72] = 85
                                        mem[64] = _35607 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35610, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35610, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35607 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35607 + 301 len 20]
                                        if address(_30727) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35607 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35607 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35607 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35607 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30723 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30723
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30723, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59583 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59736 = mem[_59583]
                            require mem[_59583] <= 4294967296
                            require mem[_59583] + 32 <= return_data.size
                            require mem[_59583 + mem[_59583]] <= 4294967296 and mem[_59583] + (32 * mem[_59583 + mem[_59583]]) + 32 <= return_data.size
                            mem[_59583 + ceil32(return_data.size)] = mem[_59583 + mem[_59583]]
                            _59967 = mem[_59583 + _59736]
                            mem[_59583 + ceil32(return_data.size) + 32 len floor32(mem[_59583 + _59736])] = mem[_59583 + _59736 + 32 len floor32(mem[_59583 + _59736])]
                            mem[64] = (32 * _59967) + _59583 + ceil32(return_data.size) + 32
                            require 1 < mem[_59583 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30723
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59583 + ceil32(return_data.size) + 64] - _30723
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30737 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35642 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30737)
                                        _35643 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35645 = sha3(mem[_35643 + 32 len mem[_35643]])
                                        mem[_35642 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35642 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35642 + 125] = _35645
                                        mem[_35642 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35642 + 72] = 85
                                        mem[64] = _35642 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35645, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35645, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35642 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35642 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35642 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35642 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35642 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35642 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35649 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35650 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35652 = sha3(mem[_35650 + 32 len mem[_35650]])
                                        mem[_35649 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35649 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35649 + 125] = _35652
                                        mem[_35649 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35649 + 72] = 85
                                        mem[64] = _35649 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35652, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35652, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35649 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35649 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35649 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35649 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35649 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35649 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35656 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30737)
                                        _35657 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35659 = sha3(mem[_35657 + 32 len mem[_35657]])
                                        mem[_35656 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35656 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35656 + 125] = _35659
                                        mem[_35656 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35656 + 72] = 85
                                        mem[64] = _35656 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35659, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35659, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35656 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35656 + 301 len 20]
                                        if address(_30737) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35656 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35656 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35656 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35656 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35663 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35664 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35666 = sha3(mem[_35664 + 32 len mem[_35664]])
                                        mem[_35663 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35663 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35663 + 125] = _35666
                                        mem[_35663 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35663 + 72] = 85
                                        mem[64] = _35663 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35666, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35666, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35663 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35663 + 301 len 20]
                                        if address(_30737) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35663 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35663 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35663 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35663 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30733 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30733
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30733, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59585 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59740 = mem[_59585]
                            require mem[_59585] <= 4294967296
                            require mem[_59585] + 32 <= return_data.size
                            require mem[_59585 + mem[_59585]] <= 4294967296 and mem[_59585] + (32 * mem[_59585 + mem[_59585]]) + 32 <= return_data.size
                            mem[_59585 + ceil32(return_data.size)] = mem[_59585 + mem[_59585]]
                            _59969 = mem[_59585 + _59740]
                            mem[_59585 + ceil32(return_data.size) + 32 len floor32(mem[_59585 + _59740])] = mem[_59585 + _59740 + 32 len floor32(mem[_59585 + _59740])]
                            mem[64] = (32 * _59969) + _59585 + ceil32(return_data.size) + 32
                            require 1 < mem[_59585 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30733
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59585 + ceil32(return_data.size) + 64] - _30733
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30747 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35698 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30747)
                                        _35699 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35701 = sha3(mem[_35699 + 32 len mem[_35699]])
                                        mem[_35698 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35698 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35698 + 125] = _35701
                                        mem[_35698 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35698 + 72] = 85
                                        mem[64] = _35698 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35701, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35701, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35698 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35698 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35698 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35698 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35698 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35698 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35705 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35706 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35708 = sha3(mem[_35706 + 32 len mem[_35706]])
                                        mem[_35705 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35705 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35705 + 125] = _35708
                                        mem[_35705 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35705 + 72] = 85
                                        mem[64] = _35705 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35708, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35708, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35705 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35705 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35705 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35705 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35705 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35705 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35712 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30747)
                                        _35713 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35715 = sha3(mem[_35713 + 32 len mem[_35713]])
                                        mem[_35712 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35712 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35712 + 125] = _35715
                                        mem[_35712 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35712 + 72] = 85
                                        mem[64] = _35712 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35715, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35715, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35712 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35712 + 301 len 20]
                                        if address(_30747) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35712 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35712 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35712 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35712 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35719 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35720 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35722 = sha3(mem[_35720 + 32 len mem[_35720]])
                                        mem[_35719 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35719 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35719 + 125] = _35722
                                        mem[_35719 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35719 + 72] = 85
                                        mem[64] = _35719 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35722, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35722, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35719 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35719 + 301 len 20]
                                        if address(_30747) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35719 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35719 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35719 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35719 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30743 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30743
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30743, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59587 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59744 = mem[_59587]
                            require mem[_59587] <= 4294967296
                            require mem[_59587] + 32 <= return_data.size
                            require mem[_59587 + mem[_59587]] <= 4294967296 and mem[_59587] + (32 * mem[_59587 + mem[_59587]]) + 32 <= return_data.size
                            mem[_59587 + ceil32(return_data.size)] = mem[_59587 + mem[_59587]]
                            _59971 = mem[_59587 + _59744]
                            mem[_59587 + ceil32(return_data.size) + 32 len floor32(mem[_59587 + _59744])] = mem[_59587 + _59744 + 32 len floor32(mem[_59587 + _59744])]
                            mem[64] = (32 * _59971) + _59587 + ceil32(return_data.size) + 32
                            require 1 < mem[_59587 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30743
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59587 + ceil32(return_data.size) + 64] - _30743
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30757 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35754 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30757)
                                        _35755 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35757 = sha3(mem[_35755 + 32 len mem[_35755]])
                                        mem[_35754 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35754 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35754 + 125] = _35757
                                        mem[_35754 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35754 + 72] = 85
                                        mem[64] = _35754 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35757, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35757, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35754 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35754 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35754 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35754 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35754 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35754 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35761 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35762 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35764 = sha3(mem[_35762 + 32 len mem[_35762]])
                                        mem[_35761 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35761 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35761 + 125] = _35764
                                        mem[_35761 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35761 + 72] = 85
                                        mem[64] = _35761 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35764, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35764, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35761 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35761 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35761 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35761 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35761 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35761 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35768 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30757)
                                        _35769 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35771 = sha3(mem[_35769 + 32 len mem[_35769]])
                                        mem[_35768 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35768 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35768 + 125] = _35771
                                        mem[_35768 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35768 + 72] = 85
                                        mem[64] = _35768 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35771, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35771, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35768 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35768 + 301 len 20]
                                        if address(_30757) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35768 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35768 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35768 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35768 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35775 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35776 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35778 = sha3(mem[_35776 + 32 len mem[_35776]])
                                        mem[_35775 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35775 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35775 + 125] = _35778
                                        mem[_35775 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35775 + 72] = 85
                                        mem[64] = _35775 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35778, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35778, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35775 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35775 + 301 len 20]
                                        if address(_30757) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35775 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35775 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35775 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35775 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30753 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30753
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30753, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59589 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59748 = mem[_59589]
                            require mem[_59589] <= 4294967296
                            require mem[_59589] + 32 <= return_data.size
                            require mem[_59589 + mem[_59589]] <= 4294967296 and mem[_59589] + (32 * mem[_59589 + mem[_59589]]) + 32 <= return_data.size
                            mem[_59589 + ceil32(return_data.size)] = mem[_59589 + mem[_59589]]
                            _59973 = mem[_59589 + _59748]
                            mem[_59589 + ceil32(return_data.size) + 32 len floor32(mem[_59589 + _59748])] = mem[_59589 + _59748 + 32 len floor32(mem[_59589 + _59748])]
                            mem[64] = (32 * _59973) + _59589 + ceil32(return_data.size) + 32
                            require 1 < mem[_59589 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30753
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59589 + ceil32(return_data.size) + 64] - _30753
                else:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30767 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35810 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30767)
                                        _35811 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35813 = sha3(mem[_35811 + 32 len mem[_35811]])
                                        mem[_35810 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35810 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35810 + 125] = _35813
                                        mem[_35810 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35810 + 72] = 85
                                        mem[64] = _35810 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35813, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35813, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35810 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35810 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35810 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35810 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35810 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35810 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35817 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35818 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35820 = sha3(mem[_35818 + 32 len mem[_35818]])
                                        mem[_35817 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35817 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35817 + 125] = _35820
                                        mem[_35817 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35817 + 72] = 85
                                        mem[64] = _35817 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35820, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35820, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35817 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35817 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35817 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35817 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35817 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35817 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35824 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30767)
                                        _35825 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35827 = sha3(mem[_35825 + 32 len mem[_35825]])
                                        mem[_35824 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35824 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35824 + 125] = _35827
                                        mem[_35824 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35824 + 72] = 85
                                        mem[64] = _35824 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35827, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35827, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35824 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35824 + 301 len 20]
                                        if address(_30767) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35824 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35824 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35824 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35824 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35831 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35832 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35834 = sha3(mem[_35832 + 32 len mem[_35832]])
                                        mem[_35831 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35831 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35831 + 125] = _35834
                                        mem[_35831 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35831 + 72] = 85
                                        mem[64] = _35831 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35834, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35834, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35831 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35831 + 301 len 20]
                                        if address(_30767) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35831 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35831 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35831 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35831 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30763 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30763
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30763, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59591 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59752 = mem[_59591]
                            require mem[_59591] <= 4294967296
                            require mem[_59591] + 32 <= return_data.size
                            require mem[_59591 + mem[_59591]] <= 4294967296 and mem[_59591] + (32 * mem[_59591 + mem[_59591]]) + 32 <= return_data.size
                            mem[_59591 + ceil32(return_data.size)] = mem[_59591 + mem[_59591]]
                            _59975 = mem[_59591 + _59752]
                            mem[_59591 + ceil32(return_data.size) + 32 len floor32(mem[_59591 + _59752])] = mem[_59591 + _59752 + 32 len floor32(mem[_59591 + _59752])]
                            mem[64] = (32 * _59975) + _59591 + ceil32(return_data.size) + 32
                            require 1 < mem[_59591 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30763
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59591 + ceil32(return_data.size) + 64] - _30763
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30777 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35866 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30777)
                                        _35867 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35869 = sha3(mem[_35867 + 32 len mem[_35867]])
                                        mem[_35866 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35866 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35866 + 125] = _35869
                                        mem[_35866 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35866 + 72] = 85
                                        mem[64] = _35866 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35869, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35869, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35866 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35866 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35866 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35866 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35866 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35866 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35873 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35874 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35876 = sha3(mem[_35874 + 32 len mem[_35874]])
                                        mem[_35873 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35873 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35873 + 125] = _35876
                                        mem[_35873 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35873 + 72] = 85
                                        mem[64] = _35873 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35876, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35876, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35873 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35873 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35873 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35873 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35873 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35873 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35880 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30777)
                                        _35881 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35883 = sha3(mem[_35881 + 32 len mem[_35881]])
                                        mem[_35880 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35880 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35880 + 125] = _35883
                                        mem[_35880 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35880 + 72] = 85
                                        mem[64] = _35880 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35883, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35883, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35880 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35880 + 301 len 20]
                                        if address(_30777) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35880 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35880 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35880 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35880 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35887 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35888 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35890 = sha3(mem[_35888 + 32 len mem[_35888]])
                                        mem[_35887 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35887 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35887 + 125] = _35890
                                        mem[_35887 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35887 + 72] = 85
                                        mem[64] = _35887 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35890, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35890, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35887 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35887 + 301 len 20]
                                        if address(_30777) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35887 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35887 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35887 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35887 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30773 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30773
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30773, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59593 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59756 = mem[_59593]
                            require mem[_59593] <= 4294967296
                            require mem[_59593] + 32 <= return_data.size
                            require mem[_59593 + mem[_59593]] <= 4294967296 and mem[_59593] + (32 * mem[_59593 + mem[_59593]]) + 32 <= return_data.size
                            mem[_59593 + ceil32(return_data.size)] = mem[_59593 + mem[_59593]]
                            _59977 = mem[_59593 + _59756]
                            mem[_59593 + ceil32(return_data.size) + 32 len floor32(mem[_59593 + _59756])] = mem[_59593 + _59756 + 32 len floor32(mem[_59593 + _59756])]
                            mem[64] = (32 * _59977) + _59593 + ceil32(return_data.size) + 32
                            require 1 < mem[_59593 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30773
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59593 + ceil32(return_data.size) + 64] - _30773
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30787 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35922 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30787)
                                        _35923 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35925 = sha3(mem[_35923 + 32 len mem[_35923]])
                                        mem[_35922 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35922 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35922 + 125] = _35925
                                        mem[_35922 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35922 + 72] = 85
                                        mem[64] = _35922 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35925, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35925, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35922 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35922 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35922 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35922 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35922 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35922 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35929 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35930 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35932 = sha3(mem[_35930 + 32 len mem[_35930]])
                                        mem[_35929 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35929 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35929 + 125] = _35932
                                        mem[_35929 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35929 + 72] = 85
                                        mem[64] = _35929 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35932, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35932, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35929 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35929 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35929 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35929 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35929 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35929 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35936 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30787)
                                        _35937 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35939 = sha3(mem[_35937 + 32 len mem[_35937]])
                                        mem[_35936 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35936 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35936 + 125] = _35939
                                        mem[_35936 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35936 + 72] = 85
                                        mem[64] = _35936 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35939, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35939, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35936 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35936 + 301 len 20]
                                        if address(_30787) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35936 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35936 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35936 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35936 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35943 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35944 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35946 = sha3(mem[_35944 + 32 len mem[_35944]])
                                        mem[_35943 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35943 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35943 + 125] = _35946
                                        mem[_35943 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35943 + 72] = 85
                                        mem[64] = _35943 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35946, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35946, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35943 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35943 + 301 len 20]
                                        if address(_30787) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35943 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35943 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35943 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35943 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30783 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30783
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30783, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59595 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59760 = mem[_59595]
                            require mem[_59595] <= 4294967296
                            require mem[_59595] + 32 <= return_data.size
                            require mem[_59595 + mem[_59595]] <= 4294967296 and mem[_59595] + (32 * mem[_59595 + mem[_59595]]) + 32 <= return_data.size
                            mem[_59595 + ceil32(return_data.size)] = mem[_59595 + mem[_59595]]
                            _59979 = mem[_59595 + _59760]
                            mem[_59595 + ceil32(return_data.size) + 32 len floor32(mem[_59595 + _59760])] = mem[_59595 + _59760 + 32 len floor32(mem[_59595 + _59760])]
                            mem[64] = (32 * _59979) + _59595 + ceil32(return_data.size) + 32
                            require 1 < mem[_59595 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30783
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59595 + ceil32(return_data.size) + 64] - _30783
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30797 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35978 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30797)
                                        _35979 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35981 = sha3(mem[_35979 + 32 len mem[_35979]])
                                        mem[_35978 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35978 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35978 + 125] = _35981
                                        mem[_35978 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35978 + 72] = 85
                                        mem[64] = _35978 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35981, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35981, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35978 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35978 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35978 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35978 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35978 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35978 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35985 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _35986 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35988 = sha3(mem[_35986 + 32 len mem[_35986]])
                                        mem[_35985 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35985 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35985 + 125] = _35988
                                        mem[_35985 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35985 + 72] = 85
                                        mem[64] = _35985 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35988, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35988, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35985 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35985 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35985 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35985 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35985 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35985 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35992 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30797)
                                        _35993 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _35995 = sha3(mem[_35993 + 32 len mem[_35993]])
                                        mem[_35992 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35992 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35992 + 125] = _35995
                                        mem[_35992 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35992 + 72] = 85
                                        mem[64] = _35992 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _35995, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _35995, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35992 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35992 + 301 len 20]
                                        if address(_30797) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35992 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35992 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35992 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35992 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _35999 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36000 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36002 = sha3(mem[_36000 + 32 len mem[_36000]])
                                        mem[_35999 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_35999 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_35999 + 125] = _36002
                                        mem[_35999 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_35999 + 72] = 85
                                        mem[64] = _35999 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36002, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36002, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_35999 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_35999 + 301 len 20]
                                        if address(_30797) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35999 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35999 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35999 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_35999 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30793 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30793
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30793, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59597 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59764 = mem[_59597]
                            require mem[_59597] <= 4294967296
                            require mem[_59597] + 32 <= return_data.size
                            require mem[_59597 + mem[_59597]] <= 4294967296 and mem[_59597] + (32 * mem[_59597 + mem[_59597]]) + 32 <= return_data.size
                            mem[_59597 + ceil32(return_data.size)] = mem[_59597 + mem[_59597]]
                            _59981 = mem[_59597 + _59764]
                            mem[_59597 + ceil32(return_data.size) + 32 len floor32(mem[_59597 + _59764])] = mem[_59597 + _59764 + 32 len floor32(mem[_59597 + _59764])]
                            mem[64] = (32 * _59981) + _59597 + ceil32(return_data.size) + 32
                            require 1 < mem[_59597 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30793
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59597 + ceil32(return_data.size) + 64] - _30793
        else:
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
            mem[224] = address(ext_call.return_data[0])
            mem[244] = address(ext_call.return_data[0])
            mem[192] = 40
            mem[296] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[297] = Mask(160, 96, factoryAddress)
            mem[317] = sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0]))
            mem[349] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
            mem[264] = 85
            if address(sha3(0, factoryAddress, sha3(address(ext_call.return_data[0]), address(ext_call.return_data[0])), 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)) != msg.sender:
                revert with 0, 'Invalid Request'
            if not arg2:
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg2
                if not arg2:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30807 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36034 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30807)
                                    _36035 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36037 = sha3(mem[_36035 + 32 len mem[_36035]])
                                    mem[_36034 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36034 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36034 + 125] = _36037
                                    mem[_36034 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36034 + 72] = 85
                                    mem[64] = _36034 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36037, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36037, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36034 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36034 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36034 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36034 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36034 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36034 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36041 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36042 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36044 = sha3(mem[_36042 + 32 len mem[_36042]])
                                    mem[_36041 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36041 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36041 + 125] = _36044
                                    mem[_36041 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36041 + 72] = 85
                                    mem[64] = _36041 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36044, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36044, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36041 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36041 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36041 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36041 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36041 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36041 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36048 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30807)
                                    _36049 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36051 = sha3(mem[_36049 + 32 len mem[_36049]])
                                    mem[_36048 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36048 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36048 + 125] = _36051
                                    mem[_36048 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36048 + 72] = 85
                                    mem[64] = _36048 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36051, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36051, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36048 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36048 + 301 len 20]
                                    if address(_30807) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36048 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36048 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36048 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36048 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36055 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36056 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36058 = sha3(mem[_36056 + 32 len mem[_36056]])
                                    mem[_36055 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36055 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36055 + 125] = _36058
                                    mem[_36055 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36055 + 72] = 85
                                    mem[64] = _36055 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36058, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36058, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36055 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36055 + 301 len 20]
                                    if address(_30807) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36055 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36055 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36055 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36055 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30803 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30803
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30803, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59599 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59768 = mem[_59599]
                        require mem[_59599] <= 4294967296
                        require mem[_59599] + 32 <= return_data.size
                        require mem[_59599 + mem[_59599]] <= 4294967296 and mem[_59599] + (32 * mem[_59599 + mem[_59599]]) + 32 <= return_data.size
                        mem[_59599 + ceil32(return_data.size)] = mem[_59599 + mem[_59599]]
                        _59983 = mem[_59599 + _59768]
                        mem[_59599 + ceil32(return_data.size) + 32 len floor32(mem[_59599 + _59768])] = mem[_59599 + _59768 + 32 len floor32(mem[_59599 + _59768])]
                        mem[64] = (32 * _59983) + _59599 + ceil32(return_data.size) + 32
                        require 1 < mem[_59599 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30803
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59599 + ceil32(return_data.size) + 64] - _30803
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30817 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36090 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30817)
                                    _36091 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36093 = sha3(mem[_36091 + 32 len mem[_36091]])
                                    mem[_36090 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36090 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36090 + 125] = _36093
                                    mem[_36090 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36090 + 72] = 85
                                    mem[64] = _36090 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36093, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36093, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36090 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36090 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36090 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36090 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36090 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36090 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36097 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36098 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36100 = sha3(mem[_36098 + 32 len mem[_36098]])
                                    mem[_36097 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36097 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36097 + 125] = _36100
                                    mem[_36097 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36097 + 72] = 85
                                    mem[64] = _36097 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36100, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36100, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36097 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36097 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36097 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36097 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36097 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36097 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36104 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30817)
                                    _36105 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36107 = sha3(mem[_36105 + 32 len mem[_36105]])
                                    mem[_36104 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36104 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36104 + 125] = _36107
                                    mem[_36104 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36104 + 72] = 85
                                    mem[64] = _36104 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36107, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36107, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36104 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36104 + 301 len 20]
                                    if address(_30817) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36104 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36104 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36104 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36104 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36111 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36112 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36114 = sha3(mem[_36112 + 32 len mem[_36112]])
                                    mem[_36111 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36111 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36111 + 125] = _36114
                                    mem[_36111 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36111 + 72] = 85
                                    mem[64] = _36111 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36114, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36114, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36111 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36111 + 301 len 20]
                                    if address(_30817) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36111 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36111 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36111 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36111 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30813 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30813
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30813, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59601 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59772 = mem[_59601]
                        require mem[_59601] <= 4294967296
                        require mem[_59601] + 32 <= return_data.size
                        require mem[_59601 + mem[_59601]] <= 4294967296 and mem[_59601] + (32 * mem[_59601 + mem[_59601]]) + 32 <= return_data.size
                        mem[_59601 + ceil32(return_data.size)] = mem[_59601 + mem[_59601]]
                        _59985 = mem[_59601 + _59772]
                        mem[_59601 + ceil32(return_data.size) + 32 len floor32(mem[_59601 + _59772])] = mem[_59601 + _59772 + 32 len floor32(mem[_59601 + _59772])]
                        mem[64] = (32 * _59985) + _59601 + ceil32(return_data.size) + 32
                        require 1 < mem[_59601 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30813
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59601 + ceil32(return_data.size) + 64] - _30813
                else:
                    if not arg2:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30827 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36146 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30827)
                                    _36147 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36149 = sha3(mem[_36147 + 32 len mem[_36147]])
                                    mem[_36146 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36146 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36146 + 125] = _36149
                                    mem[_36146 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36146 + 72] = 85
                                    mem[64] = _36146 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36149, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36149, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36146 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36146 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36146 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36146 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36146 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36146 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36153 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36154 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36156 = sha3(mem[_36154 + 32 len mem[_36154]])
                                    mem[_36153 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36153 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36153 + 125] = _36156
                                    mem[_36153 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36153 + 72] = 85
                                    mem[64] = _36153 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36156, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36156, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36153 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36153 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36153 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36153 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36153 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36153 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36160 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30827)
                                    _36161 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36163 = sha3(mem[_36161 + 32 len mem[_36161]])
                                    mem[_36160 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36160 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36160 + 125] = _36163
                                    mem[_36160 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36160 + 72] = 85
                                    mem[64] = _36160 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36163, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36163, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36160 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36160 + 301 len 20]
                                    if address(_30827) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36160 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36160 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36160 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36160 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36167 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36168 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36170 = sha3(mem[_36168 + 32 len mem[_36168]])
                                    mem[_36167 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36167 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36167 + 125] = _36170
                                    mem[_36167 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36167 + 72] = 85
                                    mem[64] = _36167 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36170, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36170, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36167 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36167 + 301 len 20]
                                    if address(_30827) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36167 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36167 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36167 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36167 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30823 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30823
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30823, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59603 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59776 = mem[_59603]
                        require mem[_59603] <= 4294967296
                        require mem[_59603] + 32 <= return_data.size
                        require mem[_59603 + mem[_59603]] <= 4294967296 and mem[_59603] + (32 * mem[_59603 + mem[_59603]]) + 32 <= return_data.size
                        mem[_59603 + ceil32(return_data.size)] = mem[_59603 + mem[_59603]]
                        _59987 = mem[_59603 + _59776]
                        mem[_59603 + ceil32(return_data.size) + 32 len floor32(mem[_59603 + _59776])] = mem[_59603 + _59776 + 32 len floor32(mem[_59603 + _59776])]
                        mem[64] = (32 * _59987) + _59603 + ceil32(return_data.size) + 32
                        require 1 < mem[_59603 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30823
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59603 + ceil32(return_data.size) + 64] - _30823
                    else:
                        idx = mem[96] - 1
                        while idx:
                            require idx - 1 < mem[96]
                            require idx < mem[96]
                            _30837 = mem[(32 * idx) + 128]
                            if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                            if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                if not mem[(32 * idx - 1) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36202 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30837)
                                    _36203 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36205 = sha3(mem[_36203 + 32 len mem[_36203]])
                                    mem[_36202 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36202 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36202 + 125] = _36205
                                    mem[_36202 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36202 + 72] = 85
                                    mem[64] = _36202 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36205, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36205, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36202 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36202 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36202 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36202 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36202 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36202 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36209 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36210 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36212 = sha3(mem[_36210 + 32 len mem[_36210]])
                                    mem[_36209 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36209 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36209 + 125] = _36212
                                    mem[_36209 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36209 + 72] = 85
                                    mem[64] = _36209 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36212, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36212, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36209 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36209 + 301 len 20]
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36209 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36209 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36209 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36209 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            else:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36216 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                    mem[mem[64] + 52] = address(_30837)
                                    _36217 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36219 = sha3(mem[_36217 + 32 len mem[_36217]])
                                    mem[_36216 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36216 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36216 + 125] = _36219
                                    mem[_36216 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36216 + 72] = 85
                                    mem[64] = _36216 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36219, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36219, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36216 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36216 + 301 len 20]
                                    if address(_30837) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36216 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36216 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36216 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36216 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    _36223 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                    _36224 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _36226 = sha3(mem[_36224 + 32 len mem[_36224]])
                                    mem[_36223 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_36223 + 105] = Mask(160, 96, factoryAddress)
                                    mem[_36223 + 125] = _36226
                                    mem[_36223 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                    mem[_36223 + 72] = 85
                                    mem[64] = _36223 + 189
                                    require ext_code.size(address(sha3(0, factoryAddress, _36226, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                    staticcall address(sha3(0, factoryAddress, _36226, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                            gas gas_remaining wei
                                    mem[_36223 + 189 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require idx < mem[381]
                                    if mem[(32 * idx) + 413] <= 0:
                                        revert with 0, 
                                                    32,
                                                    44,
                                                    0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                    mem[_36223 + 301 len 20]
                                    if address(_30837) == mem[(32 * idx - 1) + 140 len 20]:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36223 + 297 len 24]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36223 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36223 + 297 len 24]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36223 + 297 len 24]
                                        if not mem[(32 * idx) + 413]:
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            require mem[(32 * idx) + 413]
                                            if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                revert with 0, 'ds-math-sub-underflow'
                                            if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                revert with 0, 'ds-math-mul-overflow'
                                            require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                            if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                revert with 0, 'ds-math-add-overflow'
                                            require idx - 1 < mem[381]
                                            mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                            idx = idx - 1
                            continue 
                        require 0 < mem[381]
                        _30833 = mem[413]
                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = arg2
                        mem[mem[64] + 36] = _30833
                        mem[mem[64] + 100] = msg.sender
                        mem[mem[64] + 132] = 240 * 24 * 3600
                        mem[mem[64] + 68] = 160
                        mem[mem[64] + 164] = mem[96]
                        mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                        require ext_code.size(sushiSwapRouterAddress)
                        call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                             gas gas_remaining wei
                            args arg2, _30833, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _59605 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _59780 = mem[_59605]
                        require mem[_59605] <= 4294967296
                        require mem[_59605] + 32 <= return_data.size
                        require mem[_59605 + mem[_59605]] <= 4294967296 and mem[_59605] + (32 * mem[_59605 + mem[_59605]]) + 32 <= return_data.size
                        mem[_59605 + ceil32(return_data.size)] = mem[_59605 + mem[_59605]]
                        _59989 = mem[_59605 + _59780]
                        mem[_59605 + ceil32(return_data.size) + 32 len floor32(mem[_59605 + _59780])] = mem[_59605 + _59780 + 32 len floor32(mem[_59605 + _59780])]
                        mem[64] = (32 * _59989) + _59605 + ceil32(return_data.size) + 32
                        require 1 < mem[_59605 + ceil32(return_data.size)]
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, _30833
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0xa9059cbb with:
                             gas gas_remaining wei
                            args tx.origin, mem[_59605 + ceil32(return_data.size) + 64] - _30833
            else:
                require not arg3
                mem[128] = address(ext_call.return_data[0])
                mem[160] = address(ext_call.return_data[0])
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).approve(address rg1, uint256 rg2) with:
                     gas gas_remaining wei
                    args sushiSwapRouterAddress, arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[381] = 2
                mem[64] = 477
                mem[413 len 64] = call.data[calldata.size len 64]
                mem[445] = arg2
                if not arg2:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30847 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36258 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30847)
                                        _36259 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36261 = sha3(mem[_36259 + 32 len mem[_36259]])
                                        mem[_36258 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36258 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36258 + 125] = _36261
                                        mem[_36258 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36258 + 72] = 85
                                        mem[64] = _36258 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36261, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36261, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36258 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36258 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36258 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36258 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36258 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36258 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36265 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36266 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36268 = sha3(mem[_36266 + 32 len mem[_36266]])
                                        mem[_36265 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36265 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36265 + 125] = _36268
                                        mem[_36265 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36265 + 72] = 85
                                        mem[64] = _36265 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36268, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36268, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36265 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36265 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36265 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36265 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36265 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36265 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36272 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30847)
                                        _36273 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36275 = sha3(mem[_36273 + 32 len mem[_36273]])
                                        mem[_36272 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36272 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36272 + 125] = _36275
                                        mem[_36272 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36272 + 72] = 85
                                        mem[64] = _36272 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36275, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36275, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36272 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36272 + 301 len 20]
                                        if address(_30847) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36272 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36272 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36272 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36272 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36279 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36280 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36282 = sha3(mem[_36280 + 32 len mem[_36280]])
                                        mem[_36279 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36279 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36279 + 125] = _36282
                                        mem[_36279 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36279 + 72] = 85
                                        mem[64] = _36279 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36282, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36282, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36279 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36279 + 301 len 20]
                                        if address(_30847) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36279 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36279 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36279 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36279 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30843 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30843
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30843, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59607 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59784 = mem[_59607]
                            require mem[_59607] <= 4294967296
                            require mem[_59607] + 32 <= return_data.size
                            require mem[_59607 + mem[_59607]] <= 4294967296 and mem[_59607] + (32 * mem[_59607 + mem[_59607]]) + 32 <= return_data.size
                            mem[_59607 + ceil32(return_data.size)] = mem[_59607 + mem[_59607]]
                            _59991 = mem[_59607 + _59784]
                            mem[_59607 + ceil32(return_data.size) + 32 len floor32(mem[_59607 + _59784])] = mem[_59607 + _59784 + 32 len floor32(mem[_59607 + _59784])]
                            mem[64] = (32 * _59991) + _59607 + ceil32(return_data.size) + 32
                            require 1 < mem[_59607 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30843
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59607 + ceil32(return_data.size) + 64] - _30843
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30857 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36314 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30857)
                                        _36315 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36317 = sha3(mem[_36315 + 32 len mem[_36315]])
                                        mem[_36314 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36314 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36314 + 125] = _36317
                                        mem[_36314 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36314 + 72] = 85
                                        mem[64] = _36314 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36317, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36317, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36314 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36314 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36314 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36314 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36314 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36314 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36321 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36322 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36324 = sha3(mem[_36322 + 32 len mem[_36322]])
                                        mem[_36321 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36321 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36321 + 125] = _36324
                                        mem[_36321 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36321 + 72] = 85
                                        mem[64] = _36321 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36324, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36324, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36321 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36321 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36321 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36321 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36321 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36321 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36328 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30857)
                                        _36329 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36331 = sha3(mem[_36329 + 32 len mem[_36329]])
                                        mem[_36328 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36328 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36328 + 125] = _36331
                                        mem[_36328 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36328 + 72] = 85
                                        mem[64] = _36328 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36331, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36331, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36328 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36328 + 301 len 20]
                                        if address(_30857) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36328 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36328 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36328 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36328 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36335 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36336 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36338 = sha3(mem[_36336 + 32 len mem[_36336]])
                                        mem[_36335 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36335 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36335 + 125] = _36338
                                        mem[_36335 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36335 + 72] = 85
                                        mem[64] = _36335 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36338, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36338, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36335 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36335 + 301 len 20]
                                        if address(_30857) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36335 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36335 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36335 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36335 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30853 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30853
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30853, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59609 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59788 = mem[_59609]
                            require mem[_59609] <= 4294967296
                            require mem[_59609] + 32 <= return_data.size
                            require mem[_59609 + mem[_59609]] <= 4294967296 and mem[_59609] + (32 * mem[_59609 + mem[_59609]]) + 32 <= return_data.size
                            mem[_59609 + ceil32(return_data.size)] = mem[_59609 + mem[_59609]]
                            _59993 = mem[_59609 + _59788]
                            mem[_59609 + ceil32(return_data.size) + 32 len floor32(mem[_59609 + _59788])] = mem[_59609 + _59788 + 32 len floor32(mem[_59609 + _59788])]
                            mem[64] = (32 * _59993) + _59609 + ceil32(return_data.size) + 32
                            require 1 < mem[_59609 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30853
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59609 + ceil32(return_data.size) + 64] - _30853
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30867 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36370 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30867)
                                        _36371 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36373 = sha3(mem[_36371 + 32 len mem[_36371]])
                                        mem[_36370 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36370 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36370 + 125] = _36373
                                        mem[_36370 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36370 + 72] = 85
                                        mem[64] = _36370 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36373, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36373, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36370 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36370 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36370 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36370 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36370 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36370 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36377 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36378 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36380 = sha3(mem[_36378 + 32 len mem[_36378]])
                                        mem[_36377 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36377 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36377 + 125] = _36380
                                        mem[_36377 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36377 + 72] = 85
                                        mem[64] = _36377 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36380, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36380, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36377 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36377 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36377 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36377 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36377 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36377 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36384 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30867)
                                        _36385 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36387 = sha3(mem[_36385 + 32 len mem[_36385]])
                                        mem[_36384 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36384 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36384 + 125] = _36387
                                        mem[_36384 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36384 + 72] = 85
                                        mem[64] = _36384 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36387, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36387, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36384 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36384 + 301 len 20]
                                        if address(_30867) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36384 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36384 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36384 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36384 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36391 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36392 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36394 = sha3(mem[_36392 + 32 len mem[_36392]])
                                        mem[_36391 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36391 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36391 + 125] = _36394
                                        mem[_36391 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36391 + 72] = 85
                                        mem[64] = _36391 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36394, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36394, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36391 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36391 + 301 len 20]
                                        if address(_30867) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36391 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36391 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36391 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36391 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30863 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30863
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30863, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59611 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59792 = mem[_59611]
                            require mem[_59611] <= 4294967296
                            require mem[_59611] + 32 <= return_data.size
                            require mem[_59611 + mem[_59611]] <= 4294967296 and mem[_59611] + (32 * mem[_59611 + mem[_59611]]) + 32 <= return_data.size
                            mem[_59611 + ceil32(return_data.size)] = mem[_59611 + mem[_59611]]
                            _59995 = mem[_59611 + _59792]
                            mem[_59611 + ceil32(return_data.size) + 32 len floor32(mem[_59611 + _59792])] = mem[_59611 + _59792 + 32 len floor32(mem[_59611 + _59792])]
                            mem[64] = (32 * _59995) + _59611 + ceil32(return_data.size) + 32
                            require 1 < mem[_59611 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30863
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59611 + ceil32(return_data.size) + 64] - _30863
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30877 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36426 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30877)
                                        _36427 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36429 = sha3(mem[_36427 + 32 len mem[_36427]])
                                        mem[_36426 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36426 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36426 + 125] = _36429
                                        mem[_36426 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36426 + 72] = 85
                                        mem[64] = _36426 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36429, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36429, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36426 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36426 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36426 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36426 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36426 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36426 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36433 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36434 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36436 = sha3(mem[_36434 + 32 len mem[_36434]])
                                        mem[_36433 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36433 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36433 + 125] = _36436
                                        mem[_36433 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36433 + 72] = 85
                                        mem[64] = _36433 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36436, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36436, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36433 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36433 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36433 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36433 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36433 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36433 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36440 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30877)
                                        _36441 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36443 = sha3(mem[_36441 + 32 len mem[_36441]])
                                        mem[_36440 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36440 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36440 + 125] = _36443
                                        mem[_36440 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36440 + 72] = 85
                                        mem[64] = _36440 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36443, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36443, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36440 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36440 + 301 len 20]
                                        if address(_30877) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36440 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36440 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36440 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36440 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36447 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36448 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36450 = sha3(mem[_36448 + 32 len mem[_36448]])
                                        mem[_36447 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36447 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36447 + 125] = _36450
                                        mem[_36447 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36447 + 72] = 85
                                        mem[64] = _36447 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36450, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36450, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36447 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36447 + 301 len 20]
                                        if address(_30877) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36447 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36447 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36447 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36447 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30873 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30873
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30873, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59613 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59796 = mem[_59613]
                            require mem[_59613] <= 4294967296
                            require mem[_59613] + 32 <= return_data.size
                            require mem[_59613 + mem[_59613]] <= 4294967296 and mem[_59613] + (32 * mem[_59613 + mem[_59613]]) + 32 <= return_data.size
                            mem[_59613 + ceil32(return_data.size)] = mem[_59613 + mem[_59613]]
                            _59997 = mem[_59613 + _59796]
                            mem[_59613 + ceil32(return_data.size) + 32 len floor32(mem[_59613 + _59796])] = mem[_59613 + _59796 + 32 len floor32(mem[_59613 + _59796])]
                            mem[64] = (32 * _59997) + _59613 + ceil32(return_data.size) + 32
                            require 1 < mem[_59613 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30873
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59613 + ceil32(return_data.size) + 64] - _30873
                else:
                    if not arg2:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30887 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36482 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30887)
                                        _36483 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36485 = sha3(mem[_36483 + 32 len mem[_36483]])
                                        mem[_36482 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36482 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36482 + 125] = _36485
                                        mem[_36482 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36482 + 72] = 85
                                        mem[64] = _36482 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36485, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36485, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36482 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36482 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36482 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36482 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36482 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36482 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36489 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36490 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36492 = sha3(mem[_36490 + 32 len mem[_36490]])
                                        mem[_36489 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36489 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36489 + 125] = _36492
                                        mem[_36489 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36489 + 72] = 85
                                        mem[64] = _36489 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36492, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36492, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36489 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36489 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36489 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36489 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36489 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36489 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36496 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30887)
                                        _36497 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36499 = sha3(mem[_36497 + 32 len mem[_36497]])
                                        mem[_36496 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36496 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36496 + 125] = _36499
                                        mem[_36496 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36496 + 72] = 85
                                        mem[64] = _36496 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36499, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36499, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36496 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36496 + 301 len 20]
                                        if address(_30887) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36496 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36496 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36496 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36496 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36503 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36504 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36506 = sha3(mem[_36504 + 32 len mem[_36504]])
                                        mem[_36503 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36503 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36503 + 125] = _36506
                                        mem[_36503 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36503 + 72] = 85
                                        mem[64] = _36503 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36506, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36506, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36503 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36503 + 301 len 20]
                                        if address(_30887) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36503 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36503 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36503 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36503 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30883 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30883
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30883, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59615 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59800 = mem[_59615]
                            require mem[_59615] <= 4294967296
                            require mem[_59615] + 32 <= return_data.size
                            require mem[_59615 + mem[_59615]] <= 4294967296 and mem[_59615] + (32 * mem[_59615 + mem[_59615]]) + 32 <= return_data.size
                            mem[_59615 + ceil32(return_data.size)] = mem[_59615 + mem[_59615]]
                            _59999 = mem[_59615 + _59800]
                            mem[_59615 + ceil32(return_data.size) + 32 len floor32(mem[_59615 + _59800])] = mem[_59615 + _59800 + 32 len floor32(mem[_59615 + _59800])]
                            mem[64] = (32 * _59999) + _59615 + ceil32(return_data.size) + 32
                            require 1 < mem[_59615 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30883
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59615 + ceil32(return_data.size) + 64] - _30883
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30897 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36538 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30897)
                                        _36539 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36541 = sha3(mem[_36539 + 32 len mem[_36539]])
                                        mem[_36538 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36538 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36538 + 125] = _36541
                                        mem[_36538 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36538 + 72] = 85
                                        mem[64] = _36538 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36541, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36541, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36538 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36538 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36538 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36538 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36538 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36538 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36545 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36546 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36548 = sha3(mem[_36546 + 32 len mem[_36546]])
                                        mem[_36545 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36545 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36545 + 125] = _36548
                                        mem[_36545 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36545 + 72] = 85
                                        mem[64] = _36545 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36548, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36548, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36545 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36545 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36545 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36545 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36545 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36545 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36552 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30897)
                                        _36553 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36555 = sha3(mem[_36553 + 32 len mem[_36553]])
                                        mem[_36552 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36552 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36552 + 125] = _36555
                                        mem[_36552 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36552 + 72] = 85
                                        mem[64] = _36552 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36555, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36555, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36552 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36552 + 301 len 20]
                                        if address(_30897) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36552 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36552 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36552 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36552 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36559 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36560 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36562 = sha3(mem[_36560 + 32 len mem[_36560]])
                                        mem[_36559 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36559 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36559 + 125] = _36562
                                        mem[_36559 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36559 + 72] = 85
                                        mem[64] = _36559 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36562, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36562, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36559 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36559 + 301 len 20]
                                        if address(_30897) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36559 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36559 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36559 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36559 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30893 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30893
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30893, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59617 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59804 = mem[_59617]
                            require mem[_59617] <= 4294967296
                            require mem[_59617] + 32 <= return_data.size
                            require mem[_59617 + mem[_59617]] <= 4294967296 and mem[_59617] + (32 * mem[_59617 + mem[_59617]]) + 32 <= return_data.size
                            mem[_59617 + ceil32(return_data.size)] = mem[_59617 + mem[_59617]]
                            _60001 = mem[_59617 + _59804]
                            mem[_59617 + ceil32(return_data.size) + 32 len floor32(mem[_59617 + _59804])] = mem[_59617 + _59804 + 32 len floor32(mem[_59617 + _59804])]
                            mem[64] = (32 * _60001) + _59617 + ceil32(return_data.size) + 32
                            require 1 < mem[_59617 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30893
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59617 + ceil32(return_data.size) + 64] - _30893
                    else:
                        if not arg2:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30907 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36594 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30907)
                                        _36595 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36597 = sha3(mem[_36595 + 32 len mem[_36595]])
                                        mem[_36594 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36594 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36594 + 125] = _36597
                                        mem[_36594 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36594 + 72] = 85
                                        mem[64] = _36594 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36597, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36597, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36594 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36594 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36594 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36594 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36594 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36594 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36601 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36602 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36604 = sha3(mem[_36602 + 32 len mem[_36602]])
                                        mem[_36601 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36601 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36601 + 125] = _36604
                                        mem[_36601 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36601 + 72] = 85
                                        mem[64] = _36601 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36604, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36604, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36601 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36601 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36601 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36601 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36601 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36601 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36608 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30907)
                                        _36609 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36611 = sha3(mem[_36609 + 32 len mem[_36609]])
                                        mem[_36608 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36608 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36608 + 125] = _36611
                                        mem[_36608 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36608 + 72] = 85
                                        mem[64] = _36608 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36611, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36611, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36608 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36608 + 301 len 20]
                                        if address(_30907) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36608 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36608 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36608 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36608 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36615 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36616 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36618 = sha3(mem[_36616 + 32 len mem[_36616]])
                                        mem[_36615 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36615 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36615 + 125] = _36618
                                        mem[_36615 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36615 + 72] = 85
                                        mem[64] = _36615 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36618, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36618, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36615 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36615 + 301 len 20]
                                        if address(_30907) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36615 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36615 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36615 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36615 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30903 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30903
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30903, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59619 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59808 = mem[_59619]
                            require mem[_59619] <= 4294967296
                            require mem[_59619] + 32 <= return_data.size
                            require mem[_59619 + mem[_59619]] <= 4294967296 and mem[_59619] + (32 * mem[_59619 + mem[_59619]]) + 32 <= return_data.size
                            mem[_59619 + ceil32(return_data.size)] = mem[_59619 + mem[_59619]]
                            _60003 = mem[_59619 + _59808]
                            mem[_59619 + ceil32(return_data.size) + 32 len floor32(mem[_59619 + _59808])] = mem[_59619 + _59808 + 32 len floor32(mem[_59619 + _59808])]
                            mem[64] = (32 * _60003) + _59619 + ceil32(return_data.size) + 32
                            require 1 < mem[_59619 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30903
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59619 + ceil32(return_data.size) + 64] - _30903
                        else:
                            idx = mem[96] - 1
                            while idx:
                                require idx - 1 < mem[96]
                                require idx < mem[96]
                                _30917 = mem[(32 * idx) + 128]
                                if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                    if not mem[(32 * idx - 1) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36650 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30917)
                                        _36651 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36653 = sha3(mem[_36651 + 32 len mem[_36651]])
                                        mem[_36650 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36650 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36650 + 125] = _36653
                                        mem[_36650 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36650 + 72] = 85
                                        mem[64] = _36650 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36653, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36653, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36650 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36650 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36650 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36650 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36650 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36650 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36657 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36658 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36660 = sha3(mem[_36658 + 32 len mem[_36658]])
                                        mem[_36657 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36657 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36657 + 125] = _36660
                                        mem[_36657 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36657 + 72] = 85
                                        mem[64] = _36657 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36660, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36660, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36657 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36657 + 301 len 20]
                                        if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36657 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36657 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36657 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36657 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                else:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                    if mem[(32 * idx - 1) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 32, 37, 0x54556e697377617056324c6962726172793a204944454e544943414c5f4144445245535345, mem[mem[64] + 105 len 27]
                                    if mem[(32 * idx - 1) + 140 len 20] < mem[(32 * idx) + 140 len 20]:
                                        if not mem[(32 * idx - 1) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36664 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx - 1) + 128])
                                        mem[mem[64] + 52] = address(_30917)
                                        _36665 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36667 = sha3(mem[_36665 + 32 len mem[_36665]])
                                        mem[_36664 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36664 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36664 + 125] = _36667
                                        mem[_36664 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36664 + 72] = 85
                                        mem[64] = _36664 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36667, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36667, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36664 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36664 + 301 len 20]
                                        if address(_30917) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36664 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36664 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36664 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36664 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                    else:
                                        if not mem[(32 * idx) + 140 len 20]:
                                            revert with 0, 'UniswapV2Library: ZERO_ADDRESS'
                                        _36671 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                        mem[mem[64] + 52] = address(mem[(32 * idx - 1) + 128])
                                        _36672 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _36674 = sha3(mem[_36672 + 32 len mem[_36672]])
                                        mem[_36671 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_36671 + 105] = Mask(160, 96, factoryAddress)
                                        mem[_36671 + 125] = _36674
                                        mem[_36671 + 157] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f
                                        mem[_36671 + 72] = 85
                                        mem[64] = _36671 + 189
                                        require ext_code.size(address(sha3(0, factoryAddress, _36674, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)))
                                        staticcall address(sha3(0, factoryAddress, _36674, 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f)).getReserves() with:
                                                gas gas_remaining wei
                                        mem[_36671 + 189 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require idx < mem[381]
                                        if mem[(32 * idx) + 413] <= 0:
                                            revert with 0, 
                                                        32,
                                                        44,
                                                        0xfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e,
                                                        mem[_36671 + 301 len 20]
                                        if address(_30917) == mem[(32 * idx - 1) + 140 len 20]:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36671 + 297 len 24]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36671 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[18 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[50 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[50 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[18 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[50 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36671 + 297 len 24]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 40, 0x53556e697377617056324c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[_36671 + 297 len 24]
                                            if not mem[(32 * idx) + 413]:
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (0 / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                            else:
                                                require mem[(32 * idx) + 413]
                                                if ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / mem[(32 * idx) + 413] != ext_call.return_data[50 len 14]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / 1000 != ext_call.return_data[50 len 14] * mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                if ext_call.return_data[18 len 14] - mem[(32 * idx) + 413] > ext_call.return_data[18 len 14]:
                                                    revert with 0, 'ds-math-sub-underflow'
                                                if (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]) / 997 != ext_call.return_data[18 len 14] - mem[(32 * idx) + 413]:
                                                    revert with 0, 'ds-math-mul-overflow'
                                                require (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])
                                                if (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1 < 1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413]):
                                                    revert with 0, 'ds-math-add-overflow'
                                                require idx - 1 < mem[381]
                                                mem[(32 * idx - 1) + 413] = (1000 * ext_call.return_data[50 len 14] * mem[(32 * idx) + 413] / (997 * ext_call.return_data[18 len 14]) - (997 * mem[(32 * idx) + 413])) + 1
                                idx = idx - 1
                                continue 
                            require 0 < mem[381]
                            _30913 = mem[413]
                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = arg2
                            mem[mem[64] + 36] = _30913
                            mem[mem[64] + 100] = msg.sender
                            mem[mem[64] + 132] = 240 * 24 * 3600
                            mem[mem[64] + 68] = 160
                            mem[mem[64] + 164] = mem[96]
                            mem[mem[64] + 196 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
                            require ext_code.size(sushiSwapRouterAddress)
                            call sushiSwapRouterAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                                 gas gas_remaining wei
                                args arg2, _30913, 160, msg.sender, 240 * 24 * 3600, mem[mem[64] + 164 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _59621 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _59812 = mem[_59621]
                            require mem[_59621] <= 4294967296
                            require mem[_59621] + 32 <= return_data.size
                            require mem[_59621 + mem[_59621]] <= 4294967296 and mem[_59621] + (32 * mem[_59621 + mem[_59621]]) + 32 <= return_data.size
                            mem[_59621 + ceil32(return_data.size)] = mem[_59621 + mem[_59621]]
                            _60005 = mem[_59621 + _59812]
                            mem[_59621 + ceil32(return_data.size) + 32 len floor32(mem[_59621 + _59812])] = mem[_59621 + _59812 + 32 len floor32(mem[_59621 + _59812])]
                            mem[64] = (32 * _60005) + _59621 + ceil32(return_data.size) + 32
                            require 1 < mem[_59621 + ceil32(return_data.size)]
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args msg.sender, _30913
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0xa9059cbb with:
                                 gas gas_remaining wei
                                args tx.origin, mem[_59621 + ceil32(return_data.size) + 64] - _30913
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}



}
