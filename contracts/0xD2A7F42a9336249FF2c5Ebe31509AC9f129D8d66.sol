contract main {




// =====================  Runtime code  =====================


#
#  - sub_29df86c1(?)
#  - sub_4854424e(?)
#  - initialize()
#  - claimById(uint256 arg1)
#
mapping of uint256 balanceOf;
mapping of uint8 stor102;
array of struct stor103;
address owner;
uint256 stor201;
uint8 isPresaleActive;
uint8 sub_a82f0131; offset 8
uint8 sub_11a93db1; offset 16
address managerAddress; offset 24
uint256 stor251; offset 16
uint256 stor251; offset 8
address pairAddress;
address sub_85adc8b0Address;
address swapAddress;
uint256 stor255;
uint256 stor256;
uint256 stor257;
uint256 stor258;
uint256 sub_f468fba8;
array of struct stor260;
mapping of struct stor261;
array of uint256 sub_627dd5ca;
mapping of uint8 stor263;
array of struct stor34396799265723567300338619826663514857069533239785953290296875790754157623998;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157623999;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624000;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624001;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624002;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624003;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624004;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624005;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624006;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624007;

function balanceOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
    return balanceOf[arg2][address(arg1)]
}

function sub_06551ca5(?) {
    return bool(isPresaleActive)
}

function sub_11a93db1(?) {
    return bool(sub_11a93db1)
}

function manager() {
    return managerAddress
}

function isPresaleActive() {
    return bool(isPresaleActive)
}

function sub_627dd5ca(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 < sub_627dd5ca[arg1]
    return sub_627dd5ca[arg1][arg2]
}

function swapAddress() {
    return swapAddress
}

function sub_85adc8b0(?) {
    return sub_85adc8b0Address
}

function owner() {
    return owner
}

function sub_a82f0131(?) {
    return bool(sub_a82f0131)
}

function pairAddress() {
    return pairAddress
}

function isApprovedForAll(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor102[address(arg1)][address(arg2)])
}

function sub_f468fba8(?) {
    return sub_f468fba8
}

function blacklist(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor263[arg1])
}

function _fallback() payable {
    revert
}

function sub_83ec06b0(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor257 = arg1
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_7fd1dc67(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_f468fba8 = arg1
}

function setManager(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    managerAddress = arg1
}

function setPresaleActive(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    isPresaleActive = uint8(arg1)
}

function sub_3a687869(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor251.field_8) = Mask(248, 0, bool(arg1))
}

function sub_af5119b6(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(240, 0, stor251.field_16) = Mask(240, 0, bool(arg1))
}

function setBlacklisted(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor263[address(arg1)] = uint8(arg2)
}

function swapTokensForAVAX(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(swapAddress)
    call swapAddress.0xef28fd9c with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function withdraw() {
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if managerAddress != msg.sender:
        revert with 0, 'only manager can call withdraw'
    call managerAddress with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'Failed to send AVAX'
    stor201 = 1
}

function setApprovalForAll(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if msg.sender == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: setting approval status for self'
    stor102[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function sub_15889446(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if address(arg1):
        pairAddress = address(arg1)
    if address(arg2):
        sub_85adc8b0Address = address(arg2)
    if address(arg3):
        swapAddress = address(arg3)
}

function supportsInterface(bytes4 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if 0xd9b67a2600000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    if 0xe89341c00000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function sub_3ca21b7c(?) {
    require calldata.size - 4 >= 32
    if arg1 >= stor260.length:
        revert with 0, 50
    if not stor260[arg1].field_768:
        revert with 0, 18
    if not 10^9 / stor260[arg1].field_768 % 10:
        return (10^9 / stor260[arg1].field_768 / 10)
    if 10 > !(10^9 / stor260[arg1].field_768):
        revert with 0, 17
    if (10^9 / stor260[arg1].field_768) + 10 < 10^9 / stor260[arg1].field_768 % 10:
        revert with 0, 17
    return ((10^9 / stor260[arg1].field_768) + -(10^9 / stor260[arg1].field_768 % 10) + 10 / 10)
}

function sub_4d593bc5(?) {
    require calldata.size - 4 >= 32
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor201 = 1
}

function sub_ee98a528(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if stor261[stor262[address(arg1)][idx]].field_256 != arg2:
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    return s
}

function sub_221b1ce8(?) {
    require calldata.size - 4 >= 160
    if arg3 <= arg5:
        if arg4 and arg1 > -1 / arg4:
            revert with 0, 17
        return (arg4 * arg1)
    if arg3 < arg5:
        revert with 0, 17
    if arg3 < arg4:
        revert with 0, 17
    if arg3 - arg4 >= arg5:
        if arg2 and arg4 > -1 / arg2:
            revert with 0, 17
        return (arg2 * arg4)
    if arg3 < arg4:
        revert with 0, 17
    if arg5 < arg3 - arg4:
        revert with 0, 17
    if arg5 - arg3 + arg4 and arg1 > -1 / arg5 - arg3 + arg4:
        revert with 0, 17
    if arg2 and arg3 - arg5 > -1 / arg2:
        revert with 0, 17
    if (arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) > !((arg3 * arg2) - (arg5 * arg2)):
        revert with 0, 17
    return ((arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) + (arg3 * arg2) - (arg5 * arg2))
}

function sub_185aa308(?) {
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        return (10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14])
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    return (10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14])
}

function sub_32295c84(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    idx = 0
    s = 0
    while idx < stor260.length:
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 101)
        if balanceOf[idx][address(arg1)] <= 0:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            continue 
        if idx >= stor260.length:
            revert with 0, 50
        if stor260[idx].field_1792 and stor260[idx].field_256 > -1 / stor260[idx].field_1792:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 101)
        if balanceOf[idx][address(arg1)] and stor260[idx].field_1792 * stor260[idx].field_256 / stor255 > -1 / balanceOf[idx][address(arg1)]:
            revert with 0, 17
        if s > !(balanceOf[idx][address(arg1)] * stor260[idx].field_1792 * stor260[idx].field_256 / stor255):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + (balanceOf[idx][address(arg1)] * stor260[idx].field_1792 * stor260[idx].field_256 / stor255)
        continue 
    return s
}

function safeBatchTransferFrom(address arg1, address arg2, uint256[] arg3, uint256[] arg4, bytes arg5) {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    if arg3.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg3.length) + 97 < 96 or ceil32(32 * arg3.length) + 97 > test266151307():
        revert with 0, 65
    require calldata.size >= arg3 + (32 * arg3.length) + 36
    idx = 0
    s = arg3 + 36
    t = 128
    while idx < arg3.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    if arg4.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg4.length) + 98 < 97 or ceil32(32 * arg3.length) + ceil32(32 * arg4.length) + 98 > test266151307():
        revert with 0, 65
    require calldata.size >= arg4 + (32 * arg4.length) + 36
    idx = 0
    s = arg4 + 36
    t = ceil32(32 * arg3.length) + 129
    while idx < arg4.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg5 <= test266151307()
    require arg5 + 35 < calldata.size
    if arg5.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg5.length)) + 99 < 98 or ceil32(32 * arg3.length) + ceil32(32 * arg4.length) + ceil32(ceil32(arg5.length)) + 99 > test266151307():
        revert with 0, 65
    require arg5 + arg5.length + 36 <= calldata.size
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
}

function sub_533f0e74(?) {
    require calldata.size - 4 >= 352
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg2.length)) + 97 < 96 or ceil32(ceil32(arg2.length)) + 97 > test266151307():
        revert with 0, 65
    require arg2 + arg2.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 >= stor260.length:
        revert with 0, 50
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if arg2.length:
            stor260[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor260[arg1].field_0 = 0
            idx = 0
            while (uint255(stor260[arg1].field_0) * 0.5) + 31 / 32 > idx:
                stor260[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if arg2.length:
            stor260[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor260[arg1].field_0 = 0
            idx = 0
            while stor260[arg1].field_1 % 128 + 31 / 32 > idx:
                stor260[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    stor260[arg1].field_256 = arg3
    stor260[arg1].field_512 = arg4
    stor260[arg1].field_768 = arg5
    stor260[arg1].field_1024 = arg6
    stor260[arg1].field_1280 = arg7
    stor260[arg1].field_1536 = arg8
    stor260[arg1].field_1792 = arg9
    stor260[arg1].field_2048 = arg10
    stor260[arg1].field_2304 = arg11
}

function sub_8955a0e6(?) {
    require calldata.size - 4 >= 32
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if arg1 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / arg1:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        return (arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if arg1 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / arg1:
        revert with 0, 17
    if arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
        revert with 0, 17
    return (arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_48980647(?) {
    require calldata.size - 4 >= 320
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor260.length++
    if bool(stor4C0B[stor260.length].field_0):
        if bool(stor4C0B[stor260.length].field_0) == uint255(stor4C0B[stor260.length].field_0) * 0.5 < 32:
            revert with 0, 34
        if arg1.length:
            stor[sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)][] = Array(len=arg1.length, data=arg1[all])
        else:
            stor4C0B[stor260.length].field_0 = 0
            idx = 0
            while (uint255(stor4C0B[stor260.length].field_0) * 0.5) + 31 / 32 > idx:
                stor[idx + sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)] = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor4C0B[stor260.length].field_0) == stor4C0B[stor260.length].field_1 % 128 < 32:
            revert with 0, 34
        if arg1.length:
            stor[sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)][] = Array(len=arg1.length, data=arg1[all])
        else:
            stor4C0B[stor260.length].field_0 = 0
            idx = 0
            while stor4C0B[stor260.length].field_1 % 128 + 31 / 32 > idx:
                stor[idx + sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)] = 0
                idx = idx + 1
                continue 
    stor4C0B[stor260.length] = arg2
    stor4C0B[stor260.length] = arg3
    stor4C0B[stor260.length] = arg4
    stor4C0B[stor260.length] = arg5
    stor4C0B[stor260.length] = arg6
    stor4C0B[stor260.length] = arg7
    stor4C0B[stor260.length] = arg8
    stor4C0B[stor260.length] = arg9
    stor4C0B[stor260.length] = arg10
}

function balanceOfBatch(address[] arg1, uint256[] arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg1.length) + 97 < 96 or ceil32(32 * arg1.length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg1.length
    require calldata.size >= arg1 + (32 * arg1.length) + 36
    s = arg1 + 36
    t = 128
    idx = 0
    while idx < arg1.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg2.length) + 98 < 97 or ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * arg1.length) + 97] = arg2.length
    require calldata.size >= arg2 + (32 * arg2.length) + 36
    idx = 0
    s = arg2 + 36
    t = ceil32(32 * arg1.length) + 129
    while idx < arg2.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if arg1.length != arg2.length:
        revert with 0, 'ERC1155: accounts and ids length mismatch'
    if arg1.length > test266151307():
        revert with 0, 65
    mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 98] = arg1.length
    if arg1.length:
        mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130 len 32 * arg1.length] = call.data[calldata.size len 32 * arg1.length]
    idx = 0
    while idx < arg1.length:
        if idx >= arg1.length:
            revert with 0, 50
        if idx >= arg2.length:
            revert with 0, 50
        if not mem[(32 * idx) + 140 len 20]:
            revert with 0, 'ERC1155: balance query for the zero address'
        mem[0] = mem[(32 * idx) + 140 len 20]
        mem[32] = sha3(mem[(32 * idx) + ceil32(32 * arg1.length) + 129], 101)
        if idx >= arg1.length:
            revert with 0, 50
        mem[(32 * idx) + ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130] = balanceOf[mem[(32 * idx) + ceil32(32 * arg1.length) + 129]][address(mem[(32 * idx) + 128])]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return Array(len=arg1.length, data=mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130 len 32 * arg1.length])
}

function sub_9600ac5b(?) {
    require calldata.size - 4 >= 32
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if bool(stor261[arg1].field_1536):
            if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor261[arg1].field_1536):
                if 31 >= uint255(stor261[arg1].field_1536) * 0.5:
                    mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[128] = stor261[arg1][6].field_0
                    idx = 128
                    s = 0
                    while (uint255(stor261[arg1].field_1536) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor261[arg1].field_1537 % 128:
                if 31 >= stor261[arg1].field_1537 % 128:
                    mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[128] = stor261[arg1][6].field_0
                    idx = 128
                    s = 0
                    while stor261[arg1].field_1537 % 128 + 96 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return address(stor261[arg1].field_0), 
               stor261[arg1].field_256,
               stor261[arg1].field_512,
               stor261[arg1].field_768,
               stor261[arg1].field_1024,
               stor261[arg1].field_1280,
               Array(len=2 * Mask(256, -1, stor261[arg1].field_1536), data=mem[128 len ceil32(uint255(stor261[arg1].field_1536) * 0.5)])
    if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor261[arg1].field_1536):
            if 31 >= uint255(stor261[arg1].field_1536) * 0.5:
                mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[128] = stor261[arg1][6].field_0
                idx = 128
                s = 0
                while (uint255(stor261[arg1].field_1536) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor261[arg1].field_1537 % 128:
            if 31 >= stor261[arg1].field_1537 % 128:
                mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[128] = stor261[arg1][6].field_0
                idx = 128
                s = 0
                while stor261[arg1].field_1537 % 128 + 96 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return address(stor261[arg1].field_0), 
           stor261[arg1].field_256,
           stor261[arg1].field_512,
           stor261[arg1].field_768,
           stor261[arg1].field_1024,
           stor261[arg1].field_1280,
           Array(len=stor261[arg1].field_1536 % 128, data=mem[128 len ceil32(stor261[arg1].field_1537 % 128)])
}

function sub_80c0f19b(?) {
    require calldata.size - 4 >= 32
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if bool(stor261[arg1].field_1536):
            if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor261[arg1].field_1536):
                if 31 >= uint255(stor261[arg1].field_1536) * 0.5:
                    mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[576] = stor261[arg1][6].field_0
                    idx = 576
                    s = 0
                    while (uint255(stor261[arg1].field_1536) * 0.5) + 544 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor261[arg1].field_1537 % 128:
                if 31 >= stor261[arg1].field_1537 % 128:
                    mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[576] = stor261[arg1][6].field_0
                    idx = 576
                    s = 0
                    while stor261[arg1].field_1537 % 128 + 544 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return 32, address(stor261[arg1].field_0), 
               stor261[arg1].field_256,
               stor261[arg1].field_512,
               stor261[arg1].field_768,
               stor261[arg1].field_1024,
               stor261[arg1].field_1280,
               224,
               2 * Mask(256, -1, stor261[arg1].field_1536),
               mem[576 len ceil32(uint255(stor261[arg1].field_1536) * 0.5)]
    if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor261[arg1].field_1536):
            if 31 >= uint255(stor261[arg1].field_1536) * 0.5:
                mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[576] = stor261[arg1][6].field_0
                idx = 576
                s = 0
                while (uint255(stor261[arg1].field_1536) * 0.5) + 544 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor261[arg1].field_1537 % 128:
            if 31 >= stor261[arg1].field_1537 % 128:
                mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[576] = stor261[arg1][6].field_0
                idx = 576
                s = 0
                while stor261[arg1].field_1537 % 128 + 544 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return 32, address(stor261[arg1].field_0), 
           stor261[arg1].field_256,
           stor261[arg1].field_512,
           stor261[arg1].field_768,
           stor261[arg1].field_1024,
           stor261[arg1].field_1280,
           224,
           stor261[arg1].field_1536 % 128,
           mem[576 len ceil32(stor261[arg1].field_1537 % 128)]
}

function collection(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 < stor260.length
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if bool(stor260[arg1].field_0):
            if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_0) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor260[arg1].field_0):
                if 31 >= uint255(stor260[arg1].field_0) * 0.5:
                    mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
                else:
                    mem[128] = stor260[arg1].field_0
                    idx = 128
                    s = 0
                    while (uint255(stor260[arg1].field_0) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
                revert with 0, 34
            if stor260[arg1].field_1 % 128:
                if 31 >= stor260[arg1].field_1 % 128:
                    mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
                else:
                    mem[128] = stor260[arg1].field_0
                    idx = 128
                    s = 0
                    while stor260[arg1].field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return Array(len=2 * Mask(256, -1, stor260[arg1].field_0), data=mem[128 len ceil32(uint255(stor260[arg1].field_0) * 0.5)]), 
               stor260[arg1].field_256,
               stor260[arg1].field_512,
               stor260[arg1].field_768,
               stor260[arg1].field_1024,
               stor260[arg1].field_1280,
               stor260[arg1].field_1536,
               stor260[arg1].field_1792,
               stor260[arg1].field_2048,
               stor260[arg1].field_2304
    if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor260[arg1].field_0):
            if 31 >= uint255(stor260[arg1].field_0) * 0.5:
                mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
            else:
                mem[128] = stor260[arg1].field_0
                idx = 128
                s = 0
                while (uint255(stor260[arg1].field_0) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if stor260[arg1].field_1 % 128:
            if 31 >= stor260[arg1].field_1 % 128:
                mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
            else:
                mem[128] = stor260[arg1].field_0
                idx = 128
                s = 0
                while stor260[arg1].field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return Array(len=stor260[arg1].field_0 % 128, data=mem[128 len ceil32(stor260[arg1].field_1 % 128)]), 
           stor260[arg1].field_256,
           stor260[arg1].field_512,
           stor260[arg1].field_768,
           stor260[arg1].field_1024,
           stor260[arg1].field_1280,
           stor260[arg1].field_1536,
           stor260[arg1].field_1792,
           stor260[arg1].field_2048,
           stor260[arg1].field_2304
}

function uri(uint256 arg1) {
    require calldata.size - 4 >= 32
    if bool(stor103.length):
        if bool(stor103.length) == uint255(stor103.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor103.length):
            if bool(stor103.length) == uint255(stor103.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor103.length):
                if 31 < uint255(stor103.length) * 0.5:
                    mem[128] = uint256(stor103.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor103.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor103[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor103.length), data=mem[128 len ceil32(uint255(stor103.length) * 0.5)])
                mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
        else:
            if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
                revert with 0, 34
            if stor103.length.field_1 % 128:
                if 31 < stor103.length.field_1 % 128:
                    mem[128] = uint256(stor103.field_0)
                    idx = 128
                    s = 0
                    while stor103.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor103[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor103.length), data=mem[128 len ceil32(uint255(stor103.length) * 0.5)])
                mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
        mem[ceil32(uint255(stor103.length) * 0.5) + 192 len ceil32(uint255(stor103.length) * 0.5)] = mem[128 len ceil32(uint255(stor103.length) * 0.5)]
        if ceil32(uint255(stor103.length) * 0.5) > uint255(stor103.length) * 0.5:
            mem[ceil32(uint255(stor103.length) * 0.5) + (uint255(stor103.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor103.length), data=mem[128 len ceil32(uint255(stor103.length) * 0.5)], mem[(2 * ceil32(uint255(stor103.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor103.length) * 0.5)]), 
    if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor103.length):
        if bool(stor103.length) == uint255(stor103.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor103.length):
            if 31 < uint255(stor103.length) * 0.5:
                mem[128] = uint256(stor103.field_0)
                idx = 128
                s = 0
                while (uint255(stor103.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor103[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
    else:
        if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
            revert with 0, 34
        if stor103.length.field_1 % 128:
            if 31 < stor103.length.field_1 % 128:
                mem[128] = uint256(stor103.field_0)
                idx = 128
                s = 0
                while stor103.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor103[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
    mem[ceil32(stor103.length.field_1 % 128) + 192 len ceil32(stor103.length.field_1 % 128)] = mem[128 len ceil32(stor103.length.field_1 % 128)]
    if ceil32(stor103.length.field_1 % 128) > stor103.length.field_1 % 128:
        mem[ceil32(stor103.length.field_1 % 128) + stor103.length.field_1 % 128 + 192] = 0
    return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)], mem[(2 * ceil32(stor103.length.field_1 % 128)) + 192 len 2 * ceil32(stor103.length.field_1 % 128)]), 
}

function sub_b57a8f73(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    mem[96] = 3
    mem[128] = 0x3078300000000000000000000000000000000000000000000000000000000000
    mem[160] = 1
    mem[192] = arg2
    mem[224] = 1
    mem[256] = arg3
    if balanceOf[arg2][address(arg1)] < arg3:
        revert with 0, 'ERC1155: insufficient balance for transfer'
    balanceOf[arg2][address(arg1)] -= arg3
    if balanceOf[arg2][57005] > !arg3:
        revert with 0, 17
    balanceOf[arg2][57005] += arg3
    emit TransferSingle(arg2, arg3, msg.sender, address(arg1), 57005);
    if not ext_code.size(57005):
        idx = 0
        s = 0
        while idx < sub_627dd5ca[address(arg1)]:
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if stor261[stor262[address(arg1)][idx]].field_256 != arg2:
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s
                continue 
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            uint16(stor261[stor262[address(arg1)][idx]].field_0) = 57005
            Mask(144, 0, stor261[stor262[address(arg1)][idx]].field_16) = 0
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            sub_627dd5ca[address(arg1)][idx] = 0
            if s == -1:
                revert with 0, 17
            if s + 1 >= arg3:
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + 1
            continue 
    mem[292] = msg.sender
    mem[324] = address(arg1)
    mem[356] = arg2
    mem[388] = arg3
    mem[420] = 160
    mem[452] = 3
    mem[484] = 0x3078300000000000000000000000000000000000000000000000000000000000
    mem[487] = 0
    require ext_code.size(57005)
    call 0xdead.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
         gas gas_remaining wei
        args msg.sender, address(arg1), arg2, arg3, 160, 3, 0, 0
    mem[288] = ext_call.return_data[0]
    if ext_call.success:
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
        idx = 0
        s = 0
        while idx < sub_627dd5ca[address(arg1)]:
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if stor261[stor262[address(arg1)][idx]].field_256 != arg2:
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s
                continue 
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            uint16(stor261[stor262[address(arg1)][idx]].field_0) = 57005
            Mask(144, 0, stor261[stor262[address(arg1)][idx]].field_16) = 0
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            sub_627dd5ca[address(arg1)][idx] = 0
            if s == -1:
                revert with 0, 17
            if s + 1 >= arg3:
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + 1
            continue 
    if return_data.size <= 3:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(ext_call.return_data[0 len 4], 0) >> 224 != Error(string arg1):
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if return_data.size < 68:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[288 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if mem[ext_call.return_data[0] + 288] > test266151307():
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 32 > return_data.size - 4:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289 < 288 or floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289 > test266151307():
        revert with 0, 65
    mem[64] = floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289
    if not ext_call.return_data[0] + 288:
        _174 = floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289
        mem[floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 52
        mem[_174 + 68] = 'ERC1155: transfer to non ERC1155'
        mem[_174 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
        revert with memory
          from mem[64]
           len _174 + -mem[64] + 132
    _169 = floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289
    mem[floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 288] + 31) + 289] = 0x8c379a000000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = 32
    _178 = mem[ext_call.return_data[0] + 288]
    mem[mem[64] + 36] = mem[ext_call.return_data[0] + 288]
    mem[_169 + 68 len ceil32(_178)] = mem[ext_call.return_data[0] + 320 len ceil32(_178)]
    if ceil32(_178) > _178:
        mem[_169 + _178 + 68] = 0
    revert with memory
      from mem[64]
       len ceil32(_178) + _169 + -mem[64] + 68
}

function sub_3200e67c(?) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 160
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    require ('cd', 4).length <= test266151307()
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    require ('cd', 36).length <= test266151307()
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    require ('cd', 68).length <= test266151307()
    require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    require cd[132] <= test266151307()
    require cd[132] + 35 < calldata.size
    require ('cd', 132).length <= test266151307()
    require cd[132] + (32 * ('cd', 132).length) + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < ('cd', 4).length:
        require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
        if idx >= ('cd', 36).length:
            revert with 0, 50
        _901 = mem[64]
        mem[64] = mem[64] + 32
        mem[_901] = 0
        if not address(cd[((32 * idx) + cd[4] + 36)]):
            revert with 0, 'ERC1155: mint to the zero address'
        _903 = mem[64]
        mem[mem[64]] = 1
        mem[64] = mem[64] + 64
        if 0 >= mem[_903]:
            revert with 0, 50
        mem[_903 + 32] = cd[((32 * idx) + cd[36] + 36)]
        mem[_903 + 64] = 1
        mem[64] = _903 + 128
        mem[_903 + 96] = 1
        mem[32] = sha3(cd[((32 * idx) + cd[36] + 36)], 101)
        if balanceOf[cd[((32 * idx) + cd[36] + 36)]][address(cd[((32 * idx) + cd[4] + 36)])] > -2:
            revert with 0, 17
        balanceOf[cd[((32 * idx) + cd[36] + 36)]][address(cd[((32 * idx) + cd[4] + 36)])]++
        mem[_903 + 128] = cd[((32 * idx) + cd[36] + 36)]
        mem[_903 + 160] = 1
        emit TransferSingle(cd[((32 * idx) + cd[36] + 36)], 1, msg.sender, 0, address(cd[((32 * idx) + cd[4] + 36)]));
        if not ext_code.size(address(cd[((32 * idx) + cd[4] + 36)])):
            if 1 > !stor256:
                revert with 0, 17
            if stor256 == -1:
                revert with 0, 17
            stor256++
            if idx >= ('cd', 4).length:
                revert with 0, 50
            require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
            address(stor261[stor256 + 1].field_0) = address(cd[((32 * idx) + cd[4] + 36)])
            if idx >= ('cd', 36).length:
                revert with 0, 50
            stor261[stor256 + 1].field_256 = cd[((32 * idx) + cd[36] + 36)]
            if idx >= ('cd', 68).length:
                revert with 0, 50
            if 0 == cd[((32 * idx) + cd[68] + 36)]:
                stor261[stor256 + 1].field_512 = block.timestamp
            else:
                if idx >= ('cd', 68).length:
                    revert with 0, 50
                stor261[stor256 + 1].field_512 = cd[((32 * idx) + cd[68] + 36)]
            if idx >= ('cd', 100).length:
                revert with 0, 50
            if 0 == cd[((32 * idx) + cd[100] + 36)]:
                stor261[stor256 + 1].field_768 = block.timestamp
            else:
                if idx >= ('cd', 100).length:
                    revert with 0, 50
                stor261[stor256 + 1].field_768 = cd[((32 * idx) + cd[100] + 36)]
            if idx >= ('cd', 132).length:
                revert with 0, 50
            require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
            require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
            require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
            if bool(stor261[stor256 + 1].field_1536):
                if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                    revert with 0, 34
                if not cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]) + 1
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    t = cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68
                    while cd[132] + cd[(cd[132] + (32 * idx) + 36)] + cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + 68 > t:
                        stor[s] = cd[t]
                        s = s + 1
                        t = t + 32
                        continue 
                    t = s
                    while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > t:
                        stor[t] = 0
                        t = t + 1
                        continue 
            else:
                if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                    revert with 0, 34
                if not cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]) + 1
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    t = cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68
                    while cd[132] + cd[(cd[132] + (32 * idx) + 36)] + cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + 68 > t:
                        stor[s] = cd[t]
                        s = s + 1
                        t = t + 32
                        continue 
                    t = s
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > t:
                        stor[t] = 0
                        t = t + 1
                        continue 
            if idx >= ('cd', 132).length:
                revert with 0, 50
            require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
            require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
            require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
            if cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] > 0:
                if idx >= ('cd', 132).length:
                    revert with 0, 50
                require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
                require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
                require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
                mem[_903 + 128] = 32
                mem[_903 + 160] = cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
                mem[_903 + 192 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]] = call.data[cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]]
                mem[cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + _903 + 192] = 0
                emit URI(Array(len=cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)], data=call.data[cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]]), stor256 + 1);
        else:
            mem[_903 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
            mem[_903 + 132] = msg.sender
            mem[_903 + 164] = 0
            mem[_903 + 196] = cd[((32 * idx) + cd[36] + 36)]
            mem[_903 + 228] = 1
            mem[_903 + 260] = 160
            mem[_903 + 292] = 0
            s = 0
            while s < 0:
                mem[s + _903 + 324] = mem[_901 + s + 32]
                s = s + 32
                continue 
            require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
            call address(cd[((32 * idx) + cd[4] + 36)]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, cd[((32 * idx) + cd[36] + 36)], 1, 160, 0
            mem[_903 + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[64] = _903 + ceil32(return_data.size) + 128
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
            if 1 > !stor256:
                revert with 0, 17
            if stor256 == -1:
                revert with 0, 17
            stor256++
            if idx >= ('cd', 4).length:
                revert with 0, 50
            require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
            address(stor261[stor256 + 1].field_0) = address(cd[((32 * idx) + cd[4] + 36)])
            if idx >= ('cd', 36).length:
                revert with 0, 50
            stor261[stor256 + 1].field_256 = cd[((32 * idx) + cd[36] + 36)]
            if idx >= ('cd', 68).length:
                revert with 0, 50
            if 0 == cd[((32 * idx) + cd[68] + 36)]:
                stor261[stor256 + 1].field_512 = block.timestamp
            else:
                if idx >= ('cd', 68).length:
                    revert with 0, 50
                stor261[stor256 + 1].field_512 = cd[((32 * idx) + cd[68] + 36)]
            if idx >= ('cd', 100).length:
                revert with 0, 50
            if 0 == cd[((32 * idx) + cd[100] + 36)]:
                stor261[stor256 + 1].field_768 = block.timestamp
            else:
                if idx >= ('cd', 100).length:
                    revert with 0, 50
                stor261[stor256 + 1].field_768 = cd[((32 * idx) + cd[100] + 36)]
            if idx >= ('cd', 132).length:
                revert with 0, 50
            require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
            require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
            require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
            if bool(stor261[stor256 + 1].field_1536):
                if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                    revert with 0, 34
                if not cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]) + 1
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    t = cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68
                    while cd[132] + cd[(cd[132] + (32 * idx) + 36)] + cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + 68 > t:
                        stor[s] = cd[t]
                        s = s + 1
                        t = t + 32
                        continue 
                    t = s
                    while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > t:
                        stor[t] = 0
                        t = t + 1
                        continue 
            else:
                if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                    revert with 0, 34
                if not cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]) + 1
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    t = cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68
                    while cd[132] + cd[(cd[132] + (32 * idx) + 36)] + cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + 68 > t:
                        stor[s] = cd[t]
                        s = s + 1
                        t = t + 32
                        continue 
                    t = s
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > t:
                        stor[t] = 0
                        t = t + 1
                        continue 
            if idx >= ('cd', 132).length:
                revert with 0, 50
            require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
            require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
            require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
            if cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] > 0:
                if idx >= ('cd', 132).length:
                    revert with 0, 50
                require cd[(cd[132] + (32 * idx) + 36)] < calldata.size + -cd[132] - 67
                require cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] <= test266151307()
                require cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 <= calldata.size - cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
                mem[_903 + ceil32(return_data.size) + 128] = 32
                mem[_903 + ceil32(return_data.size) + 160] = cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]
                mem[_903 + ceil32(return_data.size) + 192 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]] = call.data[cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]]
                mem[cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)] + _903 + ceil32(return_data.size) + 192] = 0
                emit URI(Array(len=cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)], data=call.data[cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 68 len cd[(cd[132] + cd[(cd[132] + (32 * idx) + 36)] + 36)]]), stor256 + 1);
        if idx >= ('cd', 4).length:
            revert with 0, 50
        require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
        mem[32] = 262
        sub_627dd5ca[address(cd[((32 * idx) + cd[4] + 36)])]++
        sub_627dd5ca[address(cd[((32 * idx) + cd[4] + 36)])][sub_627dd5ca[address(cd[((32 * idx) + cd[4] + 36)])]] = stor256 + 1
        if idx >= ('cd', 36).length:
            revert with 0, 50
        if cd[((32 * idx) + cd[36] + 36)] >= stor260.length:
            revert with 0, 50
        mem[0] = 260
        if stor260[cd[((32 * idx) + cd[36] + 36)]].field_2048 == -1:
            revert with 0, 17
        stor260[cd[((32 * idx) + cd[36] + 36)]].field_2048++
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function mint(uint256 arg1, uint256 arg2, string arg3) {
    require calldata.size - 4 >= 96
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    require arg3.length <= test266151307()
    require arg3 + arg3.length + 36 <= calldata.size
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_2048 > stor260[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'all of this collection are purchased'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_2048 > !arg2:
        revert with 0, 17
    if stor260[arg1].field_2048 + arg2 > stor260[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'there is not enought nodes to sell'
    if arg1 >= stor260.length:
        revert with 0, 50
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s >= stor260[arg1].field_2304:
        revert with 0, 'minted nodes exceed amount limit'
    if arg1 >= stor260.length:
        revert with 0, 50
    mem[32] = 262
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s > !arg2:
        revert with 0, 17
    if s + arg2 >= stor260[arg1].field_2304:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'you will exceed nodes amount limit'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
        revert with 0, 17
    mem[100] = msg.sender
    require ext_code.size(sub_85adc8b0Address)
    staticcall sub_85adc8b0Address.0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not isPresaleActive:
        if ext_call.return_data[0] < stor260[arg1].field_256 * arg2:
            revert with 0, 'receiver's balance is less than node price'
        if arg1 >= stor260.length:
            revert with 0, 50
        mem[0] = 260
        if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
            revert with 0, 17
        mem[ceil32(return_data.size) + 100] = msg.sender
        mem[ceil32(return_data.size) + 132] = this.address
        if not isPresaleActive:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2112 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2112 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2531 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2531 + -mem[64] + 64], stor256 + 1);
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2121 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2121 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2534 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2534 + -mem[64] + 64], stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1615 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1615] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1623 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1623]:
                revert with 0, 50
        else:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2 / 2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2 / 2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2131 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2131 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2539 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2539 + -mem[64] + 64], stor256 + 1);
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2140 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2140 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2542 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2542 + -mem[64] + 64], stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1616 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1616] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1626 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1626]:
                revert with 0, 50
    else:
        if ext_call.return_data[0] < stor260[arg1].field_256 * arg2 / 2:
            revert with 0, 'receiver's balance is less than node price'
        if arg1 >= stor260.length:
            revert with 0, 50
        mem[0] = 260
        if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
            revert with 0, 17
        mem[ceil32(return_data.size) + 100] = msg.sender
        mem[ceil32(return_data.size) + 132] = this.address
        if not isPresaleActive:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2150 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2150 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2547 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2547 + -mem[64] + 64], stor256 + 1);
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2159 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2159 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2550 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2550 + -mem[64] + 64], stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1617 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1617] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1629 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1629]:
                revert with 0, 50
        else:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2 / 2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2 / 2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1536) * 0.5 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2169 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2169 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + ((uint255(stor261[stor256 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2555 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2555 + -mem[64] + 64], stor256 + 1);
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2178 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2178 + -mem[64] + 64], stor256 + 1);
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                        if arg3.length:
                            _2558 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = arg3.length
                            mem[mem[64] + 64 len arg3.length] = arg3[all]
                            mem[arg3.length + mem[64] + 64] = 0
                            emit URI(mem[mem[64] len ceil32(arg3.length) + _2558 + -mem[64] + 64], stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1618 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1618] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1632 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1632]:
                revert with 0, 50
    if balanceOf[arg1][address(msg.sender)] > !arg2:
        revert with 0, 17
    balanceOf[arg1][address(msg.sender)] += arg2
    emit TransferSingle(arg1, arg2, msg.sender, 0, msg.sender);
    if ext_code.size(msg.sender):
        require ext_code.size(msg.sender)
        call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, arg1, arg2, 160, 0
        if not ext_call.success:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
}

function sub_46be42fa(?) {
    require calldata.size - 4 >= 32
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                   (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                   (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                   0 / stor255
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                   0 / stor255
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
           (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
}

function sub_8de45c1a(?) {
    require calldata.size - 4 >= 32
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
        revert with 0, 17
    return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
}

function sub_cc4da26d(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor261[stor262[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
        continue 
    return s
}

function sub_e7694bc6(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor261[stor262[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        return (s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if s and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / s:
        revert with 0, 17
    if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
        revert with 0, 17
    return (s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_cd844602(?) {
    require calldata.size - 4 >= 32
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
        revert with 0, 17
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
        revert with 0, 17
    if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
        revert with 0, 17
    return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
}

function claim() payable {
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if not sub_627dd5ca[msg.sender]:
        revert with 0, 'No have a node'
    if not sub_627dd5ca[address(msg.sender)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if not address(stor261[stor262[address(msg.sender)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(msg.sender)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(msg.sender)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    else:
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    s = 0
    t = 0
    while s < sub_627dd5ca[msg.sender]:
        if s >= sub_627dd5ca[msg.sender]:
            revert with 0, 50
        if not address(stor261[stor262[msg.sender][s]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[msg.sender][s]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[msg.sender][s]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                        u = 0
                        while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            if 0 > !u:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            u = u + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][s]].field_1280 = 0
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if t > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        s = s + 1
                        t = t + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                        continue 
                    u = 0
                    while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                        u = 0
                        while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            if 0 > !u:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            u = u + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][s]].field_1280 = 0
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if t > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        s = s + 1
                        t = t + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                        continue 
                    u = 0
                    while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
                stor261[stor262[msg.sender][s]].field_1280 = 0
                if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                s = s + 1
                t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                continue 
            if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 and block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                        u = 0
                        while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            if 0 > !u:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            u = u + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][s]].field_1280 = 0
                        if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if t > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        s = s + 1
                        t = t + (0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                        continue 
                    u = 0
                    while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                        u = 0
                        while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            if 0 > !u:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            u = u + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][s]].field_1280 = 0
                        if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if t > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        s = s + 1
                        t = t + (0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                        continue 
                    u = 0
                    while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
                stor261[stor262[msg.sender][s]].field_1280 = 0
                if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                s = s + 1
                t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                continue 
            if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) and stor260[stor261[stor262[msg.sender][s]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 and (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) > !((block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][s]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][s]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if s == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            s = s + 1
            t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][s]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][s]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if s == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            s = s + 1
            t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
            continue 
        if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 and block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    u = 0
                    while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        if 0 > !u:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        u = u + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][s]].field_1280 = 0
                    if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if t > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    s = s + 1
                    t = t + (0 / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
                    continue 
                u = 0
                while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][s]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][s]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                revert with 0, 17
            if s == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            s = s + 1
            t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][s]].field_1280
            continue 
        if block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) and stor260[stor261[stor262[msg.sender][s]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 and (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) > !((block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[msg.sender][s]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[msg.sender][s]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                u = 0
                while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                stor261[stor262[msg.sender][s]].field_1280 = 0
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if t > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                s = s + 1
                t = t + (0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
                continue 
            u = 0
            while u <= 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 / 10:
                if 0 > !u:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                u = u + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                u = 0
                while u <= block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257:
                    if 0 > !u:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    u = u + 1
                    continue 
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][s]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][s]].field_1024 > !(0 / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][s]].field_1024 += 0 / stor255
                stor261[stor262[msg.sender][s]].field_1280 = 0
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if t > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                s = s + 1
                t = t + (0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
                continue 
            u = 0
            while u <= (10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !u:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                u = u + 1
                continue 
        if block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][s]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[msg.sender][s]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][s]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][s]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        stor261[stor262[msg.sender][s]].field_768 = block.timestamp
        if stor261[stor262[msg.sender][s]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255):
            revert with 0, 17
        stor261[stor262[msg.sender][s]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255
        stor261[stor262[msg.sender][s]].field_1280 = 0
        if (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
            revert with 0, 17
        if t > !(((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280):
            revert with 0, 17
        if s == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        s = s + 1
        t = t + ((block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_768 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][s]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][s]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][s]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][s]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][s]].field_1280
        continue 
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, t
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor201 = 1
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg5 <= test266151307()
    require arg5 + 35 < calldata.size
    if arg5.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg5.length)) + 97 < 96 or ceil32(ceil32(arg5.length)) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg5.length
    require arg5 + arg5.length + 36 <= calldata.size
    mem[128 len arg5.length] = arg5[all]
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if bool(sub_a82f0131) != 1:
        revert with 0, 'Node: Transfer is disabled'
    if msg.sender == arg1:
        if not arg2:
            revert with 0, 'ERC1155: transfer to the zero address'
        mem[ceil32(ceil32(arg5.length)) + 97] = 1
        mem[ceil32(ceil32(arg5.length)) + 129] = arg3
        mem[ceil32(ceil32(arg5.length)) + 161] = 1
        mem[64] = ceil32(ceil32(arg5.length)) + 225
        mem[ceil32(ceil32(arg5.length)) + 193] = arg4
        if balanceOf[arg3][address(arg1)] < arg4:
            revert with 0, 'ERC1155: insufficient balance for transfer'
        balanceOf[arg3][address(arg1)] -= arg4
        if balanceOf[arg3][arg2] > !arg4:
            revert with 0, 17
        balanceOf[arg3][arg2] += arg4
        mem[ceil32(ceil32(arg5.length)) + 225] = arg3
        mem[ceil32(ceil32(arg5.length)) + 257] = arg4
        emit TransferSingle(arg3, arg4, msg.sender, arg1, arg2);
        if not ext_code.size(arg2):
            mem[0] = arg1
            mem[32] = 262
            idx = 0
            s = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s
                    continue 
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if not address(stor261[stor262[address(arg1)][idx]].field_0):
                    revert with 0, 'No node exist'
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                    revert with 0, 17
                if not stor257:
                    revert with 0, 18
                if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                    revert with 0, 17
                if not stor257:
                    revert with 0, 18
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                            revert with 0, 50
                        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6238 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6238] == bool(mem[_6238])
                            else:
                                t = 0
                                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6651 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6651] == bool(mem[_6651])
                        else:
                            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6242 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6242] == bool(mem[_6242])
                            else:
                                t = 0
                                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6653 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6653] == bool(mem[_6653])
                    else:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6246 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6246] == bool(mem[_6246])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6655 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6655] == bool(mem[_6655])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6250 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6250] == bool(mem[_6250])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6657 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6657] == bool(mem[_6657])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6254 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6254] == bool(mem[_6254])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6659 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6659] == bool(mem[_6659])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6258 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6258] == bool(mem[_6258])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6661 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6661] == bool(mem[_6661])
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                            revert with 0, 50
                        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6262 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6262] == bool(mem[_6262])
                            else:
                                t = 0
                                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6663 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6663] == bool(mem[_6663])
                        else:
                            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6266 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6266] == bool(mem[_6266])
                            else:
                                t = 0
                                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6665 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6665] == bool(mem[_6665])
                    else:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6270 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6270] == bool(mem[_6270])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6667 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6667] == bool(mem[_6667])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6274 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6274] == bool(mem[_6274])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6669 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6669] == bool(mem[_6669])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6278 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6278] == bool(mem[_6278])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6671 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6671] == bool(mem[_6671])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6282 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6282] == bool(mem[_6282])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6673 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6673] == bool(mem[_6673])
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                if idx >= sub_627dd5ca[arg1]:
                    revert with 0, 50
                sub_627dd5ca[address(arg2)]++
                sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                sub_627dd5ca[address(arg1)][idx] = 0
                if s == -1:
                    revert with 0, 17
                if s + 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 262
                idx = idx + 1
                s = s + 1
                continue 
        else:
            mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
            mem[ceil32(ceil32(arg5.length)) + 261] = arg1
            mem[ceil32(ceil32(arg5.length)) + 293] = arg3
            mem[ceil32(ceil32(arg5.length)) + 325] = arg4
            mem[ceil32(ceil32(arg5.length)) + 357] = 160
            mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
            mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
            if ceil32(arg5.length) <= arg5.length:
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9454 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9454] == bool(mem[_9454])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10267 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10267] == bool(mem[_10267])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9458 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9458] == bool(mem[_9458])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10269 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10269] == bool(mem[_10269])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9462 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9462] == bool(mem[_9462])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10271 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10271] == bool(mem[_10271])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9466 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9466] == bool(mem[_9466])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10273 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10273] == bool(mem[_10273])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9470 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9470] == bool(mem[_9470])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10275 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10275] == bool(mem[_10275])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9474 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9474] == bool(mem[_9474])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10277 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10277] == bool(mem[_10277])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9478 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9478] == bool(mem[_9478])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10279 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10279] == bool(mem[_10279])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9482 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9482] == bool(mem[_9482])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10281 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10281] == bool(mem[_10281])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9486 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9486] == bool(mem[_9486])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10283 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10283] == bool(mem[_10283])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9490 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9490] == bool(mem[_9490])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10285 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10285] == bool(mem[_10285])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9494 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9494] == bool(mem[_9494])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10287 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10287] == bool(mem[_10287])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9498 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9498] == bool(mem[_9498])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10289 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10289] == bool(mem[_10289])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
            else:
                mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9502 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9502] == bool(mem[_9502])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10291 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10291] == bool(mem[_10291])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9506 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9506] == bool(mem[_9506])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10293 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10293] == bool(mem[_10293])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9510 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9510] == bool(mem[_9510])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10295 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10295] == bool(mem[_10295])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9514 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9514] == bool(mem[_9514])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10297 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10297] == bool(mem[_10297])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9518 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9518] == bool(mem[_9518])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10299 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10299] == bool(mem[_10299])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9522 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9522] == bool(mem[_9522])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10301 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10301] == bool(mem[_10301])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9526 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9526] == bool(mem[_9526])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10303 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10303] == bool(mem[_10303])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9530 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9530] == bool(mem[_9530])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10305 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10305] == bool(mem[_10305])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9534 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9534] == bool(mem[_9534])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10307 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10307] == bool(mem[_10307])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9538 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9538] == bool(mem[_9538])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10309 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10309] == bool(mem[_10309])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9542 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9542] == bool(mem[_9542])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10311 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10311] == bool(mem[_10311])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9546 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9546] == bool(mem[_9546])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10313 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10313] == bool(mem[_10313])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
    else:
        if not stor102[address(arg1)][address(msg.sender)]:
            revert with 0, 'ERC1155: caller is not owner nor approved'
        if not arg2:
            revert with 0, 'ERC1155: transfer to the zero address'
        mem[ceil32(ceil32(arg5.length)) + 97] = 1
        mem[ceil32(ceil32(arg5.length)) + 129] = arg3
        mem[ceil32(ceil32(arg5.length)) + 161] = 1
        mem[64] = ceil32(ceil32(arg5.length)) + 225
        mem[ceil32(ceil32(arg5.length)) + 193] = arg4
        if balanceOf[arg3][address(arg1)] < arg4:
            revert with 0, 'ERC1155: insufficient balance for transfer'
        balanceOf[arg3][address(arg1)] -= arg4
        if balanceOf[arg3][arg2] > !arg4:
            revert with 0, 17
        balanceOf[arg3][arg2] += arg4
        mem[ceil32(ceil32(arg5.length)) + 225] = arg3
        mem[ceil32(ceil32(arg5.length)) + 257] = arg4
        emit TransferSingle(arg3, arg4, msg.sender, arg1, arg2);
        if not ext_code.size(arg2):
            mem[0] = arg1
            mem[32] = 262
            idx = 0
            s = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s
                    continue 
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if not address(stor261[stor262[address(arg1)][idx]].field_0):
                    revert with 0, 'No node exist'
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                    revert with 0, 17
                if not stor257:
                    revert with 0, 18
                if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                    revert with 0, 17
                if not stor257:
                    revert with 0, 18
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                            revert with 0, 50
                        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6286 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6286] == bool(mem[_6286])
                            else:
                                t = 0
                                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6677 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6677] == bool(mem[_6677])
                        else:
                            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6290 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6290] == bool(mem[_6290])
                            else:
                                t = 0
                                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6679 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6679] == bool(mem[_6679])
                    else:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6294 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6294] == bool(mem[_6294])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6681 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6681] == bool(mem[_6681])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6298 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6298] == bool(mem[_6298])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6683 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6683] == bool(mem[_6683])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6302 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6302] == bool(mem[_6302])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6685 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6685] == bool(mem[_6685])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6306 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6306] == bool(mem[_6306])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6687 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6687] == bool(mem[_6687])
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                            revert with 0, 50
                        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6310 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6310] == bool(mem[_6310])
                            else:
                                t = 0
                                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6689 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6689] == bool(mem[_6689])
                        else:
                            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6314 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6314] == bool(mem[_6314])
                            else:
                                t = 0
                                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 262
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor255:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 261
                                if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                    revert with 0, 17
                                stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6691 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6691] == bool(mem[_6691])
                    else:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6318 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6318] == bool(mem[_6318])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6693 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6693] == bool(mem[_6693])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6322 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6322] == bool(mem[_6322])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6695 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6695] == bool(mem[_6695])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                revert with 0, 17
                            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6326 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6326] == bool(mem[_6326])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6697 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6697] == bool(mem[_6697])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6330 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6330] == bool(mem[_6330])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6699 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6699] == bool(mem[_6699])
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                if idx >= sub_627dd5ca[arg1]:
                    revert with 0, 50
                sub_627dd5ca[address(arg2)]++
                sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                sub_627dd5ca[address(arg1)][idx] = 0
                if s == -1:
                    revert with 0, 17
                if s + 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 262
                idx = idx + 1
                s = s + 1
                continue 
        else:
            mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
            mem[ceil32(ceil32(arg5.length)) + 261] = arg1
            mem[ceil32(ceil32(arg5.length)) + 293] = arg3
            mem[ceil32(ceil32(arg5.length)) + 325] = arg4
            mem[ceil32(ceil32(arg5.length)) + 357] = 160
            mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
            mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
            if ceil32(arg5.length) <= arg5.length:
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9550 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9550] == bool(mem[_9550])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10315 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10315] == bool(mem[_10315])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9554 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9554] == bool(mem[_9554])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10317 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10317] == bool(mem[_10317])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9558 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9558] == bool(mem[_9558])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10319 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10319] == bool(mem[_10319])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9562 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9562] == bool(mem[_9562])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10321 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10321] == bool(mem[_10321])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9566 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9566] == bool(mem[_9566])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10323 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10323] == bool(mem[_10323])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9570 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9570] == bool(mem[_9570])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10325 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10325] == bool(mem[_10325])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9574 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9574] == bool(mem[_9574])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10327 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10327] == bool(mem[_10327])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9578 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9578] == bool(mem[_9578])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10329 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10329] == bool(mem[_10329])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9582 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9582] == bool(mem[_9582])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10331 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10331] == bool(mem[_10331])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9586 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9586] == bool(mem[_9586])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10333 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10333] == bool(mem[_10333])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9590 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9590] == bool(mem[_9590])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10335 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10335] == bool(mem[_10335])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9594 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9594] == bool(mem[_9594])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10337 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10337] == bool(mem[_10337])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
            else:
                mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9598 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9598] == bool(mem[_9598])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10339 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10339] == bool(mem[_10339])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9602 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9602] == bool(mem[_9602])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10341 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10341] == bool(mem[_10341])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9606 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9606] == bool(mem[_9606])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10343 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10343] == bool(mem[_10343])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9610 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9610] == bool(mem[_9610])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10345 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10345] == bool(mem[_10345])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9614 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9614] == bool(mem[_9614])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10347 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10347] == bool(mem[_10347])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9618 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9618] == bool(mem[_9618])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10349] == bool(mem[_10349])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9622 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9622] == bool(mem[_9622])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10351 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10351] == bool(mem[_10351])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9626 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9626] == bool(mem[_9626])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10353 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10353] == bool(mem[_10353])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9630 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9630] == bool(mem[_9630])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10355 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10355] == bool(mem[_10355])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9634 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9634] == bool(mem[_9634])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10357 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10357] == bool(mem[_10357])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9638 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9638] == bool(mem[_9638])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10359 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10359] == bool(mem[_10359])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9642 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9642] == bool(mem[_9642])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10361 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10361] == bool(mem[_10361])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
}



}
