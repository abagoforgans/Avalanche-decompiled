contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1, uint256 arg2)
#
const BONUS_MULTIPLIER = 1


address owner;
address sub_a7b160cbAddress;
address devAddr;
address communityAddr;
uint256 bonusEndBlock;
uint256 rewardPerBlock;
array of struct poolInfo;
mapping of struct userInfo;
uint256 totalAllocPoint;
uint256 startBlock;

function poolLength() payable {
    return poolInfo.length
}

function communityAddr() payable {
    return communityAddr
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_0, poolInfo[arg1].field_256, poolInfo[arg1].field_512, poolInfo[arg1].field_768
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function bonusEndBlock() payable {
    return bonusEndBlock
}

function startBlock() payable {
    return startBlock
}

function rewardPerBlock() payable {
    return rewardPerBlock
}

function owner() payable {
    return owner
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return userInfo[arg1][arg2].field_0, userInfo[arg1][arg2].field_256
}

function sub_a7b160cb(?) payable {
    return sub_a7b160cbAddress
}

function devAddr() payable {
    return devAddr
}

function _fallback() payable {
    revert
}

function dev(address arg1) payable {
    require calldata.size - 4 >= 32
    require msg.sender == devAddr
    devAddr = arg1
}

function community(address arg1) payable {
    require calldata.size - 4 >= 32
    require msg.sender == devAddr
    communityAddr = arg1
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function updatePoolLastRewardBlock(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require msg.sender == devAddr
    require arg1 < poolInfo.length
    poolInfo[arg1].field_512 = arg2
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getMultiplier(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 <= bonusEndBlock:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        if not arg2 - arg1:
            return 0
        require arg2 - arg1
        if arg2 - arg1 / arg2 - arg1 != 1:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        return (arg2 - arg1)
    if arg1 >= bonusEndBlock:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        return (arg2 - arg1)
    if bonusEndBlock > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg1 > bonusEndBlock:
        revert with 0, 'SafeMath: subtraction overflow'
    if not bonusEndBlock - arg1:
        if arg2 - bonusEndBlock < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 - bonusEndBlock)
    require bonusEndBlock - arg1
    if bonusEndBlock - arg1 / bonusEndBlock - arg1 != 1:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if arg2 < bonusEndBlock:
        revert with 0, 'SafeMath: addition overflow'
    return (-arg1 + arg2)
}

function emergencyWithdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if ext_code.size(poolInfo[arg1].field_0) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][address(msg.sender)].field_32
    call poolInfo[arg1].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args userInfo[arg1][address(msg.sender)].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][address(msg.sender)].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size > 0:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit EmergencyWithdraw(userInfo[arg1][address(msg.sender)].field_0, msg.sender, arg1);
    userInfo[arg1][address(msg.sender)].field_0 = 0
    userInfo[arg1][address(msg.sender)].field_256 = 0
}

function pendingRewards(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if block.number <= bonusEndBlock:
        if poolInfo[arg1].field_512 > block.number:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[arg1].field_512:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - poolInfo[arg1].field_512
        if block.number - poolInfo[arg1].field_512 / block.number - poolInfo[arg1].field_512 != 1:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not block.number - poolInfo[arg1].field_512:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - poolInfo[arg1].field_512
        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
        if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_512 >= bonusEndBlock:
        if poolInfo[arg1].field_512 > block.number:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[arg1].field_512:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - poolInfo[arg1].field_512
        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
        if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if bonusEndBlock > block.number:
        revert with 0, 'SafeMath: subtraction overflow'
    if poolInfo[arg1].field_512 > bonusEndBlock:
        revert with 0, 'SafeMath: subtraction overflow'
    if not bonusEndBlock - poolInfo[arg1].field_512:
        if block.number - bonusEndBlock < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not block.number - bonusEndBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - bonusEndBlock
        if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
        if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[arg1].field_256:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require bonusEndBlock - poolInfo[arg1].field_512
    if bonusEndBlock - poolInfo[arg1].field_512 / bonusEndBlock - poolInfo[arg1].field_512 != 1:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if block.number < bonusEndBlock:
        revert with 0, 'SafeMath: addition overflow'
    if not -poolInfo[arg1].field_512 + block.number:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require 0 / totalAllocPoint
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require -poolInfo[arg1].field_512 + block.number
    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[arg1].field_512 + block.number != rewardPerBlock:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require 0 / totalAllocPoint
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[arg1].field_256:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if totalAllocPoint <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalAllocPoint
    if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
    if 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if poolInfo[arg1].field_768 + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not userInfo[arg1][address(arg2)].field_0:
        if userInfo[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -userInfo[arg1][address(arg2)].field_256
    require userInfo[arg1][address(arg2)].field_0
    if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
    if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
}

function updatePool(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if block.number > poolInfo[arg1].field_512:
        require ext_code.size(poolInfo[arg1].field_0)
        staticcall poolInfo[arg1].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            if block.number <= bonusEndBlock:
                if poolInfo[arg1].field_512 > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.number - poolInfo[arg1].field_512:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint / 100:
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                    else:
                        require 0 / totalAllocPoint / 100
                        if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / totalAllocPoint / 10 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                    else:
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                else:
                    require block.number - poolInfo[arg1].field_512
                    if block.number - poolInfo[arg1].field_512 / block.number - poolInfo[arg1].field_512 != 1:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint / 100:
                            if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 0
                        else:
                            require 0 / totalAllocPoint / 100
                            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / totalAllocPoint / 10 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 15 * 0 / totalAllocPoint / 100
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require block.number - poolInfo[arg1].field_512
                        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
                            if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
            else:
                if poolInfo[arg1].field_512 >= bonusEndBlock:
                    if poolInfo[arg1].field_512 > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint / 100:
                            if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 0
                        else:
                            require 0 / totalAllocPoint / 100
                            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / totalAllocPoint / 10 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 15 * 0 / totalAllocPoint / 100
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require block.number - poolInfo[arg1].field_512
                        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
                            if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                else:
                    if bonusEndBlock > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if poolInfo[arg1].field_512 > bonusEndBlock:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not bonusEndBlock - poolInfo[arg1].field_512:
                        if block.number - bonusEndBlock < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require block.number - bonusEndBlock
                            if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint / 100:
                                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                else:
                                    require 0 / totalAllocPoint / 100
                                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                    if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require bonusEndBlock - poolInfo[arg1].field_512
                        if bonusEndBlock - poolInfo[arg1].field_512 / bonusEndBlock - poolInfo[arg1].field_512 != 1:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if block.number < bonusEndBlock:
                            revert with 0, 'SafeMath: addition overflow'
                        if not -poolInfo[arg1].field_512 + block.number:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require -poolInfo[arg1].field_512 + block.number
                            if (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[arg1].field_512 + block.number != rewardPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint / 100:
                                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                else:
                                    require 0 / totalAllocPoint / 100
                                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
                                if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                else:
                                    require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if 15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
        poolInfo[arg1].field_512 = block.number
}

function massUpdatePools() payable {
    mem[64] = 96
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 6
        if block.number <= poolInfo[idx].field_512:
            idx = idx + 1
            continue 
        mem[mem[64] + 4] = this.address
        require ext_code.size(poolInfo[idx].field_0)
        staticcall poolInfo[idx].field_0.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
        if block.number <= bonusEndBlock:
            _1380 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1380] = 30
            mem[_1380 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > block.number:
                _1383 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1383 + idx + 68] = mem[_1380 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1383 + 68] = mem[_1383 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1383 + -mem[64] + 100
            if not block.number - poolInfo[idx].field_512:
                _1431 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1431] = 26
                mem[_1431 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1440 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1440 + idx + 68] = mem[_1431 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1440 + 68] = mem[_1440 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1440 + -mem[64] + 100
                require totalAllocPoint
                _1478 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1478] = 26
                mem[_1478 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1549 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1549] = 26
                    mem[_1549 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2093 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2093] = 26
                        mem[_2093 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2154 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2154 + idx + 68] = mem[_2093 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2154 + 68] = mem[_2154 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2154 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2153 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2153] = 26
                    mem[_2153 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2228 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2228 + idx + 68] = mem[_2153 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2228 + 68] = mem[_2228 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2228 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1564 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1564] = 26
                mem[_1564 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2152 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2152] = 26
                    mem[_2152 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2225 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2225 + idx + 68] = mem[_2152 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2225 + 68] = mem[_2225 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2225 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2224 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2224] = 26
                mem[_2224 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2305 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2305 + idx + 68] = mem[_2224 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2305 + 68] = mem[_2305 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2305 + -mem[64] + 100
            require block.number - poolInfo[idx].field_512
            if block.number - poolInfo[idx].field_512 / block.number - poolInfo[idx].field_512 != 1:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not block.number - poolInfo[idx].field_512:
                _1439 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1439] = 26
                mem[_1439 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1456 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1456 + idx + 68] = mem[_1439 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1456 + 68] = mem[_1456 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1456 + -mem[64] + 100
                require totalAllocPoint
                _1488 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1488] = 26
                mem[_1488 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1563 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1563] = 26
                    mem[_1563 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2151 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2151] = 26
                        mem[_2151 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2221 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2221 + idx + 68] = mem[_2151 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2221 + 68] = mem[_2221 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2221 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2220 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2220] = 26
                    mem[_2220 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2301 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2301 + idx + 68] = mem[_2220 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2301 + 68] = mem[_2301 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2301 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1576 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1576] = 26
                mem[_1576 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2219 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2219] = 26
                    mem[_2219 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2298 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2298 + idx + 68] = mem[_2219 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2298 + 68] = mem[_2298 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2298 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2297 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2297] = 26
                mem[_2297 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2371 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2371 + idx + 68] = mem[_2297 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2371 + 68] = mem[_2371 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2371 + -mem[64] + 100
            require block.number - poolInfo[idx].field_512
            if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                _1455 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1455] = 26
                mem[_1455 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1470 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1470 + idx + 68] = mem[_1455 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1470 + 68] = mem[_1470 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1470 + -mem[64] + 100
                require totalAllocPoint
                _1500 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1500] = 26
                mem[_1500 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1575 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1575] = 26
                    mem[_1575 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2218 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2218] = 26
                        mem[_2218 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2294 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2294 + idx + 68] = mem[_2218 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2294 + 68] = mem[_2294 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2294 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2293 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2293] = 26
                    mem[_2293 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2367 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2367 + idx + 68] = mem[_2293 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2367 + 68] = mem[_2367 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2367 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1585 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1585] = 26
                mem[_1585 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2292 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2292] = 26
                    mem[_2292 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2364 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2364 + idx + 68] = mem[_2292 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2364 + 68] = mem[_2364 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2364 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2363 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2363] = 26
                mem[_2363 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2425 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2425 + idx + 68] = mem[_2363 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2425 + 68] = mem[_2425 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2425 + -mem[64] + 100
            require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1469 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1469] = 26
            mem[_1469 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1480 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1480 + idx + 68] = mem[_1469 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1480 + 68] = mem[_1480 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1480 + -mem[64] + 100
            require totalAllocPoint
            _1515 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1515] = 26
            mem[_1515 + 32] = 'SafeMath: division by zero'
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1584 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1584] = 26
                mem[_1584 + 32] = 'SafeMath: division by zero'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2291 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2291] = 26
                    mem[_2291 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2360 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2360 + idx + 68] = mem[_2291 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2360 + 68] = mem[_2360 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2360 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2359 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2359] = 26
                mem[_2359 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2421 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2421 + idx + 68] = mem[_2359 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2421 + 68] = mem[_2421 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2421 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1598 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1598] = 26
            mem[_1598 + 32] = 'SafeMath: division by zero'
            if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2358 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2358] = 26
                mem[_2358 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2418 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2418 + idx + 68] = mem[_2358 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2418 + 68] = mem[_2418 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2418 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2417 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2417] = 26
            mem[_2417 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2470 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2470 + idx + 68] = mem[_2417 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2470 + 68] = mem[_2470 + 74 len 26]
            revert with memory
              from mem[64]
               len _2470 + -mem[64] + 100
        if poolInfo[idx].field_512 >= bonusEndBlock:
            _1382 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1382] = 30
            mem[_1382 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > block.number:
                _1389 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1389 + idx + 68] = mem[_1382 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1389 + 68] = mem[_1389 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1389 + -mem[64] + 100
            if not block.number - poolInfo[idx].field_512:
                _1420 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1420] = 26
                mem[_1420 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1428 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1428 + idx + 68] = mem[_1420 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1428 + 68] = mem[_1428 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1428 + -mem[64] + 100
                require totalAllocPoint
                _1454 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1454] = 26
                mem[_1454 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1518 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1518] = 26
                    mem[_1518 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2001 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2001] = 26
                        mem[_2001 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2057 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2057 + idx + 68] = mem[_2001 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2057 + 68] = mem[_2057 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2057 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2056 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2056] = 26
                    mem[_2056 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2120 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2120 + idx + 68] = mem[_2056 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2120 + 68] = mem[_2120 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2120 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1537 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1537] = 26
                mem[_1537 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2055 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2055] = 26
                    mem[_2055 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2117 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2117 + idx + 68] = mem[_2055 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2117 + 68] = mem[_2117 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2117 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2116 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2116] = 26
                mem[_2116 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2184 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2184 + idx + 68] = mem[_2116 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2184 + 68] = mem[_2184 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2184 + -mem[64] + 100
            require block.number - poolInfo[idx].field_512
            if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                _1427 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1427] = 26
                mem[_1427 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1433 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1433 + idx + 68] = mem[_1427 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1433 + 68] = mem[_1433 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1433 + -mem[64] + 100
                require totalAllocPoint
                _1468 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1468] = 26
                mem[_1468 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1536 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1536] = 26
                    mem[_1536 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2054 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2054] = 26
                        mem[_2054 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2113 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2113 + idx + 68] = mem[_2054 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2113 + 68] = mem[_2113 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2113 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2112 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2112] = 26
                    mem[_2112 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2180 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2180 + idx + 68] = mem[_2112 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2180 + 68] = mem[_2180 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2180 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1557 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1557] = 26
                mem[_1557 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2111 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2111] = 26
                    mem[_2111 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2177 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2177 + idx + 68] = mem[_2111 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2177 + 68] = mem[_2177 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2177 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2176 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2176] = 26
                mem[_2176 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2249 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2249 + idx + 68] = mem[_2176 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2249 + 68] = mem[_2249 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2249 + -mem[64] + 100
            require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1432 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1432] = 26
            mem[_1432 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1443 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1443 + idx + 68] = mem[_1432 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1443 + 68] = mem[_1443 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1443 + -mem[64] + 100
            require totalAllocPoint
            _1479 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1479] = 26
            mem[_1479 + 32] = 'SafeMath: division by zero'
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1556 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1556] = 26
                mem[_1556 + 32] = 'SafeMath: division by zero'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2110 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2110] = 26
                    mem[_2110 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2173 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2173 + idx + 68] = mem[_2110 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2173 + 68] = mem[_2173 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2173 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2172 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2172] = 26
                mem[_2172 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2245 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2245 + idx + 68] = mem[_2172 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2245 + 68] = mem[_2245 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2245 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1569 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1569] = 26
            mem[_1569 + 32] = 'SafeMath: division by zero'
            if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2171 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2171] = 26
                mem[_2171 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2242 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2242 + idx + 68] = mem[_2171 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2242 + 68] = mem[_2242 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2242 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2241 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2241] = 26
            mem[_2241 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2316 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2316 + idx + 68] = mem[_2241 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2316 + 68] = mem[_2316 + 74 len 26]
            revert with memory
              from mem[64]
               len _2316 + -mem[64] + 100
        _1381 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1381] = 30
        mem[_1381 + 32] = 'SafeMath: subtraction overflow'
        if bonusEndBlock > block.number:
            _1386 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1386 + idx + 68] = mem[_1381 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1386 + 68] = mem[_1386 + 70 len 30]
            revert with memory
              from mem[64]
               len _1386 + -mem[64] + 100
        _1397 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1397] = 30
        mem[_1397 + 32] = 'SafeMath: subtraction overflow'
        if poolInfo[idx].field_512 > bonusEndBlock:
            _1405 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1405 + idx + 68] = mem[_1397 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1405 + 68] = mem[_1405 + 70 len 30]
            revert with memory
              from mem[64]
               len _1405 + -mem[64] + 100
        if not bonusEndBlock - poolInfo[idx].field_512:
            if block.number - bonusEndBlock < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not block.number - bonusEndBlock:
                _1485 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1485] = 26
                mem[_1485 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1495 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1495 + idx + 68] = mem[_1485 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1495 + 68] = mem[_1495 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1495 + -mem[64] + 100
                require totalAllocPoint
                _1535 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1535] = 26
                mem[_1535 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1599 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1599] = 26
                    mem[_1599 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2383 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2383] = 26
                        mem[_2383 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2440 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2440 + idx + 68] = mem[_2383 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2440 + 68] = mem[_2440 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2440 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2439 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2439] = 26
                    mem[_2439 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2496 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2496 + idx + 68] = mem[_2439 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2496 + 68] = mem[_2496 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2496 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1623 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1623] = 26
                mem[_1623 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2438 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2438] = 26
                    mem[_2438 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2493 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2493 + idx + 68] = mem[_2438 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2493 + 68] = mem[_2493 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2493 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2492 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2492] = 26
                mem[_2492 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2553 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2553 + idx + 68] = mem[_2492 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2553 + 68] = mem[_2553 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2553 + -mem[64] + 100
            require block.number - bonusEndBlock
            if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                _1494 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1494] = 26
                mem[_1494 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1509 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1509 + idx + 68] = mem[_1494 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1509 + 68] = mem[_1509 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1509 + -mem[64] + 100
                require totalAllocPoint
                _1555 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1555] = 26
                mem[_1555 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1622 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1622] = 26
                    mem[_1622 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2437 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2437] = 26
                        mem[_2437 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2489 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2489 + idx + 68] = mem[_2437 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2489 + 68] = mem[_2489 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2489 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2488 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2488] = 26
                    mem[_2488 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2549 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2549 + idx + 68] = mem[_2488 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2549 + 68] = mem[_2549 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2549 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1656 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1656] = 26
                mem[_1656 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2487 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2487] = 26
                    mem[_2487 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2546 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2546 + idx + 68] = mem[_2487 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2546 + 68] = mem[_2546 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2546 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2545 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2545] = 26
                mem[_2545 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2607 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2607 + idx + 68] = mem[_2545 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2607 + 68] = mem[_2607 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2607 + -mem[64] + 100
            require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1508 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1508] = 26
            mem[_1508 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1524 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1524 + idx + 68] = mem[_1508 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1524 + 68] = mem[_1524 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1524 + -mem[64] + 100
            require totalAllocPoint
            _1568 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1568] = 26
            mem[_1568 + 32] = 'SafeMath: division by zero'
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1655 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1655] = 26
                mem[_1655 + 32] = 'SafeMath: division by zero'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2486 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2486] = 26
                    mem[_2486 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2542 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2542 + idx + 68] = mem[_2486 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2542 + 68] = mem[_2542 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2542 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2541 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2541] = 26
                mem[_2541 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2603 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2603 + idx + 68] = mem[_2541 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2603 + 68] = mem[_2603 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2603 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1692 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1692] = 26
            mem[_1692 + 32] = 'SafeMath: division by zero'
            if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2540 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2540] = 26
                mem[_2540 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2600 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2600 + idx + 68] = mem[_2540 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2600 + 68] = mem[_2600 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2600 + -mem[64] + 100
            require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2599 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2599] = 26
            mem[_2599 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2657 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2657 + idx + 68] = mem[_2599 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2657 + 68] = mem[_2657 + 74 len 26]
            revert with memory
              from mem[64]
               len _2657 + -mem[64] + 100
        require bonusEndBlock - poolInfo[idx].field_512
        if bonusEndBlock - poolInfo[idx].field_512 / bonusEndBlock - poolInfo[idx].field_512 != 1:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if block.number < bonusEndBlock:
            revert with 0, 'SafeMath: addition overflow'
        if not -poolInfo[idx].field_512 + block.number:
            _1493 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1493] = 26
            mem[_1493 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1505 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1505 + idx + 68] = mem[_1493 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1505 + 68] = mem[_1505 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1505 + -mem[64] + 100
            require totalAllocPoint
            _1552 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1552] = 26
            mem[_1552 + 32] = 'SafeMath: division by zero'
            if not 0 / totalAllocPoint / 100:
                _1621 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1621] = 26
                mem[_1621 + 32] = 'SafeMath: division by zero'
                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2436 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2436] = 26
                    mem[_2436 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2483 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2483 + idx + 68] = mem[_2436 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2483 + 68] = mem[_2483 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2483 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2482 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2482] = 26
                mem[_2482 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2536 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2536 + idx + 68] = mem[_2482 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2536 + 68] = mem[_2536 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2536 + -mem[64] + 100
            require 0 / totalAllocPoint / 100
            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1654 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1654] = 26
            mem[_1654 + 32] = 'SafeMath: division by zero'
            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * 0 / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, 0 / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = 0 / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), 0 / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / totalAllocPoint:
                _2481 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2481] = 26
                mem[_2481 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2533 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2533 + idx + 68] = mem[_2481 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2533 + 68] = mem[_2533 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2533 + -mem[64] + 100
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2532 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2532] = 26
            mem[_2532 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2593 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2593 + idx + 68] = mem[_2532 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2593 + 68] = mem[_2593 + 74 len 26]
            revert with memory
              from mem[64]
               len _2593 + -mem[64] + 100
        require -poolInfo[idx].field_512 + block.number
        if (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[idx].field_512 + block.number != rewardPerBlock:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
            _1504 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1504] = 26
            mem[_1504 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1520 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1520 + idx + 68] = mem[_1504 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1520 + 68] = mem[_1520 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1520 + -mem[64] + 100
            require totalAllocPoint
            _1567 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1567] = 26
            mem[_1567 + 32] = 'SafeMath: division by zero'
            if not 0 / totalAllocPoint / 100:
                _1653 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1653] = 26
                mem[_1653 + 32] = 'SafeMath: division by zero'
                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2480 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2480] = 26
                    mem[_2480 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2529 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2529 + idx + 68] = mem[_2480 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2529 + 68] = mem[_2529 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2529 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2528 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2528] = 26
                mem[_2528 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2589 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2589 + idx + 68] = mem[_2528 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2589 + 68] = mem[_2589 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2589 + -mem[64] + 100
            require 0 / totalAllocPoint / 100
            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1691 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1691] = 26
            mem[_1691 + 32] = 'SafeMath: division by zero'
            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * 0 / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, 0 / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = 0 / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), 0 / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / totalAllocPoint:
                _2527 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2527] = 26
                mem[_2527 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2586 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2586 + idx + 68] = mem[_2527 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2586 + 68] = mem[_2586 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2586 + -mem[64] + 100
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2585 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2585] = 26
            mem[_2585 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2648 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2648 + idx + 68] = mem[_2585 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2648 + 68] = mem[_2648 + 74 len 26]
            revert with memory
              from mem[64]
               len _2648 + -mem[64] + 100
        require (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
        if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[idx].field_256:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _1519 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1519] = 26
        mem[_1519 + 32] = 'SafeMath: division by zero'
        if totalAllocPoint <= 0:
            _1540 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_1540 + idx + 68] = mem[_1519 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1540 + 68] = mem[_1540 + 74 len 26]
            revert with memory
              from mem[64]
               len _1540 + -mem[64] + 100
        require totalAllocPoint
        _1577 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1577] = 26
        mem[_1577 + 32] = 'SafeMath: division by zero'
        if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
            _1690 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1690] = 26
            mem[_1690 + 32] = 'SafeMath: division by zero'
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2526 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2526] = 26
                mem[_2526 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2582 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2582 + idx + 68] = mem[_2526 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2582 + 68] = mem[_2582 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2582 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2581 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2581] = 26
            mem[_2581 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2644 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2644 + idx + 68] = mem[_2581 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2644 + 68] = mem[_2644 + 74 len 26]
            revert with memory
              from mem[64]
               len _2644 + -mem[64] + 100
        require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
        if 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _1729 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1729] = 26
        mem[_1729 + 32] = 'SafeMath: division by zero'
        if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
            revert with 0, 'SafeMath: addition overflow'
        require ext_code.size(sub_a7b160cbAddress)
        staticcall sub_a7b160cbAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
            revert with 0, 'Balance is not enough'
        require ext_code.size(sub_a7b160cbAddress)
        call sub_a7b160cbAddress.0xa9059cbb with:
             gas gas_remaining wei
            args devAddr, 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_a7b160cbAddress)
        call sub_a7b160cbAddress.0xa9059cbb with:
             gas gas_remaining wei
            args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[mem[64] + 4] = this.address
        mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
        require ext_code.size(sub_a7b160cbAddress)
        call sub_a7b160cbAddress.0xa9059cbb with:
             gas gas_remaining wei
            args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
            _2580 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2580] = 26
            mem[_2580 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2641 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2641 + idx + 68] = mem[_2580 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2641 + 68] = mem[_2641 + 74 len 26]
            revert with memory
              from mem[64]
               len _2641 + -mem[64] + 100
        require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
        if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _2640 = mem[64]
        mem[64] = mem[64] + 64
        mem[_2640] = 26
        mem[_2640 + 32] = 'SafeMath: division by zero'
        if ext_call.return_data[0] > 0:
            require ext_call.return_data[0]
            if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                revert with 0, 'SafeMath: addition overflow'
            poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
            poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
        _2695 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[_2695 + idx + 68] = mem[_2640 + idx + 32]
            idx = idx + 32
            continue 
        mem[_2695 + 68] = mem[_2695 + 74 len 26]
        revert with memory
          from mem[64]
           len _2695 + -mem[64] + 100
}

function updateRewardPerBlock(uint256 arg1, bool arg2) payable {
    mem[64] = 96
    require calldata.size - 4 >= 64
    require msg.sender == devAddr
    rewardPerBlock = arg1
    if arg2:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 6
            if block.number <= poolInfo[idx].field_512:
                idx = idx + 1
                continue 
            mem[mem[64] + 4] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            if block.number <= bonusEndBlock:
                _1380 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1380] = 30
                mem[_1380 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1383 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1383 + idx + 68] = mem[_1380 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1383 + 68] = mem[_1383 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1383 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1431 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1431] = 26
                    mem[_1431 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1440 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1440 + idx + 68] = mem[_1431 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1440 + 68] = mem[_1440 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1440 + -mem[64] + 100
                    require totalAllocPoint
                    _1478 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1478] = 26
                    mem[_1478 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1549 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1549] = 26
                        mem[_1549 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2093 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2093] = 26
                            mem[_2093 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2154 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2154 + idx + 68] = mem[_2093 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2154 + 68] = mem[_2154 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2154 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2153 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2153] = 26
                        mem[_2153 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2228 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2228 + idx + 68] = mem[_2153 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2228 + 68] = mem[_2228 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2228 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1564 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1564] = 26
                    mem[_1564 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2152 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2152] = 26
                        mem[_2152 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2225 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2225 + idx + 68] = mem[_2152 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2225 + 68] = mem[_2225 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2225 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2224 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2224] = 26
                    mem[_2224 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2305 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2305 + idx + 68] = mem[_2224 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2305 + 68] = mem[_2305 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2305 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if block.number - poolInfo[idx].field_512 / block.number - poolInfo[idx].field_512 != 1:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not block.number - poolInfo[idx].field_512:
                    _1439 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1439] = 26
                    mem[_1439 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1456 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1456 + idx + 68] = mem[_1439 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1456 + 68] = mem[_1456 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1456 + -mem[64] + 100
                    require totalAllocPoint
                    _1488 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1488] = 26
                    mem[_1488 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1563 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1563] = 26
                        mem[_1563 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2151 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2151] = 26
                            mem[_2151 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2221 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2221 + idx + 68] = mem[_2151 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2221 + 68] = mem[_2221 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2221 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2220 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2220] = 26
                        mem[_2220 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2301 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2301 + idx + 68] = mem[_2220 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2301 + 68] = mem[_2301 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2301 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1576 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1576] = 26
                    mem[_1576 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2219 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2219] = 26
                        mem[_2219 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2298 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2298 + idx + 68] = mem[_2219 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2298 + 68] = mem[_2298 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2298 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2297 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2297] = 26
                    mem[_2297 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2371 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2371 + idx + 68] = mem[_2297 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2371 + 68] = mem[_2371 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2371 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1455 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1455] = 26
                    mem[_1455 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1470 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1470 + idx + 68] = mem[_1455 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1470 + 68] = mem[_1470 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1470 + -mem[64] + 100
                    require totalAllocPoint
                    _1500 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1500] = 26
                    mem[_1500 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1575 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1575] = 26
                        mem[_1575 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2218 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2218] = 26
                            mem[_2218 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2294 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2294 + idx + 68] = mem[_2218 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2294 + 68] = mem[_2294 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2294 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2293 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2293] = 26
                        mem[_2293 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2367 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2367 + idx + 68] = mem[_2293 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2367 + 68] = mem[_2367 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2367 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1585 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1585] = 26
                    mem[_1585 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2292 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2292] = 26
                        mem[_2292 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2364 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2364 + idx + 68] = mem[_2292 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2364 + 68] = mem[_2364 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2364 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2363 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2363] = 26
                    mem[_2363 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2425 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2425 + idx + 68] = mem[_2363 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2425 + 68] = mem[_2425 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2425 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1469 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1469] = 26
                mem[_1469 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1480 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1480 + idx + 68] = mem[_1469 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1480 + 68] = mem[_1480 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1480 + -mem[64] + 100
                require totalAllocPoint
                _1515 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1515] = 26
                mem[_1515 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1584 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1584] = 26
                    mem[_1584 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2291 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2291] = 26
                        mem[_2291 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2360 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2360 + idx + 68] = mem[_2291 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2360 + 68] = mem[_2360 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2360 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2359 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2359] = 26
                    mem[_2359 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2421 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2421 + idx + 68] = mem[_2359 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2421 + 68] = mem[_2421 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2421 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1598 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1598] = 26
                mem[_1598 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2358 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2358] = 26
                    mem[_2358 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2418 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2418 + idx + 68] = mem[_2358 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2418 + 68] = mem[_2418 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2418 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2417 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2417] = 26
                mem[_2417 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2470 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2470 + idx + 68] = mem[_2417 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2470 + 68] = mem[_2470 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2470 + -mem[64] + 100
            if poolInfo[idx].field_512 >= bonusEndBlock:
                _1382 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1382] = 30
                mem[_1382 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1389 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1389 + idx + 68] = mem[_1382 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1389 + 68] = mem[_1389 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1389 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1420 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1420] = 26
                    mem[_1420 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1428 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1428 + idx + 68] = mem[_1420 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1428 + 68] = mem[_1428 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1428 + -mem[64] + 100
                    require totalAllocPoint
                    _1454 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1454] = 26
                    mem[_1454 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1518 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1518] = 26
                        mem[_1518 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2001 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2001] = 26
                            mem[_2001 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2057 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2057 + idx + 68] = mem[_2001 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2057 + 68] = mem[_2057 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2057 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2056 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2056] = 26
                        mem[_2056 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2120 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2120 + idx + 68] = mem[_2056 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2120 + 68] = mem[_2120 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2120 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1537 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1537] = 26
                    mem[_1537 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2055 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2055] = 26
                        mem[_2055 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2117 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2117 + idx + 68] = mem[_2055 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2117 + 68] = mem[_2117 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2117 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2116 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2116] = 26
                    mem[_2116 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2184 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2184 + idx + 68] = mem[_2116 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2184 + 68] = mem[_2184 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2184 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1427 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1427] = 26
                    mem[_1427 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1433 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1433 + idx + 68] = mem[_1427 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1433 + 68] = mem[_1433 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1433 + -mem[64] + 100
                    require totalAllocPoint
                    _1468 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1468] = 26
                    mem[_1468 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1536 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1536] = 26
                        mem[_1536 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2054 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2054] = 26
                            mem[_2054 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2113 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2113 + idx + 68] = mem[_2054 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2113 + 68] = mem[_2113 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2113 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2112 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2112] = 26
                        mem[_2112 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2180 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2180 + idx + 68] = mem[_2112 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2180 + 68] = mem[_2180 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2180 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1557 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1557] = 26
                    mem[_1557 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2111 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2111] = 26
                        mem[_2111 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2177 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2177 + idx + 68] = mem[_2111 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2177 + 68] = mem[_2177 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2177 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2176 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2176] = 26
                    mem[_2176 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2249 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2249 + idx + 68] = mem[_2176 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2249 + 68] = mem[_2249 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2249 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1432 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1432] = 26
                mem[_1432 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1443 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1443 + idx + 68] = mem[_1432 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1443 + 68] = mem[_1443 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1443 + -mem[64] + 100
                require totalAllocPoint
                _1479 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1479] = 26
                mem[_1479 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1556 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1556] = 26
                    mem[_1556 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2110 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2110] = 26
                        mem[_2110 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2173 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2173 + idx + 68] = mem[_2110 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2173 + 68] = mem[_2173 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2173 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2172 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2172] = 26
                    mem[_2172 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2245 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2245 + idx + 68] = mem[_2172 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2245 + 68] = mem[_2245 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2245 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1569 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1569] = 26
                mem[_1569 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2171 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2171] = 26
                    mem[_2171 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2242 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2242 + idx + 68] = mem[_2171 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2242 + 68] = mem[_2242 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2242 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2241 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2241] = 26
                mem[_2241 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2316 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2316 + idx + 68] = mem[_2241 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2316 + 68] = mem[_2316 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2316 + -mem[64] + 100
            _1381 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1381] = 30
            mem[_1381 + 32] = 'SafeMath: subtraction overflow'
            if bonusEndBlock > block.number:
                _1386 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1386 + idx + 68] = mem[_1381 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1386 + 68] = mem[_1386 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1386 + -mem[64] + 100
            _1397 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1397] = 30
            mem[_1397 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > bonusEndBlock:
                _1405 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1405 + idx + 68] = mem[_1397 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1405 + 68] = mem[_1405 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1405 + -mem[64] + 100
            if not bonusEndBlock - poolInfo[idx].field_512:
                if block.number - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not block.number - bonusEndBlock:
                    _1485 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1485] = 26
                    mem[_1485 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1495 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1495 + idx + 68] = mem[_1485 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1495 + 68] = mem[_1495 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1495 + -mem[64] + 100
                    require totalAllocPoint
                    _1535 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1535] = 26
                    mem[_1535 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1599 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1599] = 26
                        mem[_1599 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2383 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2383] = 26
                            mem[_2383 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2440 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2440 + idx + 68] = mem[_2383 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2440 + 68] = mem[_2440 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2440 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2439 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2439] = 26
                        mem[_2439 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2496 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2496 + idx + 68] = mem[_2439 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2496 + 68] = mem[_2496 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2496 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1623 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1623] = 26
                    mem[_1623 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2438 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2438] = 26
                        mem[_2438 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2493 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2493 + idx + 68] = mem[_2438 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2493 + 68] = mem[_2493 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2493 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2492 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2492] = 26
                    mem[_2492 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2553 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2553 + idx + 68] = mem[_2492 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2553 + 68] = mem[_2553 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2553 + -mem[64] + 100
                require block.number - bonusEndBlock
                if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                    _1494 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1494] = 26
                    mem[_1494 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1509 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1509 + idx + 68] = mem[_1494 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1509 + 68] = mem[_1509 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1509 + -mem[64] + 100
                    require totalAllocPoint
                    _1555 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1555] = 26
                    mem[_1555 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1622 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1622] = 26
                        mem[_1622 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2437 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2437] = 26
                            mem[_2437 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2489 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2489 + idx + 68] = mem[_2437 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2489 + 68] = mem[_2489 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2489 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2488 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2488] = 26
                        mem[_2488 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2549 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2549 + idx + 68] = mem[_2488 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2549 + 68] = mem[_2549 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2549 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1656 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1656] = 26
                    mem[_1656 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2487 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2487] = 26
                        mem[_2487 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2546 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2546 + idx + 68] = mem[_2487 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2546 + 68] = mem[_2546 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2546 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2545 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2545] = 26
                    mem[_2545 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2607 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2607 + idx + 68] = mem[_2545 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2607 + 68] = mem[_2607 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2607 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1508 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1508] = 26
                mem[_1508 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1524 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1524 + idx + 68] = mem[_1508 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1524 + 68] = mem[_1524 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1524 + -mem[64] + 100
                require totalAllocPoint
                _1568 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1568] = 26
                mem[_1568 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1655 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1655] = 26
                    mem[_1655 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2486 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2486] = 26
                        mem[_2486 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2542 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2542 + idx + 68] = mem[_2486 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2542 + 68] = mem[_2542 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2542 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2541 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2541] = 26
                    mem[_2541 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2603 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2603 + idx + 68] = mem[_2541 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2603 + 68] = mem[_2603 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2603 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1692 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1692] = 26
                mem[_1692 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2540 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2540] = 26
                    mem[_2540 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2600 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2600 + idx + 68] = mem[_2540 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2600 + 68] = mem[_2600 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2600 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2599 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2599] = 26
                mem[_2599 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2657 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2657 + idx + 68] = mem[_2599 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2657 + 68] = mem[_2657 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2657 + -mem[64] + 100
            require bonusEndBlock - poolInfo[idx].field_512
            if bonusEndBlock - poolInfo[idx].field_512 / bonusEndBlock - poolInfo[idx].field_512 != 1:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if block.number < bonusEndBlock:
                revert with 0, 'SafeMath: addition overflow'
            if not -poolInfo[idx].field_512 + block.number:
                _1493 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1493] = 26
                mem[_1493 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1505 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1505 + idx + 68] = mem[_1493 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1505 + 68] = mem[_1505 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1505 + -mem[64] + 100
                require totalAllocPoint
                _1552 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1552] = 26
                mem[_1552 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1621 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1621] = 26
                    mem[_1621 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2436 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2436] = 26
                        mem[_2436 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2483 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2483 + idx + 68] = mem[_2436 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2483 + 68] = mem[_2483 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2483 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2482 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2482] = 26
                    mem[_2482 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2536 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2536 + idx + 68] = mem[_2482 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2536 + 68] = mem[_2536 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2536 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1654 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1654] = 26
                mem[_1654 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2481 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2481] = 26
                    mem[_2481 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2533 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2533 + idx + 68] = mem[_2481 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2533 + 68] = mem[_2533 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2533 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2532 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2532] = 26
                mem[_2532 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2593 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2593 + idx + 68] = mem[_2532 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2593 + 68] = mem[_2593 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2593 + -mem[64] + 100
            require -poolInfo[idx].field_512 + block.number
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[idx].field_512 + block.number != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
                _1504 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1504] = 26
                mem[_1504 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1520 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1520 + idx + 68] = mem[_1504 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1520 + 68] = mem[_1520 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1520 + -mem[64] + 100
                require totalAllocPoint
                _1567 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1567] = 26
                mem[_1567 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1653 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1653] = 26
                    mem[_1653 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2480 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2480] = 26
                        mem[_2480 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2529 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2529 + idx + 68] = mem[_2480 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2529 + 68] = mem[_2529 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2529 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2528 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2528] = 26
                    mem[_2528 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2589 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2589 + idx + 68] = mem[_2528 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2589 + 68] = mem[_2589 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2589 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1691 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1691] = 26
                mem[_1691 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2527 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2527] = 26
                    mem[_2527 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2586 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2586 + idx + 68] = mem[_2527 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2586 + 68] = mem[_2586 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2586 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2585 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2585] = 26
                mem[_2585 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2648 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2648 + idx + 68] = mem[_2585 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2648 + 68] = mem[_2648 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2648 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1519 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1519] = 26
            mem[_1519 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1540 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1540 + idx + 68] = mem[_1519 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1540 + 68] = mem[_1540 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1540 + -mem[64] + 100
            require totalAllocPoint
            _1577 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1577] = 26
            mem[_1577 + 32] = 'SafeMath: division by zero'
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1690 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1690] = 26
                mem[_1690 + 32] = 'SafeMath: division by zero'
                if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2526 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2526] = 26
                    mem[_2526 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2582 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2582 + idx + 68] = mem[_2526 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2582 + 68] = mem[_2582 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2582 + -mem[64] + 100
                require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2581 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2581] = 26
                mem[_2581 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2644 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2644 + idx + 68] = mem[_2581 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2644 + 68] = mem[_2644 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2644 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1729 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1729] = 26
            mem[_1729 + 32] = 'SafeMath: division by zero'
            if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2580 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2580] = 26
                mem[_2580 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2641 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2641 + idx + 68] = mem[_2580 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2641 + 68] = mem[_2641 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2641 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2640 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2640] = 26
            mem[_2640 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2695 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2695 + idx + 68] = mem[_2640 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2695 + 68] = mem[_2695 + 74 len 26]
            revert with memory
              from mem[64]
               len _2695 + -mem[64] + 100
}

function set(uint256 arg1, uint256 arg2, bool arg3) payable {
    mem[64] = 96
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 6
            if block.number <= poolInfo[idx].field_512:
                idx = idx + 1
                continue 
            mem[mem[64] + 4] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            if block.number <= bonusEndBlock:
                _1421 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1421] = 30
                mem[_1421 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1425 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1425 + idx + 68] = mem[_1421 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1425 + 68] = mem[_1425 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1425 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1473 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1473] = 26
                    mem[_1473 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1482 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1482 + idx + 68] = mem[_1473 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1482 + 68] = mem[_1482 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1482 + -mem[64] + 100
                    require totalAllocPoint
                    _1520 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1520] = 26
                    mem[_1520 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1591 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1591] = 26
                        mem[_1591 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2135 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2135] = 26
                            mem[_2135 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2196 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2196 + idx + 68] = mem[_2135 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2196 + 68] = mem[_2196 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2196 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2195 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2195] = 26
                        mem[_2195 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2270 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2270 + idx + 68] = mem[_2195 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2270 + 68] = mem[_2270 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2270 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1606 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1606] = 26
                    mem[_1606 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2194 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2194] = 26
                        mem[_2194 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2267 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2267 + idx + 68] = mem[_2194 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2267 + 68] = mem[_2267 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2267 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2266 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2266] = 26
                    mem[_2266 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2347 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2347 + idx + 68] = mem[_2266 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2347 + 68] = mem[_2347 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2347 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if block.number - poolInfo[idx].field_512 / block.number - poolInfo[idx].field_512 != 1:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not block.number - poolInfo[idx].field_512:
                    _1481 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1481] = 26
                    mem[_1481 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1498 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1498 + idx + 68] = mem[_1481 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1498 + 68] = mem[_1498 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1498 + -mem[64] + 100
                    require totalAllocPoint
                    _1530 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1530] = 26
                    mem[_1530 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1605 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1605] = 26
                        mem[_1605 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2193 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2193] = 26
                            mem[_2193 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2263 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2263 + idx + 68] = mem[_2193 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2263 + 68] = mem[_2263 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2263 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2262 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2262] = 26
                        mem[_2262 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2343 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2343 + idx + 68] = mem[_2262 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2343 + 68] = mem[_2343 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2343 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1618 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1618] = 26
                    mem[_1618 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2261 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2261] = 26
                        mem[_2261 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2340 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2340 + idx + 68] = mem[_2261 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2340 + 68] = mem[_2340 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2340 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2339 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2339] = 26
                    mem[_2339 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2413 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2413 + idx + 68] = mem[_2339 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2413 + 68] = mem[_2413 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2413 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1497 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1497] = 26
                    mem[_1497 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1512 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1512 + idx + 68] = mem[_1497 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1512 + 68] = mem[_1512 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1512 + -mem[64] + 100
                    require totalAllocPoint
                    _1542 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1542] = 26
                    mem[_1542 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1617 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1617] = 26
                        mem[_1617 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2260 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2260] = 26
                            mem[_2260 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2336 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2336 + idx + 68] = mem[_2260 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2336 + 68] = mem[_2336 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2336 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2335 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2335] = 26
                        mem[_2335 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2409 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2409 + idx + 68] = mem[_2335 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2409 + 68] = mem[_2409 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2409 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1627 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1627] = 26
                    mem[_1627 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2334 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2334] = 26
                        mem[_2334 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2406 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2406 + idx + 68] = mem[_2334 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2406 + 68] = mem[_2406 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2406 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2405 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2405] = 26
                    mem[_2405 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2467 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2467 + idx + 68] = mem[_2405 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2467 + 68] = mem[_2467 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2467 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1511 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1511] = 26
                mem[_1511 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1522 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1522 + idx + 68] = mem[_1511 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1522 + 68] = mem[_1522 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1522 + -mem[64] + 100
                require totalAllocPoint
                _1557 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1557] = 26
                mem[_1557 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1626 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1626] = 26
                    mem[_1626 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2333 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2333] = 26
                        mem[_2333 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2402 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2402 + idx + 68] = mem[_2333 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2402 + 68] = mem[_2402 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2402 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2401 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2401] = 26
                    mem[_2401 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2463 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2463 + idx + 68] = mem[_2401 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2463 + 68] = mem[_2463 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2463 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1640 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1640] = 26
                mem[_1640 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2400 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2400] = 26
                    mem[_2400 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2460 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2460 + idx + 68] = mem[_2400 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2460 + 68] = mem[_2460 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2460 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2459 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2459] = 26
                mem[_2459 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2512 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2512 + idx + 68] = mem[_2459 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2512 + 68] = mem[_2512 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2512 + -mem[64] + 100
            if poolInfo[idx].field_512 >= bonusEndBlock:
                _1423 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1423] = 30
                mem[_1423 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1431 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1431 + idx + 68] = mem[_1423 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1431 + 68] = mem[_1431 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1431 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1462 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1462] = 26
                    mem[_1462 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1470 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1470 + idx + 68] = mem[_1462 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1470 + 68] = mem[_1470 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1470 + -mem[64] + 100
                    require totalAllocPoint
                    _1496 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1496] = 26
                    mem[_1496 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1560 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1560] = 26
                        mem[_1560 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2043 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2043] = 26
                            mem[_2043 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2099 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2099 + idx + 68] = mem[_2043 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2099 + 68] = mem[_2099 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2099 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2098 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2098] = 26
                        mem[_2098 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2162 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2162 + idx + 68] = mem[_2098 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2162 + 68] = mem[_2162 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2162 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1579 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1579] = 26
                    mem[_1579 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2097 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2097] = 26
                        mem[_2097 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2159 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2159 + idx + 68] = mem[_2097 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2159 + 68] = mem[_2159 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2159 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2158 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2158] = 26
                    mem[_2158 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2226 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2226 + idx + 68] = mem[_2158 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2226 + 68] = mem[_2226 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2226 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1469 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1469] = 26
                    mem[_1469 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1475 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1475 + idx + 68] = mem[_1469 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1475 + 68] = mem[_1475 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1475 + -mem[64] + 100
                    require totalAllocPoint
                    _1510 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1510] = 26
                    mem[_1510 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1578 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1578] = 26
                        mem[_1578 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2096 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2096] = 26
                            mem[_2096 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2155 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2155 + idx + 68] = mem[_2096 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2155 + 68] = mem[_2155 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2155 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2154 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2154] = 26
                        mem[_2154 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2222 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2222 + idx + 68] = mem[_2154 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2222 + 68] = mem[_2222 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2222 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1599 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1599] = 26
                    mem[_1599 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2153 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2153] = 26
                        mem[_2153 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2219 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2219 + idx + 68] = mem[_2153 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2219 + 68] = mem[_2219 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2219 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2218 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2218] = 26
                    mem[_2218 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2291 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2291 + idx + 68] = mem[_2218 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2291 + 68] = mem[_2291 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2291 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1474 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1474] = 26
                mem[_1474 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1485 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1485 + idx + 68] = mem[_1474 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1485 + 68] = mem[_1485 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1485 + -mem[64] + 100
                require totalAllocPoint
                _1521 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1521] = 26
                mem[_1521 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1598 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1598] = 26
                    mem[_1598 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2152 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2152] = 26
                        mem[_2152 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2215 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2215 + idx + 68] = mem[_2152 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2215 + 68] = mem[_2215 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2215 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2214 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2214] = 26
                    mem[_2214 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2287 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2287 + idx + 68] = mem[_2214 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2287 + 68] = mem[_2287 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2287 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1611 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1611] = 26
                mem[_1611 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2213 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2213] = 26
                    mem[_2213 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2284 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2284 + idx + 68] = mem[_2213 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2284 + 68] = mem[_2284 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2284 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2283 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2283] = 26
                mem[_2283 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2358 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2358 + idx + 68] = mem[_2283 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2358 + 68] = mem[_2358 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2358 + -mem[64] + 100
            _1422 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1422] = 30
            mem[_1422 + 32] = 'SafeMath: subtraction overflow'
            if bonusEndBlock > block.number:
                _1428 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1428 + idx + 68] = mem[_1422 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1428 + 68] = mem[_1428 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1428 + -mem[64] + 100
            _1439 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1439] = 30
            mem[_1439 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > bonusEndBlock:
                _1447 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1447 + idx + 68] = mem[_1439 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1447 + 68] = mem[_1447 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1447 + -mem[64] + 100
            if not bonusEndBlock - poolInfo[idx].field_512:
                if block.number - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not block.number - bonusEndBlock:
                    _1527 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1527] = 26
                    mem[_1527 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1537 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1537 + idx + 68] = mem[_1527 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1537 + 68] = mem[_1537 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1537 + -mem[64] + 100
                    require totalAllocPoint
                    _1577 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1577] = 26
                    mem[_1577 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1641 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1641] = 26
                        mem[_1641 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2425 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2425] = 26
                            mem[_2425 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2482 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2482 + idx + 68] = mem[_2425 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2482 + 68] = mem[_2482 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2482 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2481 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2481] = 26
                        mem[_2481 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2538 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2538 + idx + 68] = mem[_2481 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2538 + 68] = mem[_2538 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2538 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1665 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1665] = 26
                    mem[_1665 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2480 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2480] = 26
                        mem[_2480 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2535 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2535 + idx + 68] = mem[_2480 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2535 + 68] = mem[_2535 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2535 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2534 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2534] = 26
                    mem[_2534 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2595 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2595 + idx + 68] = mem[_2534 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2595 + 68] = mem[_2595 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2595 + -mem[64] + 100
                require block.number - bonusEndBlock
                if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                    _1536 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1536] = 26
                    mem[_1536 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1551 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1551 + idx + 68] = mem[_1536 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1551 + 68] = mem[_1551 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1551 + -mem[64] + 100
                    require totalAllocPoint
                    _1597 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1597] = 26
                    mem[_1597 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1664 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1664] = 26
                        mem[_1664 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2479 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2479] = 26
                            mem[_2479 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2531 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2531 + idx + 68] = mem[_2479 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2531 + 68] = mem[_2531 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2531 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2530 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2530] = 26
                        mem[_2530 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2591 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2591 + idx + 68] = mem[_2530 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2591 + 68] = mem[_2591 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2591 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1698 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1698] = 26
                    mem[_1698 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2529 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2529] = 26
                        mem[_2529 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2588 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2588 + idx + 68] = mem[_2529 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2588 + 68] = mem[_2588 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2588 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2587 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2587] = 26
                    mem[_2587 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2649 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2649 + idx + 68] = mem[_2587 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2649 + 68] = mem[_2649 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2649 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1550 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1550] = 26
                mem[_1550 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1566 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1566 + idx + 68] = mem[_1550 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1566 + 68] = mem[_1566 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1566 + -mem[64] + 100
                require totalAllocPoint
                _1610 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1610] = 26
                mem[_1610 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1697 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1697] = 26
                    mem[_1697 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2528 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2528] = 26
                        mem[_2528 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2584 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2584 + idx + 68] = mem[_2528 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2584 + 68] = mem[_2584 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2584 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2583 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2583] = 26
                    mem[_2583 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2645 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2645 + idx + 68] = mem[_2583 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2645 + 68] = mem[_2645 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2645 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1734 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1734] = 26
                mem[_1734 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2582 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2582] = 26
                    mem[_2582 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2642 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2642 + idx + 68] = mem[_2582 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2642 + 68] = mem[_2642 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2642 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2641 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2641] = 26
                mem[_2641 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2699 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2699 + idx + 68] = mem[_2641 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2699 + 68] = mem[_2699 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2699 + -mem[64] + 100
            require bonusEndBlock - poolInfo[idx].field_512
            if bonusEndBlock - poolInfo[idx].field_512 / bonusEndBlock - poolInfo[idx].field_512 != 1:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if block.number < bonusEndBlock:
                revert with 0, 'SafeMath: addition overflow'
            if not -poolInfo[idx].field_512 + block.number:
                _1535 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1535] = 26
                mem[_1535 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1547 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1547 + idx + 68] = mem[_1535 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1547 + 68] = mem[_1547 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1547 + -mem[64] + 100
                require totalAllocPoint
                _1594 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1594] = 26
                mem[_1594 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1663 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1663] = 26
                    mem[_1663 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2478 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2478] = 26
                        mem[_2478 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2525 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2525 + idx + 68] = mem[_2478 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2525 + 68] = mem[_2525 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2525 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2524 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2524] = 26
                    mem[_2524 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2578 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2578 + idx + 68] = mem[_2524 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2578 + 68] = mem[_2578 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2578 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1696 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1696] = 26
                mem[_1696 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2523 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2523] = 26
                    mem[_2523 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2575 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2575 + idx + 68] = mem[_2523 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2575 + 68] = mem[_2575 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2575 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2574 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2574] = 26
                mem[_2574 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2635 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2635 + idx + 68] = mem[_2574 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2635 + 68] = mem[_2635 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2635 + -mem[64] + 100
            require -poolInfo[idx].field_512 + block.number
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[idx].field_512 + block.number != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
                _1546 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1546] = 26
                mem[_1546 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1562 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1562 + idx + 68] = mem[_1546 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1562 + 68] = mem[_1562 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1562 + -mem[64] + 100
                require totalAllocPoint
                _1609 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1609] = 26
                mem[_1609 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1695 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1695] = 26
                    mem[_1695 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2522 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2522] = 26
                        mem[_2522 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2571 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2571 + idx + 68] = mem[_2522 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2571 + 68] = mem[_2571 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2571 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2570 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2570] = 26
                    mem[_2570 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2631 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2631 + idx + 68] = mem[_2570 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2631 + 68] = mem[_2631 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2631 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1733 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1733] = 26
                mem[_1733 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2569 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2569] = 26
                    mem[_2569 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2628 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2628 + idx + 68] = mem[_2569 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2628 + 68] = mem[_2628 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2628 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2627 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2627] = 26
                mem[_2627 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2690 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2690 + idx + 68] = mem[_2627 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2690 + 68] = mem[_2690 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2690 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1561 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1561] = 26
            mem[_1561 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1582 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1582 + idx + 68] = mem[_1561 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1582 + 68] = mem[_1582 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1582 + -mem[64] + 100
            require totalAllocPoint
            _1619 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1619] = 26
            mem[_1619 + 32] = 'SafeMath: division by zero'
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1732 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1732] = 26
                mem[_1732 + 32] = 'SafeMath: division by zero'
                if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2568 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2568] = 26
                    mem[_2568 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2624 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2624 + idx + 68] = mem[_2568 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2624 + 68] = mem[_2624 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2624 + -mem[64] + 100
                require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2623 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2623] = 26
                mem[_2623 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2686 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2686 + idx + 68] = mem[_2623 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2686 + 68] = mem[_2686 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2686 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1771 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1771] = 26
            mem[_1771 + 32] = 'SafeMath: division by zero'
            if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2622 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2622] = 26
                mem[_2622 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2683 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2683 + idx + 68] = mem[_2622 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2683 + 68] = mem[_2683 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2683 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2682 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2682] = 26
            mem[_2682 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2737 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2737 + idx + 68] = mem[_2682 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2737 + 68] = mem[_2737 + 74 len 26]
            revert with memory
              from mem[64]
               len _2737 + -mem[64] + 100
    require arg1 < poolInfo.length
    if poolInfo[arg1].field_256 > totalAllocPoint:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint = totalAllocPoint - poolInfo[arg1].field_256 + arg2
    require arg1 < poolInfo.length
    poolInfo[arg1].field_256 = arg2
}

function add(uint256 arg1, address arg2, bool arg3) payable {
    mem[64] = 96
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 6
            if block.number <= poolInfo[idx].field_512:
                idx = idx + 1
                continue 
            mem[mem[64] + 4] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            if block.number <= bonusEndBlock:
                _1430 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1430] = 30
                mem[_1430 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1433 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1433 + idx + 68] = mem[_1430 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1433 + 68] = mem[_1433 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1433 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1481 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1481] = 26
                    mem[_1481 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1490 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1490 + idx + 68] = mem[_1481 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1490 + 68] = mem[_1490 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1490 + -mem[64] + 100
                    require totalAllocPoint
                    _1528 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1528] = 26
                    mem[_1528 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1599 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1599] = 26
                        mem[_1599 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2143 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2143] = 26
                            mem[_2143 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2204 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2204 + idx + 68] = mem[_2143 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2204 + 68] = mem[_2204 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2204 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2203 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2203] = 26
                        mem[_2203 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2278 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2278 + idx + 68] = mem[_2203 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2278 + 68] = mem[_2278 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2278 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1614 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1614] = 26
                    mem[_1614 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2202 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2202] = 26
                        mem[_2202 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2275 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2275 + idx + 68] = mem[_2202 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2275 + 68] = mem[_2275 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2275 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2274 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2274] = 26
                    mem[_2274 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2355 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2355 + idx + 68] = mem[_2274 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2355 + 68] = mem[_2355 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2355 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if block.number - poolInfo[idx].field_512 / block.number - poolInfo[idx].field_512 != 1:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not block.number - poolInfo[idx].field_512:
                    _1489 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1489] = 26
                    mem[_1489 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1506 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1506 + idx + 68] = mem[_1489 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1506 + 68] = mem[_1506 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1506 + -mem[64] + 100
                    require totalAllocPoint
                    _1538 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1538] = 26
                    mem[_1538 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1613 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1613] = 26
                        mem[_1613 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2201 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2201] = 26
                            mem[_2201 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2271 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2271 + idx + 68] = mem[_2201 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2271 + 68] = mem[_2271 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2271 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2270 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2270] = 26
                        mem[_2270 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2351 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2351 + idx + 68] = mem[_2270 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2351 + 68] = mem[_2351 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2351 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1626 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1626] = 26
                    mem[_1626 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2269 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2269] = 26
                        mem[_2269 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2348 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2348 + idx + 68] = mem[_2269 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2348 + 68] = mem[_2348 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2348 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2347 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2347] = 26
                    mem[_2347 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2421 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2421 + idx + 68] = mem[_2347 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2421 + 68] = mem[_2421 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2421 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1505 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1505] = 26
                    mem[_1505 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1520 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1520 + idx + 68] = mem[_1505 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1520 + 68] = mem[_1520 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1520 + -mem[64] + 100
                    require totalAllocPoint
                    _1550 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1550] = 26
                    mem[_1550 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1625 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1625] = 26
                        mem[_1625 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2268 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2268] = 26
                            mem[_2268 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2344 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2344 + idx + 68] = mem[_2268 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2344 + 68] = mem[_2344 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2344 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2343 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2343] = 26
                        mem[_2343 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2417 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2417 + idx + 68] = mem[_2343 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2417 + 68] = mem[_2417 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2417 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1635 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1635] = 26
                    mem[_1635 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2342 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2342] = 26
                        mem[_2342 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2414 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2414 + idx + 68] = mem[_2342 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2414 + 68] = mem[_2414 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2414 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2413 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2413] = 26
                    mem[_2413 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2475 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2475 + idx + 68] = mem[_2413 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2475 + 68] = mem[_2475 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2475 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1519 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1519] = 26
                mem[_1519 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1530 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1530 + idx + 68] = mem[_1519 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1530 + 68] = mem[_1530 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1530 + -mem[64] + 100
                require totalAllocPoint
                _1565 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1565] = 26
                mem[_1565 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1634 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1634] = 26
                    mem[_1634 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2341 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2341] = 26
                        mem[_2341 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2410 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2410 + idx + 68] = mem[_2341 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2410 + 68] = mem[_2410 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2410 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2409 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2409] = 26
                    mem[_2409 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2471 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2471 + idx + 68] = mem[_2409 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2471 + 68] = mem[_2471 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2471 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1648 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1648] = 26
                mem[_1648 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2408 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2408] = 26
                    mem[_2408 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2468 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2468 + idx + 68] = mem[_2408 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2468 + 68] = mem[_2468 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2468 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2467 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2467] = 26
                mem[_2467 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2520 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2520 + idx + 68] = mem[_2467 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2520 + 68] = mem[_2520 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2520 + -mem[64] + 100
            if poolInfo[idx].field_512 >= bonusEndBlock:
                _1432 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1432] = 30
                mem[_1432 + 32] = 'SafeMath: subtraction overflow'
                if poolInfo[idx].field_512 > block.number:
                    _1439 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1439 + idx + 68] = mem[_1432 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1439 + 68] = mem[_1439 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1439 + -mem[64] + 100
                if not block.number - poolInfo[idx].field_512:
                    _1470 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1470] = 26
                    mem[_1470 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1478 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1478 + idx + 68] = mem[_1470 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1478 + 68] = mem[_1478 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1478 + -mem[64] + 100
                    require totalAllocPoint
                    _1504 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1504] = 26
                    mem[_1504 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1568 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1568] = 26
                        mem[_1568 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2051 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2051] = 26
                            mem[_2051 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2107 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2107 + idx + 68] = mem[_2051 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2107 + 68] = mem[_2107 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2107 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2106 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2106] = 26
                        mem[_2106 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2170 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2170 + idx + 68] = mem[_2106 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2170 + 68] = mem[_2170 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2170 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1587 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1587] = 26
                    mem[_1587 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2105 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2105] = 26
                        mem[_2105 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2167 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2167 + idx + 68] = mem[_2105 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2167 + 68] = mem[_2167 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2167 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2166 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2166] = 26
                    mem[_2166 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2234 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2234 + idx + 68] = mem[_2166 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2234 + 68] = mem[_2234 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2234 + -mem[64] + 100
                require block.number - poolInfo[idx].field_512
                if (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) / block.number - poolInfo[idx].field_512 != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock):
                    _1477 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1477] = 26
                    mem[_1477 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1483 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1483 + idx + 68] = mem[_1477 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1483 + 68] = mem[_1483 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1483 + -mem[64] + 100
                    require totalAllocPoint
                    _1518 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1518] = 26
                    mem[_1518 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1586 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1586] = 26
                        mem[_1586 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2104 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2104] = 26
                            mem[_2104 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2163 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2163 + idx + 68] = mem[_2104 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2163 + 68] = mem[_2163 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2163 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2162 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2162] = 26
                        mem[_2162 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2230 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2230 + idx + 68] = mem[_2162 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2230 + 68] = mem[_2230 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2230 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1607 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1607] = 26
                    mem[_1607 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2161 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2161] = 26
                        mem[_2161 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2227 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2227 + idx + 68] = mem[_2161 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2227 + 68] = mem[_2227 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2227 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2226 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2226] = 26
                    mem[_2226 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2299 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2299 + idx + 68] = mem[_2226 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2299 + 68] = mem[_2299 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2299 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (poolInfo[idx].field_512 * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1482 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1482] = 26
                mem[_1482 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1493 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1493 + idx + 68] = mem[_1482 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1493 + 68] = mem[_1493 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1493 + -mem[64] + 100
                require totalAllocPoint
                _1529 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1529] = 26
                mem[_1529 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1606 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1606] = 26
                    mem[_1606 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2160 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2160] = 26
                        mem[_2160 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2223 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2223 + idx + 68] = mem[_2160 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2223 + 68] = mem[_2223 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2223 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2222 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2222] = 26
                    mem[_2222 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2295 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2295 + idx + 68] = mem[_2222 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2295 + 68] = mem[_2295 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2295 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1619 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1619] = 26
                mem[_1619 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2221 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2221] = 26
                    mem[_2221 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2292 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2292 + idx + 68] = mem[_2221 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2292 + 68] = mem[_2292 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2292 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2291 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2291] = 26
                mem[_2291 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2366 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2366 + idx + 68] = mem[_2291 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2366 + 68] = mem[_2366 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2366 + -mem[64] + 100
            _1431 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1431] = 30
            mem[_1431 + 32] = 'SafeMath: subtraction overflow'
            if bonusEndBlock > block.number:
                _1436 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1436 + idx + 68] = mem[_1431 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1436 + 68] = mem[_1436 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1436 + -mem[64] + 100
            _1447 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1447] = 30
            mem[_1447 + 32] = 'SafeMath: subtraction overflow'
            if poolInfo[idx].field_512 > bonusEndBlock:
                _1455 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1455 + idx + 68] = mem[_1447 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1455 + 68] = mem[_1455 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1455 + -mem[64] + 100
            if not bonusEndBlock - poolInfo[idx].field_512:
                if block.number - bonusEndBlock < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not block.number - bonusEndBlock:
                    _1535 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1535] = 26
                    mem[_1535 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1545 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1545 + idx + 68] = mem[_1535 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1545 + 68] = mem[_1545 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1545 + -mem[64] + 100
                    require totalAllocPoint
                    _1585 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1585] = 26
                    mem[_1585 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1649 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1649] = 26
                        mem[_1649 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2433 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2433] = 26
                            mem[_2433 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2490 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2490 + idx + 68] = mem[_2433 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2490 + 68] = mem[_2490 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2490 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2489 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2489] = 26
                        mem[_2489 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2546 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2546 + idx + 68] = mem[_2489 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2546 + 68] = mem[_2546 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2546 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1673 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1673] = 26
                    mem[_1673 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2488 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2488] = 26
                        mem[_2488 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2543 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2543 + idx + 68] = mem[_2488 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2543 + 68] = mem[_2543 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2543 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2542 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2542] = 26
                    mem[_2542 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2603 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2603 + idx + 68] = mem[_2542 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2603 + 68] = mem[_2603 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2603 + -mem[64] + 100
                require block.number - bonusEndBlock
                if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                    _1544 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1544] = 26
                    mem[_1544 + 32] = 'SafeMath: division by zero'
                    if totalAllocPoint <= 0:
                        _1559 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_1559 + idx + 68] = mem[_1544 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1559 + 68] = mem[_1559 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _1559 + -mem[64] + 100
                    require totalAllocPoint
                    _1605 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1605] = 26
                    mem[_1605 + 32] = 'SafeMath: division by zero'
                    if not 0 / totalAllocPoint / 100:
                        _1672 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1672] = 26
                        mem[_1672 + 32] = 'SafeMath: division by zero'
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        mem[mem[64] + 36] = 0 / totalAllocPoint
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            _2487 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_2487] = 26
                            mem[_2487 + 32] = 'SafeMath: division by zero'
                            if ext_call.return_data[0] > 0:
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[idx].field_512 = block.number
                                idx = idx + 1
                                continue 
                            _2539 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_2539 + idx + 68] = mem[_2487 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_2539 + 68] = mem[_2539 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _2539 + -mem[64] + 100
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _2538 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2538] = 26
                        mem[_2538 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2599 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2599 + idx + 68] = mem[_2538 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2599 + 68] = mem[_2599 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2599 + -mem[64] + 100
                    require 0 / totalAllocPoint / 100
                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _1706 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1706] = 26
                    mem[_1706 + 32] = 'SafeMath: division by zero'
                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / totalAllocPoint / 10 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 15 * 0 / totalAllocPoint / 100
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2537 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2537] = 26
                        mem[_2537 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2596 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2596 + idx + 68] = mem[_2537 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2596 + 68] = mem[_2596 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2596 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2595 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2595] = 26
                    mem[_2595 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2657 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2657 + idx + 68] = mem[_2595 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2657 + 68] = mem[_2657 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2657 + -mem[64] + 100
                require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[idx].field_256:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1558 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1558] = 26
                mem[_1558 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1574 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1574 + idx + 68] = mem[_1558 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1574 + 68] = mem[_1574 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1574 + -mem[64] + 100
                require totalAllocPoint
                _1618 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1618] = 26
                mem[_1618 + 32] = 'SafeMath: division by zero'
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                    _1705 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1705] = 26
                    mem[_1705 + 32] = 'SafeMath: division by zero'
                    if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                        _2536 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2536] = 26
                        mem[_2536 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2592 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2592 + idx + 68] = mem[_2536 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2592 + 68] = mem[_2592 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2592 + -mem[64] + 100
                    require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                    if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2591 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2591] = 26
                    mem[_2591 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2653 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2653 + idx + 68] = mem[_2591 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2653 + 68] = mem[_2653 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2653 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1742 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1742] = 26
                mem[_1742 + 32] = 'SafeMath: division by zero'
                if ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2590 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2590] = 26
                    mem[_2590 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2650 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2650 + idx + 68] = mem[_2590 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2650 + 68] = mem[_2650 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2650 + -mem[64] + 100
                require (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2649 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2649] = 26
                mem[_2649 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2707 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2707 + idx + 68] = mem[_2649 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2707 + 68] = mem[_2707 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2707 + -mem[64] + 100
            require bonusEndBlock - poolInfo[idx].field_512
            if bonusEndBlock - poolInfo[idx].field_512 / bonusEndBlock - poolInfo[idx].field_512 != 1:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if block.number < bonusEndBlock:
                revert with 0, 'SafeMath: addition overflow'
            if not -poolInfo[idx].field_512 + block.number:
                _1543 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1543] = 26
                mem[_1543 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1555 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1555 + idx + 68] = mem[_1543 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1555 + 68] = mem[_1555 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1555 + -mem[64] + 100
                require totalAllocPoint
                _1602 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1602] = 26
                mem[_1602 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1671 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1671] = 26
                    mem[_1671 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2486 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2486] = 26
                        mem[_2486 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2533 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2533 + idx + 68] = mem[_2486 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2533 + 68] = mem[_2533 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2533 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2532 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2532] = 26
                    mem[_2532 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2586 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2586 + idx + 68] = mem[_2532 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2586 + 68] = mem[_2586 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2586 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1704 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1704] = 26
                mem[_1704 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2531 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2531] = 26
                    mem[_2531 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2583 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2583 + idx + 68] = mem[_2531 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2583 + 68] = mem[_2583 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2583 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2582 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2582] = 26
                mem[_2582 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2643 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2643 + idx + 68] = mem[_2582 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2643 + 68] = mem[_2643 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2643 + -mem[64] + 100
            require -poolInfo[idx].field_512 + block.number
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[idx].field_512 + block.number != rewardPerBlock:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
                _1554 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1554] = 26
                mem[_1554 + 32] = 'SafeMath: division by zero'
                if totalAllocPoint <= 0:
                    _1570 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_1570 + idx + 68] = mem[_1554 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1570 + 68] = mem[_1570 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _1570 + -mem[64] + 100
                require totalAllocPoint
                _1617 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1617] = 26
                mem[_1617 + 32] = 'SafeMath: division by zero'
                if not 0 / totalAllocPoint / 100:
                    _1703 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1703] = 26
                    mem[_1703 + 32] = 'SafeMath: division by zero'
                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(this.address)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                        revert with 0, 'Balance is not enough'
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args devAddr, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args communityAddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    mem[mem[64] + 36] = 0 / totalAllocPoint
                    require ext_code.size(sub_a7b160cbAddress)
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / totalAllocPoint:
                        _2530 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2530] = 26
                        mem[_2530 + 32] = 'SafeMath: division by zero'
                        if ext_call.return_data[0] > 0:
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[idx].field_512 = block.number
                            idx = idx + 1
                            continue 
                        _2579 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_2579 + idx + 68] = mem[_2530 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_2579 + 68] = mem[_2579 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _2579 + -mem[64] + 100
                    require 0 / totalAllocPoint
                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _2578 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2578] = 26
                    mem[_2578 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2639 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2639 + idx + 68] = mem[_2578 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2639 + 68] = mem[_2639 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2639 + -mem[64] + 100
                require 0 / totalAllocPoint / 100
                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _1741 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1741] = 26
                mem[_1741 + 32] = 'SafeMath: division by zero'
                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / totalAllocPoint / 10 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 15 * 0 / totalAllocPoint / 100
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, 0 / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = 0 / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), 0 / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / totalAllocPoint:
                    _2577 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2577] = 26
                    mem[_2577 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2636 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2636 + idx + 68] = mem[_2577 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2636 + 68] = mem[_2636 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2636 + -mem[64] + 100
                require 0 / totalAllocPoint
                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2635 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2635] = 26
                mem[_2635 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2698 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2698 + idx + 68] = mem[_2635 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2698 + 68] = mem[_2698 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2698 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / (-1 * poolInfo[idx].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[idx].field_256:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1569 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1569] = 26
            mem[_1569 + 32] = 'SafeMath: division by zero'
            if totalAllocPoint <= 0:
                _1590 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1590 + idx + 68] = mem[_1569 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1590 + 68] = mem[_1590 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1590 + -mem[64] + 100
            require totalAllocPoint
            _1627 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1627] = 26
            mem[_1627 + 32] = 'SafeMath: division by zero'
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100:
                _1740 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1740] = 26
                mem[_1740 + 32] = 'SafeMath: division by zero'
                if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                    revert with 0, 'Balance is not enough'
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args devAddr, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                require ext_code.size(sub_a7b160cbAddress)
                call sub_a7b160cbAddress.0xa9059cbb with:
                     gas gas_remaining wei
                    args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                    _2576 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2576] = 26
                    mem[_2576 + 32] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] > 0:
                        require ext_call.return_data[0]
                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.number
                        idx = idx + 1
                        continue 
                    _2632 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[_2632 + idx + 68] = mem[_2576 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_2632 + 68] = mem[_2632 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _2632 + -mem[64] + 100
                require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _2631 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2631] = 26
                mem[_2631 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2694 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2694 + idx + 68] = mem[_2631 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2694 + 68] = mem[_2694 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2694 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100 != 15:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1779 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1779] = 26
            mem[_1779 + 32] = 'SafeMath: division by zero'
            if ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                revert with 0, 'SafeMath: addition overflow'
            if (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 < 0:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(sub_a7b160cbAddress)
            staticcall sub_a7b160cbAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(this.address)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10):
                revert with 0, 'Balance is not enough'
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args devAddr, 15 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 100
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args communityAddr, (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            mem[mem[64] + 36] = (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            require ext_code.size(sub_a7b160cbAddress)
            call sub_a7b160cbAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(this.address), (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                _2630 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2630] = 26
                mem[_2630 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0] > 0:
                    require ext_call.return_data[0]
                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                        revert with 0, 'SafeMath: addition overflow'
                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.number
                    idx = idx + 1
                    continue 
                _2691 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_2691 + idx + 68] = mem[_2630 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_2691 + 68] = mem[_2691 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _2691 + -mem[64] + 100
            require (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint
            if 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _2690 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2690] = 26
            mem[_2690 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0] > 0:
                require ext_call.return_data[0]
                if poolInfo[idx].field_768 + (10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                poolInfo[idx].field_768 += 10^12 * (-1 * poolInfo[idx].field_512 * rewardPerBlock * poolInfo[idx].field_256) + (block.number * rewardPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
                idx = idx + 1
                continue 
            _2745 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_2745 + idx + 68] = mem[_2690 + idx + 32]
                idx = idx + 32
                continue 
            mem[_2745 + 68] = mem[_2745 + 74 len 26]
            revert with memory
              from mem[64]
               len _2745 + -mem[64] + 100
    if totalAllocPoint + arg1 < totalAllocPoint:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint += arg1
    poolInfo.length++
    poolInfo[poolInfo.length].field_0 = arg2
    poolInfo[poolInfo.length].field_256 = arg1
    if block.number > startBlock:
        poolInfo[poolInfo.length].field_512 = block.number
    else:
        poolInfo[poolInfo.length].field_512 = startBlock
    poolInfo[poolInfo.length].field_768 = 0
}

function deposit(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    if block.number <= poolInfo[arg1].field_512:
        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                revert with 0, 'Address: call to non-contract'
            mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
            mem[416 len 4] = 0
            mem[388 len 0] = 0
            call poolInfo[arg1].field_0 with:
                 gas gas_remaining wei
                args Mask(224, 32, arg2) << 480, mem[388 len 4]
            if not return_data.size:
                if not ext_call.success:
                    revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
                if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                    revert with 0, 
                                32,
                                42,
                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[402 len 14],
                                0,
                                mem[420 len 4]
                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][address(msg.sender)].field_0 += arg2
                if not userInfo[arg1][address(msg.sender)].field_0:
                    userInfo[arg1][address(msg.sender)].field_256 = 0
                else:
                    require userInfo[arg1][address(msg.sender)].field_0
                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
            else:
                mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size > 0:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size > 0:
                    require return_data.size >= 32
                    if not mem[324]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 403 len 22]
                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][address(msg.sender)].field_0 += arg2
                if not userInfo[arg1][address(msg.sender)].field_0:
                    userInfo[arg1][address(msg.sender)].field_256 = 0
                else:
                    require userInfo[arg1][address(msg.sender)].field_0
                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 394 len 31]
                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
        else:
            if not userInfo[arg1][address(msg.sender)].field_0:
                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                else:
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[526 len 26]
                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                    revert with 0, 'Address: call to non-contract'
                mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[544 len 4] = 0
            else:
                require userInfo[arg1][address(msg.sender)].field_0
                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_a7b160cbAddress)
                staticcall sub_a7b160cbAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(sub_a7b160cbAddress)
                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[526 len 26]
                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                        revert with 0, 'Address: call to non-contract'
                    mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                    mem[544 len 4] = 0
                else:
                    call sub_a7b160cbAddress.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[526 len 26]
                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                        revert with 0, 'Address: call to non-contract'
                    mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                    mem[544 len 4] = 0
                    mem[516 len 0] = 0
            call poolInfo[arg1].field_0 with:
                 gas gas_remaining wei
                args Mask(224, 32, arg2) << 480, mem[516 len 4]
            if not return_data.size:
                require not ext_call.success
                revert with 'SafeMath: division by zero'
            mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size > 0:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size > 0:
                require return_data.size >= 32
                if not mem[452]:
                    revert with 0, 
                                32,
                                42,
                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[ceil32(return_data.size) + 531 len 22]
            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                revert with 0, 'SafeMath: addition overflow'
            userInfo[arg1][address(msg.sender)].field_0 += arg2
            if not userInfo[arg1][address(msg.sender)].field_0:
                userInfo[arg1][address(msg.sender)].field_256 = 0
            else:
                require userInfo[arg1][address(msg.sender)].field_0
                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                    revert with 0, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[ceil32(return_data.size) + 522 len 31]
                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
    else:
        require ext_code.size(poolInfo[arg1].field_0)
        staticcall poolInfo[arg1].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg1].field_512 = block.number
            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                    revert with 0, 'Address: call to non-contract'
                mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[416 len 4] = 0
                call poolInfo[arg1].field_0 with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 480, mem[388 len 4]
                if not return_data.size:
                    if not ext_call.success:
                        revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
                    if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                        revert with 0, 
                                    32,
                                    42,
                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[402 len 14],
                                    0,
                                    mem[420 len 4]
                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                    if not userInfo[arg1][address(msg.sender)].field_0:
                        userInfo[arg1][address(msg.sender)].field_256 = 0
                    else:
                        require userInfo[arg1][address(msg.sender)].field_0
                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                else:
                    mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        if return_data.size > 0:
                            revert with ext_call.return_data[0 len return_data.size]
                        revert with 0, 'SafeERC20: low-level call failed'
                    if return_data.size > 0:
                        require return_data.size >= 32
                        if not mem[324]:
                            revert with 0, 
                                        32,
                                        42,
                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                        mem[ceil32(return_data.size) + 403 len 22]
                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                        revert with 0, 'SafeMath: addition overflow'
                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                    if not userInfo[arg1][address(msg.sender)].field_0:
                        userInfo[arg1][address(msg.sender)].field_256 = 0
                    else:
                        require userInfo[arg1][address(msg.sender)].field_0
                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[ceil32(return_data.size) + 394 len 31]
                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
            else:
                if not userInfo[arg1][address(msg.sender)].field_0:
                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                    else:
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[526 len 26]
                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                        revert with 0, 'Address: call to non-contract'
                    mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                    mem[544 len 4] = 0
                    mem[516 len 0] = 0
                else:
                    require userInfo[arg1][address(msg.sender)].field_0
                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_a7b160cbAddress)
                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(sub_a7b160cbAddress)
                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                    else:
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[526 len 26]
                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                        revert with 0, 'Address: call to non-contract'
                    mem[420 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                    mem[544 len 4] = 0
                call poolInfo[arg1].field_0 with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 480, mem[516 len 4]
                if not return_data.size:
                    require not ext_call.success
                    revert with 'SafeMath: division by zero'
                mem[452 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size > 0:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size > 0:
                    require return_data.size >= 32
                    if not mem[452]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 531 len 22]
                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][address(msg.sender)].field_0 += arg2
                if not userInfo[arg1][address(msg.sender)].field_0:
                    userInfo[arg1][address(msg.sender)].field_256 = 0
                else:
                    require userInfo[arg1][address(msg.sender)].field_0
                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 522 len 31]
                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
        else:
            if block.number <= bonusEndBlock:
                if poolInfo[arg1].field_512 > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.number - poolInfo[arg1].field_512:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint / 100:
                        if 0 / totalAllocPoint < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[864 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                mem[708 len 0] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[864 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                    else:
                        require 0 / totalAllocPoint / 100
                        if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / totalAllocPoint / 10 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(sub_a7b160cbAddress)
                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                            revert with 0, 'Balance is not enough'
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args devAddr, 15 * 0 / totalAllocPoint / 100
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args communityAddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(sub_a7b160cbAddress)
                        call sub_a7b160cbAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[864 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                else:
                    require block.number - poolInfo[arg1].field_512
                    if block.number - poolInfo[arg1].field_512 / block.number - poolInfo[arg1].field_512 != 1:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint / 100:
                            if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require 0 / totalAllocPoint / 100
                            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / totalAllocPoint / 10 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    mem[708 len 0] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                    else:
                        require block.number - poolInfo[arg1].field_512
                        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
                            if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
            else:
                if poolInfo[arg1].field_512 >= bonusEndBlock:
                    if poolInfo[arg1].field_512 > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint / 100:
                            if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            poolInfo[arg1].field_512 = block.number
                            if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                    revert with 0, 'Address: call to non-contract'
                                mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                mem[736 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[644]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 723 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 714 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        mem[836 len 0] = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                    else:
                                        call sub_a7b160cbAddress.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[864 len 4] = 0
                                call poolInfo[arg1].field_0 with:
                                     gas gas_remaining wei
                                    args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 'SafeMath: subtraction overflow'
                                mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size > 0:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size > 0:
                                    require return_data.size >= 32
                                    if not mem[772]:
                                        revert with 0, 
                                                    32,
                                                    42,
                                                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                    mem[ceil32(return_data.size) + 851 len 22]
                                if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userInfo[arg1][address(msg.sender)].field_0 += arg2
                                if not userInfo[arg1][address(msg.sender)].field_0:
                                    userInfo[arg1][address(msg.sender)].field_256 = 0
                                else:
                                    require userInfo[arg1][address(msg.sender)].field_0
                                    if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[ceil32(return_data.size) + 842 len 31]
                                    userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require 0 / totalAllocPoint / 100
                            if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                revert with 0, 'SafeMath: addition overflow'
                            if 0 / totalAllocPoint / 10 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_a7b160cbAddress)
                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                revert with 0, 'Balance is not enough'
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args devAddr, 15 * 0 / totalAllocPoint / 100
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args communityAddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(sub_a7b160cbAddress)
                            call sub_a7b160cbAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[arg1].field_512 = block.number
                                if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                        revert with 0, 'Address: call to non-contract'
                                    mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                    mem[736 len 4] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[644]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 723 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 714 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(sub_a7b160cbAddress)
                                        staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(sub_a7b160cbAddress)
                                        if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            call sub_a7b160cbAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                    call poolInfo[arg1].field_0 with:
                                         gas gas_remaining wei
                                        args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 'SafeMath: subtraction overflow'
                                    mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size > 0:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 'SafeERC20: low-level call failed'
                                    if return_data.size > 0:
                                        require return_data.size >= 32
                                        if not mem[772]:
                                            revert with 0, 
                                                        32,
                                                        42,
                                                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                        mem[ceil32(return_data.size) + 851 len 22]
                                    if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userInfo[arg1][address(msg.sender)].field_0 += arg2
                                    if not userInfo[arg1][address(msg.sender)].field_0:
                                        userInfo[arg1][address(msg.sender)].field_256 = 0
                                    else:
                                        require userInfo[arg1][address(msg.sender)].field_0
                                        if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[ceil32(return_data.size) + 842 len 31]
                                        userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                    else:
                        require block.number - poolInfo[arg1].field_512
                        if (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) / block.number - poolInfo[arg1].field_512 != rewardPerBlock:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if not (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                            mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock)
                            if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (poolInfo[arg1].field_512 * rewardPerBlock) != poolInfo[arg1].field_256:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[864 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[718 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[612 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[736 len 4] = 0
                                        mem[708 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[708 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[644 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[644]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 723 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 714 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[864 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[846 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[740 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[864 len 4] = 0
                                                mem[836 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[836 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[772 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[772]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 851 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 842 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                else:
                    if bonusEndBlock > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if poolInfo[arg1].field_512 > bonusEndBlock:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not bonusEndBlock - poolInfo[arg1].field_512:
                        if block.number - bonusEndBlock < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        mem[772 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require block.number - bonusEndBlock
                            if (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) / block.number - bonusEndBlock != rewardPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint / 100:
                                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            mem[772 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint / 100
                                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * 0 / totalAllocPoint / 100
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock)
                                if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / (block.number * rewardPerBlock) - (bonusEndBlock * rewardPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                    if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                        if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            mem[772 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                        if 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.number * rewardPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                    else:
                        require bonusEndBlock - poolInfo[arg1].field_512
                        if bonusEndBlock - poolInfo[arg1].field_512 / bonusEndBlock - poolInfo[arg1].field_512 != 1:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if block.number < bonusEndBlock:
                            revert with 0, 'SafeMath: addition overflow'
                        if not -poolInfo[arg1].field_512 + block.number:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint / 100:
                                if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require 0 / totalAllocPoint / 100
                                if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                    revert with 0, 'SafeMath: addition overflow'
                                if 0 / totalAllocPoint / 10 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(sub_a7b160cbAddress)
                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                    revert with 0, 'Balance is not enough'
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args devAddr, 15 * 0 / totalAllocPoint / 100
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args communityAddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(sub_a7b160cbAddress)
                                call sub_a7b160cbAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                        else:
                            require -poolInfo[arg1].field_512 + block.number
                            if (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) / -poolInfo[arg1].field_512 + block.number != rewardPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                            if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint / 100:
                                    if 0 / totalAllocPoint < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (0 / totalAllocPoint) + (0 / totalAllocPoint / 10) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require 0 / totalAllocPoint / 100
                                    if 15 * 0 / totalAllocPoint / 100 / 0 / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) < 0 / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < (0 / totalAllocPoint) + (15 * 0 / totalAllocPoint / 100) + (0 / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * 0 / totalAllocPoint / 100
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                            else:
                                require (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock)
                                if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / (-1 * poolInfo[arg1].field_512 * rewardPerBlock) + (block.number * rewardPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100:
                                    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10) < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                        if 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[arg1].field_512 = block.number
                                    if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                        if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                            revert with 0, 'Address: call to non-contract'
                                        mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                        mem[800 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[708]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 787 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 778 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if -userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                            if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(sub_a7b160cbAddress)
                                            staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(sub_a7b160cbAddress)
                                            if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                            else:
                                                call sub_a7b160cbAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args msg.sender, ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[928 len 4] = 0
                                        call poolInfo[arg1].field_0 with:
                                             gas gas_remaining wei
                                            args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 'SafeMath: subtraction overflow'
                                        mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size > 0:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 'SafeERC20: low-level call failed'
                                        if return_data.size > 0:
                                            require return_data.size >= 32
                                            if not mem[836]:
                                                revert with 0, 
                                                            32,
                                                            42,
                                                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                            mem[ceil32(return_data.size) + 915 len 22]
                                        if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userInfo[arg1][address(msg.sender)].field_0 += arg2
                                        if not userInfo[arg1][address(msg.sender)].field_0:
                                            userInfo[arg1][address(msg.sender)].field_256 = 0
                                        else:
                                            require userInfo[arg1][address(msg.sender)].field_0
                                            if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[ceil32(return_data.size) + 906 len 31]
                                            userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                else:
                                    require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if 15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100 != 15:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                    if ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) < (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    staticcall sub_a7b160cbAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint) + (15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100) + ((-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10):
                                        revert with 0, 'Balance is not enough'
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args devAddr, 15 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 100
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args communityAddr, (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(sub_a7b160cbAddress)
                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(this.address), (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 > ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                    if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                    mem[928 len 4] = 0
                                                    mem[900 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                    else:
                                        require (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                        if 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_768 + (10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (-1 * poolInfo[arg1].field_512 * rewardPerBlock * poolInfo[arg1].field_256) + (block.number * rewardPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[arg1].field_512 = block.number
                                        if userInfo[arg1][address(msg.sender)].field_0 <= 0:
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[782 len 26]
                                            if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                revert with 0, 'Address: call to non-contract'
                                            mem[676 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                            mem[800 len 4] = 0
                                            mem[772 len 0] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[772 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[708 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[708]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 787 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 778 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
                                        else:
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                if userInfo[arg1][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if -userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, -userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                                mem[900 len 0] = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                                if userInfo[arg1][address(msg.sender)].field_256 > userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(sub_a7b160cbAddress)
                                                staticcall sub_a7b160cbAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_code.size(sub_a7b160cbAddress)
                                                if (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256 <= ext_call.return_data[0]:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, (userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(msg.sender)].field_256
                                                else:
                                                    call sub_a7b160cbAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args msg.sender, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[910 len 26]
                                                if ext_code.size(poolInfo[arg1].field_0) <= 0:
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[804 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                                                mem[928 len 4] = 0
                                            call poolInfo[arg1].field_0 with:
                                                 gas gas_remaining wei
                                                args Mask(224, 32, arg2) << 480, mem[900 len 4]
                                            if not return_data.size:
                                                require not ext_call.success
                                                revert with 'SafeMath: subtraction overflow'
                                            mem[836 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                if return_data.size > 0:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                revert with 0, 'SafeERC20: low-level call failed'
                                            if return_data.size > 0:
                                                require return_data.size >= 32
                                                if not mem[836]:
                                                    revert with 0, 
                                                                32,
                                                                42,
                                                                0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                                                mem[ceil32(return_data.size) + 915 len 22]
                                            if userInfo[arg1][address(msg.sender)].field_0 + arg2 < userInfo[arg1][address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userInfo[arg1][address(msg.sender)].field_0 += arg2
                                            if not userInfo[arg1][address(msg.sender)].field_0:
                                                userInfo[arg1][address(msg.sender)].field_256 = 0
                                            else:
                                                require userInfo[arg1][address(msg.sender)].field_0
                                                if userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[ceil32(return_data.size) + 906 len 31]
                                                userInfo[arg1][address(msg.sender)].field_256 = userInfo[arg1][address(msg.sender)].field_0 * poolInfo[arg1].field_768 / 10^12
    emit Deposit(arg2, msg.sender, arg1);
}



}
